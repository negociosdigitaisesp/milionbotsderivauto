#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Radar Analisis Scalping Bot - Sistema de Trading com 3 Estrat√©gias de Alta Assertividade
Sistema integrado com rastreamento autom√°tico de resultados no Supabase

Estrat√©gias implementadas:
- MICRO-BURST: 95.5% assertividade
- PRECISION SURGE CORRIGIDO: 93.5% assertividade (4-5 WINs consecutivos, m√°x 2 LOSSes em 15 ops, sem LOSSes consecutivos em 10 ops)
- QUANTUM MATRIX: 91.5% assertividade

Sistema consolidado: 94.51% assertividade a cada 6 opera√ß√µes
"""

import os
import time
import uuid
from datetime import datetime, timedelta
from supabase import create_client, Client
from dotenv import load_dotenv
import logging
from typing import List, Dict, Optional, Tuple
from collections import defaultdict
import traceback
from dataclasses import dataclass, field
# import threading  # REMOVIDO - threading √≥rf√£o n√£o utilizado
# from threading import Lock  # REMOVIDO - threading √≥rf√£o n√£o utilizado
from functools import wraps

# ===== CORRE√á√ÉO 2: IMPORTS PARA SISTEMA TELEGRAM SEGURO =====
import asyncio
from concurrent.futures import ThreadPoolExecutor
import threading

# NUEVAS IMPORTACIONES PARA TELEGRAM
# Importar sys e os para manipula√ß√£o de path
import sys
import os

try:
    # Primeiro tenta importar normalmente
    from telegram_notifier import (
        inicializar_telegram,
        enviar_alerta_patron,
        enviar_resultado_operacion,
        enviar_finalizacion_estrategia,
        enviar_mensaje_sistema
    )
    TELEGRAM_DISPONIBLE = True
except ImportError:
    try:
        # Se falhar, tenta adicionar o diret√≥rio atual ao path
        # Adiciona o diret√≥rio atual ao path
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        from telegram_notifier import (
            inicializar_telegram,
            enviar_alerta_patron,
            enviar_resultado_operacion,
            enviar_finalizacion_estrategia,
            enviar_mensaje_sistema
        )
        TELEGRAM_DISPONIBLE = True
    except ImportError:
        print("‚ö†Ô∏è M√≥dulo telegram_notifier no encontrado - funcionando sin notificaciones")
        TELEGRAM_DISPONIBLE = False

# Variable global para controlar si Telegram est√° activo
telegram_activo = False

# ===== CORRE√á√ÉO 2: VARI√ÅVEIS GLOBAIS PARA POOL TELEGRAM SEGURO =====
telegram_executor = None
telegram_loop = None
telegram_lock = threading.Lock()

# Carregar vari√°veis de ambiente
load_dotenv()

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('scalping_bot_debug.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Reduzir logs de bibliotecas externas
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('httpcore').setLevel(logging.WARNING)
logging.getLogger('supabase').setLevel(logging.WARNING)
logging.getLogger('postgrest').setLevel(logging.WARNING)
logging.getLogger('urllib3').setLevel(logging.WARNING)

# ===== DECORATOR RETRY PARA OPERA√á√ïES SUPABASE =====
def retry_supabase_operation(max_retries=3, delay=2):
    """Decorator corrigido para retry autom√°tico"""
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            last_exception = None
            
            for attempt in range(max_retries):
                try:
                    logger.debug(f"[RETRY] Tentativa {attempt + 1}/{max_retries} para {func.__name__}")
                    result = func(*args, **kwargs)
                    
                    # Se retornou um valor v√°lido (n√£o None), considerar sucesso
                    if result is not None:
                        return result
                    else:
                        raise Exception(f"Fun√ß√£o {func.__name__} retornou None")
                        
                except Exception as e:
                    last_exception = e
                    if attempt < max_retries - 1:
                        logger.warning(f"[RETRY] Tentativa {attempt + 1} falhou: {e}. Tentando novamente em {delay}s...")
                        time.sleep(delay)
                    else:
                        logger.error(f"[RETRY] Todas as {max_retries} tentativas falharam")
            
            # Se chegou aqui, todas as tentativas falharam
            logger.error(f"[RETRY] Erro final: {last_exception}")
            raise last_exception
            
        return wrapper
    return decorator

# Configura√ß√µes
BOT_NAME = 'Scalping Bot'
ANALISE_INTERVALO = 5  # segundos entre an√°lises
OPERACOES_MINIMAS = 20  # opera√ß√µes m√≠nimas para an√°lise
OPERACOES_HISTORICO = 30  # opera√ß√µes para buscar no hist√≥rico
PERSISTENCIA_TIMEOUT = 300  # 5 minutos timeout
PERSISTENCIA_OPERACOES = 2  # 2 opera√ß√µes para reset

# ===== CORRE√á√ÉO 2: SISTEMA TELEGRAM COM POOL SEGURO =====
def inicializar_telegram_seguro():
    """Inicializa Telegram com pool de threads dedicado"""
    global telegram_activo, TELEGRAM_DISPONIBLE, telegram_executor, telegram_loop
    
    try:
        # Verificar se o m√≥dulo existe
        import importlib.util
        spec = importlib.util.find_spec("telegram_notifier")
        
        if spec is None:
            print("‚ùå M√≥dulo telegram_notifier n√£o encontrado")
            TELEGRAM_DISPONIBLE = False
            telegram_activo = False
            return False
        
        # Criar executor dedicado para Telegram
        with telegram_lock:
            if telegram_executor is None:
                telegram_executor = ThreadPoolExecutor(max_workers=2, thread_name_prefix="telegram")
                print("‚úÖ Pool de threads Telegram criado")
            
            # Criar loop de eventos dedicado em thread separada
            def criar_loop_telegram():
                global telegram_loop
                telegram_loop = asyncio.new_event_loop()
                asyncio.set_event_loop(telegram_loop)
                print("‚úÖ Loop de eventos Telegram criado")
                telegram_loop.run_forever()
            
            if telegram_loop is None or telegram_loop.is_closed():
                # Iniciar loop em thread separada
                thread_telegram = threading.Thread(target=criar_loop_telegram, daemon=True)
                thread_telegram.start()
                
                # Aguardar loop estar pronto
                import time
                time.sleep(1)
        
        # Importar e inicializar
        from telegram_notifier import inicializar_telegram
        
        # Executar inicializa√ß√£o no executor dedicado
        future = telegram_executor.submit(inicializar_telegram)
        sucesso = future.result(timeout=10)  # Timeout de 10 segundos
        
        if sucesso:
            telegram_activo = True
            TELEGRAM_DISPONIBLE = True
            print("‚úÖ Telegram inicializado com pool seguro")
            return True
        else:
            telegram_activo = False
            print("‚ùå Falha na inicializa√ß√£o do Telegram")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao inicializar Telegram seguro: {e}")
        telegram_activo = False
        TELEGRAM_DISPONIBLE = False
        return False

def enviar_telegram_seguro(funcao_envio, *args, **kwargs):
    """Envia mensagem Telegram de forma segura usando pool de threads"""
    global telegram_executor, telegram_activo
    
    if not telegram_activo or not telegram_executor:
        logger.warning("[TELEGRAM] Telegram inativo ou pool n√£o dispon√≠vel")
        return False
    
    try:
        # Executar no pool de threads dedicado
        future = telegram_executor.submit(funcao_envio, *args, **kwargs)
        resultado = future.result(timeout=15)  # Timeout de 15 segundos
        return resultado
        
    except Exception as e:
        logger.error(f"[TELEGRAM] Erro no envio seguro: {e}")
        return False

def enviar_alerta_padrao_SEGURO(strategy_data: dict) -> bool:
    """Envia alerta de forma segura sem problemas de pool"""
    if not telegram_activo:
        logger.warning("[TELEGRAM] Telegram inativo")
        return False
    
    def _enviar_alerta_interno():
        try:
            from datetime import datetime
            from telegram_notifier import enviar_alerta_patron
            
            timestamp = datetime.now().strftime("%H:%M:%S")
            
            alert_data = {
                'timestamp': timestamp,
                'strategy': strategy_data['strategy'],
                'confidence': strategy_data['confidence'],
                'reason': strategy_data['reason'],
                'wins_consecutivos': strategy_data.get('wins_consecutivos', 0),
                'losses_ultimas_15': strategy_data.get('losses_ultimas_15', 0)
            }
            
            return enviar_alerta_patron(alert_data)
            
        except Exception as e:
            logger.error(f"[TELEGRAM] Erro interno no envio de alerta: {e}")
            return False
    
    return enviar_telegram_seguro(_enviar_alerta_interno)

def enviar_resultado_seguro(operacion_num: int, resultado: str, total_operaciones: int) -> bool:
    """Envia resultado de forma segura"""
    if not telegram_activo:
        return False
    
    def _enviar_resultado_interno():
        try:
            from datetime import datetime
            timestamp = datetime.now().strftime("%H:%M:%S")
            
            emoji_resultado = "‚úÖ" if resultado == "V" else "‚ùå"
            texto_resultado = "WIN" if resultado == "V" else "LOSS"
            
            mensaje = f"""
{emoji_resultado} <b>SCALPING BOT I.A - RESULTADO</b>

‚è∞ <b>Hora:</b> {timestamp}
ü§ñ <b>Bot:</b> Scalping Bot I.A
üìä <b>Operaci√≥n:</b> {operacion_num}/{total_operaciones}
üéØ <b>Resultado:</b> {texto_resultado}

#ScalpingBotIA #Resultado #{texto_resultado}
            """.strip()
            
            from telegram_notifier import telegram_notifier
            if telegram_notifier:
                return telegram_notifier.enviar_mensaje_sync(mensaje)
            return False
            
        except Exception as e:
            logger.error(f"[TELEGRAM] Erro interno no envio de resultado: {e}")
            return False
    
    return enviar_telegram_seguro(_enviar_resultado_interno)

def enviar_finalizacao_segura(resultados: list, exito: bool) -> bool:
    """Envia finaliza√ß√£o de forma segura"""
    if not telegram_activo:
        return False
    
    def _enviar_finalizacao_interno():
        try:
            from datetime import datetime
            from telegram_notifier import enviar_finalizacion_estrategia
            
            timestamp = datetime.now().strftime("%H:%M:%S")
            
            # A fun√ß√£o no m√≥dulo telegram_notifier provavelmente espera os argumentos diretamente.
            # O dicion√°rio 'finalizacao_data' pode ser usado internamente por ela se necess√°rio.
            return enviar_finalizacion_estrategia(resultados=resultados, exito=exito)
            
        except Exception as e:
            logger.error(f"[TELEGRAM] Erro interno no envio de finaliza√ß√£o: {e}")
            return False
    
    return enviar_telegram_seguro(_enviar_finalizacao_interno)

def finalizar_telegram_seguro():
    """Finaliza o sistema Telegram de forma segura com shutdown do executor"""
    global telegram_executor, telegram_loop, telegram_activo
    
    try:
        logger.info("[TELEGRAM] Iniciando finaliza√ß√£o segura do sistema Telegram")
        
        # Desativar Telegram
        telegram_activo = False
        
        # Finalizar executor de threads
        if telegram_executor:
            logger.info("[TELEGRAM] Fazendo shutdown do telegram_executor")
            telegram_executor.shutdown(wait=True)
            telegram_executor = None
            logger.info("[TELEGRAM] ‚úÖ telegram_executor finalizado")
        
        # Finalizar loop de eventos
        if telegram_loop and not telegram_loop.is_closed():
            logger.info("[TELEGRAM] Finalizando loop de eventos")
            try:
                telegram_loop.call_soon_threadsafe(telegram_loop.stop)
                telegram_loop = None
                logger.info("[TELEGRAM] ‚úÖ Loop de eventos finalizado")
            except Exception as loop_error:
                logger.warning(f"[TELEGRAM] Aviso ao finalizar loop: {loop_error}")
        
        logger.info("[TELEGRAM] ‚úÖ Sistema Telegram finalizado com seguran√ßa")
        
    except Exception as e:
        logger.error(f"[TELEGRAM] Erro na finaliza√ß√£o segura: {e}")
        # For√ßar reset das vari√°veis mesmo com erro
        telegram_activo = False
        telegram_executor = None
        telegram_loop = None

# ===== SISTEMA DE GERENCIAMENTO DE ESTADO =====
# Estados da m√°quina de estados
class BotState:
    ANALYZING = "ANALYZING"    # Estado padr√£o - busca por padr√µes
    MONITORING = "MONITORING"  # Estado ativo - monitora opera√ß√µes ap√≥s sinal

# Vari√°veis globais de estado
bot_current_state = BotState.ANALYZING
monitoring_operations_count = 0
last_operation_id_when_signal = None
last_checked_operation_id = None
monitoring_start_time = None
active_signal_data = None
active_tracking_id = None  # ID num√©rico do registro de rastreamento ativo
monitoring_results = []  # Lista para armazenar resultados das opera√ß√µes em tempo real

# ===== FUN√á√ïES DE GERENCIAMENTO DE ESTADO =====

def reset_bot_state(supabase=None):
    """Reseta Scalping Bot I.A para el estado ANALYZING CON NOTIFICACI√ìN TELEGRAM"""
    global bot_current_state, monitoring_operations_count
    global last_operation_id_when_signal, last_checked_operation_id, monitoring_start_time, active_signal_data, active_tracking_id, monitoring_results
    
    logger.info("[STATE] Reseteando Scalping Bot I.A para ANALYZING")
    
    # NUEVA INTEGRACI√ìN: ENVIAR FINALIZACI√ìN VIA TELEGRAM PERSONALIZADA
    if telegram_activo and active_signal_data and len(monitoring_results) > 0:
        try:
            # Verificar si fue √©xito completo (todas las operaciones WIN)
            exito_completo = all(resultado == 'V' for resultado in monitoring_results)
            
            enviar_finalizacion_scalping_ia(
                resultados=monitoring_results,
                exito=exito_completo
            )
            logger.info(f"[TELEGRAM] Finalizaci√≥n de Scalping Bot I.A enviada")
        except Exception as e:
            logger.error(f"[TELEGRAM] Error al enviar finalizaci√≥n de Scalping Bot I.A: {e}")
    
    # N√£o √© mais necess√°rio finalizar o rastreamento aqui, pois a fun√ß√£o atualizar_resultado_operacao_CORRIGIDO
    # j√° cuida da finaliza√ß√£o quando a opera√ß√£o 2 √© conclu√≠da
    if supabase and active_tracking_id and len(monitoring_results) >= PERSISTENCIA_OPERACOES:
        logger.info(f"[TRACKING] Rastreamento {active_tracking_id} j√° finalizado automaticamente com resultados: {monitoring_results}")
    
    bot_current_state = BotState.ANALYZING
    monitoring_operations_count = 0
    last_operation_id_when_signal = None
    last_checked_operation_id = None
    monitoring_start_time = None
    active_signal_data = None
    active_tracking_id = None
    monitoring_results = []

def activate_monitoring_state_CORRIGIDO(signal_data: dict, latest_operation_id: str, supabase):
    """Ativa o estado MONITORING com todas as corre√ß√µes aplicadas"""
    global bot_current_state, monitoring_operations_count
    global last_operation_id_when_signal, last_checked_operation_id, monitoring_start_time, active_signal_data, active_tracking_id, monitoring_results
    
    try:
        logger.info(f"[STATE] Ativando estado MONITORING - Sinal: {signal_data['strategy']}")
        
        # 1. ENVIAR SINAL CORRIGIDO (sem erro de array)
        signal_id = enviar_sinal_supabase_corrigido(supabase, signal_data)
        
        if not signal_id:
            logger.error(f"[TRACKING] Falha ao enviar sinal - abortando ativa√ß√£o")
            return False
        
        # 2. CRIAR REGISTRO DE RASTREAMENTO
        tracking_id = criar_registro_rastreamento_CORRIGIDO(
            supabase,
            signal_data['strategy'],
            signal_data['confidence'],
            signal_id,
            signal_data  # Passar dados completos da estrat√©gia
        )
        
        if tracking_id:
            # 3. ATIVAR ESTADO DE MONITORAMENTO
            bot_current_state = BotState.MONITORING
            monitoring_operations_count = 0
            last_operation_id_when_signal = latest_operation_id
            last_checked_operation_id = latest_operation_id
            monitoring_start_time = time.time()
            active_signal_data = signal_data.copy()
            active_signal_data['signal_id'] = signal_id
            active_tracking_id = tracking_id
            monitoring_results = []
            
            logger.info(f"[TRACKING] Sistema ativo - Signal ID: {signal_id}, Tracking ID: {tracking_id}")
            return True
        else:
            logger.error(f"[TRACKING] Falha ao criar rastreamento")
            return False
            
    except Exception as e:
        logger.error(f"[TRACKING_ERROR] Erro na ativa√ß√£o: {e}")
        return False

# Manter fun√ß√£o antiga para compatibilidade
def activate_monitoring_state(signal_data: dict, latest_operation_id: str, supabase):
    """Ativa o estado MONITORING com envio e linking corretos"""
    global bot_current_state, monitoring_operations_count
    global last_operation_id_when_signal, last_checked_operation_id, monitoring_start_time, active_signal_data, active_tracking_id, monitoring_results
    
    try:
        logger.info(f"[STATE] Ativando estado MONITORING - Sinal: {signal_data['strategy']}")
        
        # 1. ENVIAR SINAL PRIMEIRO
        signal_id = enviar_sinal_supabase_corrigido(supabase, signal_data)
        
        if not signal_id:
            logger.error(f"[TRACKING] Falha ao enviar sinal - abortando ativa√ß√£o do monitoramento")
            return False
        
        # 2. CRIAR REGISTRO DE RASTREAMENTO CORRIGIDO
        tracking_id = criar_registro_rastreamento_CORRIGIDO(
            supabase,
            signal_data['strategy'],
            signal_data['confidence'],
            signal_id,
            signal_data  # Passar dados completos da estrat√©gia
        )
        
        if tracking_id:
            # 3. ATIVAR ESTADO DE MONITORAMENTO
            bot_current_state = BotState.MONITORING
            monitoring_operations_count = 0
            last_operation_id_when_signal = latest_operation_id
            last_checked_operation_id = latest_operation_id
            monitoring_start_time = time.time()
            active_signal_data = signal_data.copy()
            active_signal_data['signal_id'] = signal_id
            active_tracking_id = tracking_id
            monitoring_results = []
            
            logger.info(f"[TRACKING] Sistema completo ativo - Signal ID: {signal_id}, Tracking ID: {tracking_id}")
            return True
        else:
            logger.error(f"[TRACKING] Falha ao criar rastreamento - mantendo estado ANALYZING")
            return False
            
    except Exception as e:
        logger.error(f"[TRACKING_ERROR] Erro na ativa√ß√£o completa: {e}")
        return False

def check_new_operations(supabase, current_operation_id: str) -> bool:
    """Verifica nuevas operaciones para Scalping Bot I.A CON NOTIFICACI√ìN TELEGRAM"""
    global monitoring_operations_count, last_operation_id_when_signal, last_checked_operation_id, monitoring_results

    if last_operation_id_when_signal is None:
        return False

    if last_checked_operation_id is None:
        last_checked_operation_id = last_operation_id_when_signal
        
    # Si el ID actual es diferente del √∫ltimo verificado, hubo nueva operaci√≥n
    if current_operation_id != last_checked_operation_id:
        monitoring_operations_count += 1
        last_checked_operation_id = current_operation_id
        
        # NUEVO: Capturar resultado autom√°ticamente com dados completos
        dados_operacao = obter_resultado_operacao_atual(supabase, current_operation_id)
        
        if dados_operacao:
            resultado_operacao = dados_operacao['result']  # 'V' ou 'D' para compatibilidade
            monitoring_results.append(resultado_operacao)
            logger.info(f"[STATE] Nueva operaci√≥n Scalping Bot I.A: {current_operation_id} - Resultado: {resultado_operacao} (profit: {dados_operacao['profit']}) - Total: {monitoring_operations_count}/{PERSISTENCIA_OPERACOES}")
            
            # ATUALIZAR RESULTADO DA OPERA√á√ÉO NO SISTEMA DE RASTREAMENTO
            if active_tracking_id:
                # Converter resultado para formato esperado (V -> WIN, D -> LOSS)
                resultado_formatado = "WIN" if resultado_operacao == "V" else "LOSS"
                # Atualizar registro com dados completos da opera√ß√£o atual
                atualizar_resultado_operacao_CORRIGIDO(
                    supabase,
                    active_tracking_id,
                    monitoring_operations_count,  # N√∫mero da opera√ß√£o (1 ou 2)
                    resultado_formatado,
                    dados_operacao['profit'],  # Profit real da opera√ß√£o
                    dados_operacao['timestamp']  # Timestamp da opera√ß√£o
                )
                logger.info(f"[TRACKING] Opera√ß√£o {monitoring_operations_count} atualizada: {resultado_formatado} (profit: {dados_operacao['profit']})")
            
            # NUEVA INTEGRACI√ìN: ENVIAR RESULTADO VIA TELEGRAM PERSONALIZADO
            if telegram_activo:
                try:
                    enviar_resultado_scalping_ia(
                        operacion_num=monitoring_operations_count,
                        resultado=resultado_operacao,
                        total_operaciones=PERSISTENCIA_OPERACOES
                    )
                    logger.info(f"[TELEGRAM] Resultado de Scalping Bot I.A enviado: {resultado_operacao}")
                except Exception as e:
                    logger.error(f"[TELEGRAM] Error al enviar resultado de Scalping Bot I.A: {e}")
        else:
            logger.warning(f"[STATE] Nueva operaci√≥n Scalping Bot I.A: {current_operation_id} - Resultado no capturado - Total: {monitoring_operations_count}/{PERSISTENCIA_OPERACOES}")
        
        return True

    return False

def should_reset_to_analyzing() -> bool:
    """Verifica se deve resetar para estado ANALYZING
    
    Returns:
        bool: True se deve resetar
    """
    global monitoring_operations_count, monitoring_start_time
    
    # Verificar se atingiu o limite de opera√ß√µes
    if monitoring_operations_count >= PERSISTENCIA_OPERACOES:
        logger.info(f"[STATE] Limite de opera√ß√µes atingido: {monitoring_operations_count}/{PERSISTENCIA_OPERACOES}")
        return True
    
    # Verificar timeout
    if monitoring_start_time and (time.time() - monitoring_start_time) > PERSISTENCIA_TIMEOUT:
        logger.info(f"[STATE] Timeout atingido: {PERSISTENCIA_TIMEOUT}s")
        return True
    
    return False





def get_state_info() -> dict:
    """Retorna informa√ß√µes do estado atual"""
    return {
        'current_state': bot_current_state,
        'operations_count': monitoring_operations_count,
        'operations_limit': PERSISTENCIA_OPERACOES,
        'last_operation_id': last_operation_id_when_signal,
        'monitoring_start_time': monitoring_start_time,
        'active_signal': active_signal_data
    }

# Mensagens padronizadas do sistema em espanhol
MENSAJES_SISTEMA = {
    'aguardando_dados': "Esperando datos suficientes...",
    'aguardando_padrao': "Esperando el patr√≥n. No activar a√∫n.",
    'estrategia_ativa': "Estrategia {strategy} activa - esperando {ops} operaciones",
    'patron_encontrado': "Patron Encontrado, Activar Bot Ahora! - {strategy} ({confidence}%)",
    'mercado_instavel': "Mercado inestable, esperar unos minutos",
    'dados_insuficientes': "{strategy}: Datos insuficientes",
    'gatilho_nao_atendido': "{strategy}: Gatillo no cumplido ({wins} WINs)",
    'muitos_losses': "{strategy}: Muchos LOSSes recientes ({losses}/{total})",
    'loss_nao_isolado': "{strategy}: LOSS no est√° en patr√≥n WIN-LOSS-WIN",
    'losses_consecutivos': "{strategy}: LOSSes consecutivos detectados",
    'losses_consecutivos_proibido': "{strategy}: LOSSes consecutivos detectados (PROHIBIDO)",
    'erro_execucao': "{strategy}: Error en la ejecuci√≥n",
    'seguro_operar': "Seguro para operar",
    'teste_sistema': "TESTE - Sistema funcionando correctamente",
    'conexao_falhou': "Error de conexi√≥n con Supabase",
    'operacao_completada': "Operaci√≥n completada con √©xito"
}

# ===== SISTEMA DE M√âTRICAS E VALIDA√á√ÉO =====
@dataclass
class StrategyMetrics:
    """M√©tricas detalhadas por estrat√©gia"""
    name: str
    total_executions: int = 0
    successful_triggers: int = 0
    failed_triggers: int = 0
    filter_rejections: Dict[str, int] = field(default_factory=lambda: defaultdict(int))
    execution_times: List[float] = field(default_factory=list)
    error_count: int = 0
    last_execution_time: Optional[float] = None
    confidence_level: float = 0.0
    frequency_operations: int = 0
    
    def add_execution_time(self, exec_time: float):
        self.execution_times.append(exec_time)
        self.last_execution_time = exec_time
        self.total_executions += 1

    def add_filter_rejection(self, filter_name: str):
        self.filter_rejections[filter_name] += 1
        self.failed_triggers += 1

    def add_success(self):
        self.successful_triggers += 1

    def add_error(self):
        self.error_count += 1

    def get_average_time(self) -> float:
        return sum(self.execution_times) / len(self.execution_times) if self.execution_times else 0.0

    def get_success_rate(self) -> float:
        total = self.successful_triggers + self.failed_triggers
        return (self.successful_triggers / total * 100) if total > 0 else 0.0

# Inst√¢ncias globais para m√©tricas
# REMOVIDO: strategy_metrics - Sistema simplificado usa apenas PRECISION_SURGE

# REMOVIDO: pattern_locked_state - Sistema simplificado n√£o usa trava de padr√£o

# Lock para thread safety - COMENTADO
# _pattern_lock = threading.Lock()  # REMOVIDO - threading √≥rf√£o n√£o utilizado

def activate_pattern_lock(strategy_name: str, confidence: float, signal_data: dict, tracking_id: str):
    """Vers√£o simplificada sem threading complexo - SOLU√á√ÉO FINAL"""
    global pattern_locked_state
    
    try:
        logger.info(f"[PATTERN_LOCK] === INICIANDO ATIVA√á√ÉO DA TRAVA ===")
        logger.info(f"[PATTERN_LOCK] Estrat√©gia: {strategy_name}")
        logger.info(f"[PATTERN_LOCK] Confian√ßa: {confidence}%")
        logger.info(f"[PATTERN_LOCK] Tracking ID: {tracking_id}")
        
        # Verifica√ß√£o simples sem threading lock
        if pattern_locked_state.get('is_locked', False):
            logger.warning(f"[PATTERN_LOCK] Estrat√©gia {pattern_locked_state['strategy_name']} j√° ativa")
            return False
        
        logger.info(f"[PATTERN_LOCK] Atualizando estado global...")
        
        # Atualiza√ß√£o direta sem lock complexo
        pattern_locked_state = {
            'is_locked': True,
            'strategy_name': strategy_name,
            'confidence': confidence,
            'detected_at': time.time(),
            'operations_count': 0,
            'tracking_id': tracking_id,
            'signal_data': {
                'should_operate': signal_data.get('should_operate', True),
                'reason': signal_data.get('reason', ''),
                'melhor_estrategia': signal_data.get('melhor_estrategia', {})
            }
        }
        
        logger.info(f"[PATTERN_LOCK] ‚úÖ TRAVA ATIVADA COM SUCESSO")
        logger.info(f"[PATTERN_ACTIVATED] {strategy_name} ativada com {confidence}% confian√ßa")
        return True
        
    except Exception as e:
        logger.error(f"[PATTERN_LOCK] ERRO CR√çTICO: {e}")
        logger.error(f"[PATTERN_LOCK] Traceback: {traceback.format_exc()}")
        
        # Reset em caso de erro
        pattern_locked_state = {
            'is_locked': False,
            'strategy_name': None,
            'confidence': 0.0,
            'detected_at': None,
            'operations_count': 0,
            'tracking_id': None,
            'signal_data': {}
        }
        
        logger.info(f"[PATTERN_LOCK] Estado resetado ap√≥s erro")
        return False

def reset_pattern_lock_force():
    """Reset for√ßado da trava (thread-safe)"""
    global pattern_locked_state
    
    old_strategy = pattern_locked_state.get('strategy_name')
    pattern_locked_state.update({
        'is_locked': False,
        'strategy_name': None,
        'confidence': 0.0,
        'detected_at': None,
        'operations_count': 0,
        'tracking_id': None,
        'signal_data': {}
    })
    
    if old_strategy:
        logger.info(f"[PATTERN_RESET] {old_strategy} resetada")

def check_pattern_lock_status():
    """Verifica status atual da trava"""
    return pattern_locked_state.copy()

# REMOVIDO: active_strategy, strategy_start_time, operations_since_strategy - Sistema simplificado

def is_strategy_active():
    """Verifica se h√° estrat√©gia ativa"""
    global active_strategy
    return active_strategy is not None

def activate_strategy(strategy_data):
    """Ativa nova estrat√©gia"""
    global active_strategy, strategy_start_time, operations_since_strategy
    active_strategy = strategy_data
    strategy_start_time = time.time()
    operations_since_strategy = 0
    logger.info(f"[STRATEGY_ACTIVATED] {strategy_data['strategy']} ativada")

def reset_strategy():
    """Reset da estrat√©gia ativa"""
    global active_strategy, strategy_start_time, operations_since_strategy
    if active_strategy:
        logger.info(f"[STRATEGY_RESET] {active_strategy['strategy']} resetada ap√≥s {operations_since_strategy} opera√ß√µes")
    active_strategy = None
    strategy_start_time = None
    operations_since_strategy = 0

def increment_operations():
    """Incrementa contador de opera√ß√µes"""
    global operations_since_strategy
    if active_strategy:
        operations_since_strategy += 1
        logger.info(f"[OPERATION_COUNT] {operations_since_strategy}/2 opera√ß√µes completadas")
        return operations_since_strategy
    return 0

def count_operations_since_pattern_CORRETO(supabase_client, timestamp_referencia: float) -> int:
    """Conta opera√ß√µes reais no Supabase desde timestamp de refer√™ncia"""
    try:
        # Converter timestamp para formato ISO
        ref_datetime = datetime.fromtimestamp(timestamp_referencia).isoformat()
        
        # Buscar opera√ß√µes mais recentes que o timestamp
        response = supabase_client.table('scalping_accumulator_bot_logs') \
            .select('created_at') \
            .eq('bot_name', BOT_NAME) \
            .gt('created_at', ref_datetime) \
            .order('created_at', desc=True) \
            .execute()
        
        count = len(response.data) if response.data else 0
        
        logger.debug(f"[OPERATION_COUNT] {count} opera√ß√µes desde {ref_datetime}")
        
        # Log das opera√ß√µes encontradas para debug
        if response.data and count > 0:
            logger.debug(f"[OPERATION_COUNT] Opera√ß√µes mais recentes:")
            for i, op in enumerate(response.data[:3]):  # Mostrar apenas as 3 mais recentes
                logger.debug(f"[OPERATION_COUNT]   {i+1}. {op['created_at']}")
        
        return count
        
    except Exception as e:
        logger.error(f"[OPERATION_COUNT] Erro ao contar opera√ß√µes: {e}")
        return 0

def monitor_and_update_pattern_operations_CORRETO(supabase_client):
    """Monitora opera√ß√µes e reseta trava quando necess√°rio"""
    global pattern_locked_state, _pattern_lock
    
    if not pattern_locked_state['is_locked']:
        return

    try:
        current_time = time.time()
        
        # Verificar timeout de seguran√ßa (10 minutos)
        if current_time - pattern_locked_state['detected_at'] > 600:
            logger.warning(f"[TIMEOUT_RESET] Timeout de 10 minutos - resetando trava")
            reset_pattern_lock_force()
            return
        
        # Contar opera√ß√µes desde ativa√ß√£o da estrat√©gia
        operacoes_novas = count_operations_since_pattern_CORRETO(
            supabase_client,
            pattern_locked_state['detected_at']
        )
        
        # Atualizar contador
        pattern_locked_state['operations_count'] = operacoes_novas
        
        logger.info(f"[PATTERN_MONITOR] {operacoes_novas}/2 opera√ß√µes registradas")
        
        # Reset quando atingir 2 opera√ß√µes REAIS
        if operacoes_novas >= 2:
            logger.info(f"[RESET_TRIGGERED] 2 opera√ß√µes reais detectadas - resetando estrat√©gia")
            reset_pattern_lock_force()
            return
                
    except Exception as e:
        logger.error(f"[MONITOR_ERROR] Erro no monitoramento: {e}")

def inicializar_supabase():
    """Inicializa conex√£o com Supabase"""
    try:
        supabase_url = os.getenv('SUPABASE_URL')
        supabase_key = os.getenv('SUPABASE_KEY')
        
        if not supabase_url or not supabase_key:
            raise ValueError("Credenciais do Supabase n√£o encontradas no arquivo .env")
        
        supabase: Client = create_client(supabase_url, supabase_key)
        print("OK Conex√£o com Supabase estabelecida com sucesso")
        return supabase
        
    except Exception as e:
        print(f"FAIL Erro ao conectar com Supabase: {e}")
        return None

def testar_tabelas_supabase(supabase):
    """Testa acesso √†s tabelas corretas"""
    tabelas = {
        'scalping_accumulator_bot_logs': 'Logs de opera√ß√µes',
        'strategy_results_tracking': 'Rastreamento de estrat√©gias',
        'radar_de_apalancamiento_signals': 'Sinais do radar'
    }
    
    print("üîç Verificando tabelas...")
    
    for tabela, descricao in tabelas.items():
        try:
            response = supabase.table(tabela).select('id').limit(1).execute()
            print(f"‚úÖ {descricao}: OK")
        except Exception as e:
            print(f"‚ùå {descricao}: ERRO - {e}")
            return False
    
    print("‚úÖ Todas as tabelas acess√≠veis!")
    return True

def inicializar_telegram_CORRIGIDO():
    """Inicializa√ß√£o robusta do Telegram com gerenciamento adequado do loop de eventos (ATUALIZADA)"""
    # Usar a nova fun√ß√£o segura
    return inicializar_telegram_seguro()

# Manter a fun√ß√£o antiga para compatibilidade
def inicializar_telegram_bot():
    """Inicializa el bot de Telegram para Scalping Bot I.A (DEPRECATED)"""
    return inicializar_telegram_CORRIGIDO()

def enviar_alerta_padrao_encontrado_CORRIGIDO(strategy_data: dict) -> bool:
    """Envia alerta IMEDIATAMENTE quando padr√£o √© encontrado (ATUALIZADA PARA POOL SEGURO)"""
    # Usar a nova fun√ß√£o segura
    return enviar_alerta_padrao_SEGURO(strategy_data)

# Manter a fun√ß√£o antiga para compatibilidade
def enviar_alerta_scalping_ia(strategy_data: dict) -> bool:
    """Env√≠a alerta personalizada para Scalping Bot I.A (DEPRECATED)"""
    return enviar_alerta_padrao_encontrado_CORRIGIDO(strategy_data)

def enviar_resultado_scalping_ia(operacion_num: int, resultado: str, total_operaciones: int) -> bool:
    """Env√≠a resultado de operaci√≥n personalizado para Scalping Bot I.A usando sistema seguro"""
    return enviar_resultado_seguro(operacion_num, resultado, total_operaciones)

def enviar_finalizacion_scalping_ia(resultados: list, exito: bool) -> bool:
    """Env√≠a resumen final personalizado para Scalping Bot I.A usando sistema seguro"""
    return enviar_finalizacao_segura(resultados, exito)

# ===== FUN√á√ïES DE CONTROLE SIMPLIFICADO =====
def check_strategy_timeout():
    """Verifica timeout da estrat√©gia (5 minutos)"""
    global active_strategy, strategy_start_time
    if active_strategy and strategy_start_time:
        elapsed = time.time() - strategy_start_time
        if elapsed > 300:  # 5 minutos
            logger.warning(f"[TIMEOUT] Estrat√©gia {active_strategy['strategy']} expirou ap√≥s {elapsed:.1f}s")
            reset_strategy()
            return True
    return False

def should_activate_strategy(new_strategy_data):
    """Verifica se deve ativar nova estrat√©gia"""
    check_strategy_timeout()
    
    if not active_strategy:
        activate_strategy(new_strategy_data)
        return True

    logger.debug(f"[STRATEGY_BLOCKED] {active_strategy['strategy']} ainda ativa - ignorando {new_strategy_data['strategy']}")
    return False

def check_operation_completion():
    """Verifica se completou 2 opera√ß√µes"""
    if active_strategy and operations_since_strategy >= 2:
        logger.info(f"[STRATEGY_COMPLETED] {active_strategy['strategy']} completou 2 opera√ß√µes")
        reset_strategy()
        return True
    return False

# C√≥digo removido - sistema simplificado n√£o necessita contagem complexa
# Fun√ß√£o removida - sistema simplificado n√£o necessita monitoramento complexo

# ===== SISTEMA SIMPLIFICADO DE CONTROLE =====
# Usando apenas vari√°veis globais simples para controle de estrat√©gias

def validar_integridade_historico(historico: List[str]) -> bool:
    """Valida integridade dos dados de hist√≥rico"""
    try:
        if not historico:
            logger.error("[DATA_INTEGRITY] Hist√≥rico vazio")
            return False
            
        # Verificar se cont√©m apenas valores v√°lidos
        valid_values = {'V', 'D'}
        invalid_values = [val for val in historico if val not in valid_values]
        if invalid_values:
            logger.error(f"[DATA_INTEGRITY] Valores inv√°lidos encontrados: {set(invalid_values)}")
            return False
            
        # Verificar se h√° dados suficientes para an√°lise
        if len(historico) < OPERACOES_MINIMAS:
            logger.warning(f"[DATA_INTEGRITY] Hist√≥rico insuficiente: {len(historico)} < {OPERACOES_MINIMAS}")
            return False
            
        # Verificar distribui√ß√£o b√°sica
        win_rate = (historico.count('V') / len(historico)) * 100
        if win_rate == 0 or win_rate == 100:
            logger.warning(f"[DATA_INTEGRITY] Distribui√ß√£o suspeita: {win_rate}% WINs")
            return False
            
        logger.debug(f"[DATA_INTEGRITY] Valida√ß√£o bem-sucedida: {len(historico)} opera√ß√µes, WR: {win_rate:.1f}%")
        return True
        
    except Exception as e:
        logger.error(f"[DATA_INTEGRITY_EXCEPTION] Erro na valida√ß√£o: {e}")
        return False

def buscar_operacoes_historico(supabase):
    """Busca hist√≥rico de opera√ß√µes do Supabase
    
    Returns:
        tuple: (historico, timestamps, latest_operation_id)
    """
    try:
        response = supabase.table('scalping_accumulator_bot_logs') \
            .select('id, profit_percentage, created_at') \
            .order('created_at', desc=True) \
            .limit(OPERACOES_HISTORICO) \
            .execute()
        
        if not response.data:
            logger.warning("[HISTORICO] Nenhuma opera√ß√£o encontrada")
            return [], [], None
        
        # Extrair resultados, timestamps e ID da opera√ß√£o mais recente
        historico = []
        timestamps = []
        latest_operation_id = response.data[0]['id']  # Primeira opera√ß√£o (mais recente)
        
        for op in response.data:
            profit_percentage = op.get('profit_percentage', 0)
            resultado = 'V' if profit_percentage > 0 else 'D'
            historico.append(resultado)
            timestamps.append(op['created_at'])
        
        logger.info(f"[HISTORICO] {len(historico)} opera√ß√µes carregadas")
        logger.debug(f"[HISTORICO] Sequ√™ncia: {' '.join(historico[:10])}...")
        logger.debug(f"[HISTORICO] ID opera√ß√£o mais recente: {latest_operation_id}")
        
        return historico, timestamps, latest_operation_id
        
    except Exception as e:
        logger.error(f"[HISTORICO_ERROR] Erro ao buscar opera√ß√µes: {e}")
        return [], [], None

def obter_resultado_operacao_atual(supabase, operation_id: str) -> dict:
    """Obt√©m dados completos da opera√ß√£o atual
    
    Returns:
        dict: {'result': 'V'|'D', 'profit': float, 'timestamp': str} ou None
    """
    try:
        response = supabase.table('scalping_accumulator_bot_logs') \
            .select('profit_percentage, created_at') \
            .eq('id', operation_id) \
            .single() \
            .execute()
        
        if response.data:
            profit_percentage = response.data.get('profit_percentage', 0)
            created_at = response.data.get('created_at', '')
            resultado = 'V' if profit_percentage > 0 else 'D'
            
            operation_data = {
                'result': resultado,
                'profit': profit_percentage,
                'timestamp': created_at
            }
            
            logger.debug(f"[RESULTADO] Opera√ß√£o {operation_id}: {resultado} (profit: {profit_percentage}, timestamp: {created_at})")
            return operation_data
        else:
            logger.warning(f"[RESULTADO] Opera√ß√£o {operation_id} n√£o encontrada")
            return None
            
    except Exception as e:
        logger.error(f"[RESULTADO_ERROR] Erro ao obter resultado da opera√ß√£o {operation_id}: {e}")
        return None

def criar_registro_rastreamento_CORRIGIDO(supabase, strategy_name: str, confidence: float, signal_id: int, strategy_data: dict = None) -> int: 
    """Cria registro CORRETO na strategy_results_tracking com dados detalhados da estrat√©gia"""
    try: 
        # Dados corretos conforme estrutura da tabela 
        data = { 
            'signal_id': signal_id, 
            'bot_name': 'Scalping Bot', 
            'strategy_name': strategy_name, 
            'strategy_confidence': confidence, 
            'pattern_detected_at': datetime.now().isoformat(), 
            'trigger_conditions': { 
                'strategy': strategy_name, 
                'confidence': confidence, 
                'timestamp': datetime.now().isoformat() 
            }, 
            'historical_context': { 
                'required_wins': '4-5', 
                'max_losses_15': 2, 
                'no_consecutive_losses': True 
            }, 
            'operations_completed': 0, 
            'status': 'ACTIVE', 
            'validation_complete': False 
        }
        
        # Popular trigger_conditions com dados detalhados da estrat√©gia se dispon√≠veis
        if strategy_data and isinstance(strategy_data, dict):
            # Adicionar dados espec√≠ficos da an√°lise da estrat√©gia
            data['trigger_conditions'].update({
                'wins_consecutivos': strategy_data.get('wins_consecutivos', 0),
                'losses_nas_ultimas_15': strategy_data.get('losses_ultimas_15', 0),
                'strategy_reason': strategy_data.get('reason', ''),
                'filters_passed': strategy_data.get('filters_passed', []),
                'analysis_timestamp': datetime.now().isoformat()
            }) 
        
        response = supabase.table('strategy_results_tracking').insert(data).execute() 
        
        if response.data and len(response.data) > 0: 
            tracking_id = response.data[0]['id'] 
            logger.info(f"[TRACKING] Registro criado: ID {tracking_id}") 
            return tracking_id 
        return None 
        
    except Exception as e: 
        logger.error(f"[TRACKING] Erro ao criar registro: {e}") 
        return None

def criar_registro_de_rastreamento(supabase, strategy_name: str, confidence_level: float) -> int:
    """Cria registro na tabela strategy_results_tracking e retorna o ID serial"""
    try:
        data = {
            'strategy_name': strategy_name,
            'strategy_confidence': confidence_level,  # CORRETO: strategy_confidence
            'bot_name': BOT_NAME,
            'status': 'ACTIVE'  # CORRETO: status (n√£o tracking_status)
        }
        
        response = supabase.table('strategy_results_tracking').insert(data).execute()
        
        if response.data and len(response.data) > 0:
            record_id = response.data[0]['id']
            logger.info(f"[TRACKING] Registro criado com ID: {record_id} para {strategy_name}")
            return record_id
        else:
            logger.error(f"[TRACKING] Falha ao criar registro para {strategy_name}")
            return None
            
    except Exception as e:
        logger.error(f"[TRACKING_ERROR] Erro ao criar tracking: {e}")
        return None

def criar_registro_de_rastreamento_linkado(supabase, strategy_name: str, confidence_level: float, signal_id: int) -> int:
    """Cria registro na tabela strategy_results_tracking linkado com signal_id e evita campos duplicados"""
    try:
        data = {
            'signal_id': signal_id,  # NOVO: Link com a tabela de sinais
            'strategy_name': strategy_name,
            'strategy_confidence': confidence_level,  # CORRETO: usar strategy_confidence
            'bot_name': BOT_NAME,
            'status': 'ACTIVE',  # Usar este em vez de tracking_status
            'pattern_detected_at': datetime.now().isoformat(),
            'operations_completed': 0,
            'validation_complete': False
        }
        
        response = supabase.table('strategy_results_tracking').insert(data).execute()
        
        if response.data and len(response.data) > 0:
            record_id = response.data[0]['id']
            logger.info(f"[TRACKING] Registro criado com ID: {record_id} linkado ao signal_id: {signal_id}")
            return record_id
        else:
            logger.error(f"[TRACKING] Falha ao criar registro linkado para {strategy_name}")
            return None
            
    except Exception as e:
        logger.error(f"[TRACKING_ERROR] Erro ao criar tracking linkado: {e}")
        return None

def atualizar_resultado_operacao_CORRIGIDO(supabase, tracking_id: int, operacao_num: int, resultado: str, profit: float = 0.0, timestamp: str = None) -> bool: 
    """Atualiza resultado de opera√ß√£o espec√≠fica com dados completos""" 
    try: 
        # Usar timestamp da opera√ß√£o real ou timestamp atual como fallback
        operation_timestamp = timestamp if timestamp else datetime.now().isoformat() 
        timestamp_now = datetime.now().isoformat() 
        
        if operacao_num == 1: 
            update_data = { 
                'operation_1_result': resultado, 
                'operation_1_profit': profit, 
                'operation_1_timestamp': operation_timestamp, 
                'operations_completed': 1 
            } 
        elif operacao_num == 2: 
            update_data = { 
                'operation_2_result': resultado, 
                'operation_2_profit': profit, 
                'operation_2_timestamp': operation_timestamp, 
                'operations_completed': 2, 
                'validation_complete': True, 
                'status': 'COMPLETED', 
                'completed_at': timestamp_now 
            } 
            
            # Calcular sucesso do padr√£o (ambas opera√ß√µes devem ser WIN) 
            # Buscar resultado da opera√ß√£o 1 
            current_record = supabase.table('strategy_results_tracking').select('operation_1_result').eq('id', tracking_id).single().execute() 
            if current_record.data: 
                op1_result = current_record.data['operation_1_result'] 
                pattern_success = (op1_result == 'WIN' and resultado == 'WIN') 
                update_data['pattern_success'] = pattern_success 
                
                # Calcular lucro total 
                op1_profit = current_record.data.get('operation_1_profit', 0.0) 
                update_data['total_profit'] = op1_profit + profit 
        else: 
            return False 
        
        response = supabase.table('strategy_results_tracking').update(update_data).eq('id', tracking_id).execute() 
        
        if response.data: 
            logger.info(f"[TRACKING] Opera√ß√£o {operacao_num} atualizada: {resultado}") 
            return True 
        return False 
        
    except Exception as e: 
        logger.error(f"[TRACKING] Erro ao atualizar opera√ß√£o {operacao_num}: {e}") 
        return False

def finalizar_registro_de_rastreamento(supabase, record_id: int, resultados: List[str]) -> bool:
    """Finaliza registro de rastreamento com os resultados das opera√ß√µes"""
    try:
        # Mapear resultados para as colunas corretas
        operation_1_result = resultados[0] if len(resultados) > 0 else None
        operation_2_result = resultados[1] if len(resultados) > 1 else None
        
        # Determinar sucesso do padr√£o (True somente se ambos forem 'V')
        pattern_success = (resultados == ['V', 'V']) if len(resultados) == 2 else False
        
        # Dados para atualiza√ß√£o - USAR NOMES CORRETOS DAS COLUNAS
        update_data = {
            'operation_1_result': operation_1_result,
            'operation_2_result': operation_2_result,
            'pattern_success': pattern_success,  # Esta coluna existe na tabela
            'status': 'COMPLETED',
            'completed_at': datetime.now().isoformat(),
            'operations_completed': len(resultados)
        }
        
        response = supabase.table('strategy_results_tracking').update(update_data).eq('id', record_id).execute()
        
        if response.data:
            logger.info(f"[TRACKING] Registro {record_id} finalizado: {resultados} -> Sucesso: {pattern_success}")
            return True
        else:
            logger.error(f"[TRACKING] Falha ao finalizar registro {record_id}")
            return False
            
    except Exception as e:
        logger.error(f"[TRACKING_ERROR] Erro ao finalizar tracking {record_id}: {e}")
        return False

def consultar_eficacia_estrategia(supabase, strategy_name: str) -> Dict:
    """Consulta efic√°cia em tempo real de uma estrat√©gia"""
    try:
        response = supabase.table('strategy_results_tracking') \
            .select('*') \
            .eq('strategy_name', strategy_name) \
            .eq('bot_name', BOT_NAME) \
            .order('pattern_found_at', desc=True) \
            .limit(50) \
            .execute()
        
        if not response.data:
            return {'total_signals': 0, 'success_rate': 0, 'avg_confidence': 0}
        
        records = response.data
        total_signals = len(records)
        successful_signals = len([r for r in records if r.get('final_result') == 'SUCCESS'])
        completed_signals = len([r for r in records if r.get('final_result') is not None])
        
        success_rate = (successful_signals / completed_signals * 100) if completed_signals > 0 else 0
        avg_confidence = sum([r['strategy_confidence'] for r in records]) / total_signals
        
        return {
            'total_signals': total_signals,
            'successful_signals': successful_signals,
            'completed_signals': completed_signals,
            'success_rate': success_rate,
            'avg_confidence': avg_confidence,
            'recent_records': records[:10]
        }
        
    except Exception as e:
        logger.error(f"[EFICACIA_ERROR] Erro ao consultar efic√°cia de {strategy_name}: {e}")
        return {'total_signals': 0, 'success_rate': 0, 'avg_confidence': 0}

def gerar_relatorio_eficacia(supabase) -> Dict:
    """Gera relat√≥rio consolidado de efic√°cia das estrat√©gias"""
    try:
        relatorio = {
            'timestamp': datetime.now().isoformat(),
            'estrategias': {},
            'consolidado': {
                'total_signals': 0,
                'success_rate_medio': 0,
                'melhor_estrategia': None,
                'assertividade_sistema': 94.51
            }
        }
        
        total_success_rate = 0
        total_signals = 0
        melhor_performance = 0
        melhor_estrategia = None
        
        for strategy_name in ['MICRO_BURST', 'PRECISION_SURGE', 'QUANTUM_MATRIX']:
            eficacia = consultar_eficacia_estrategia(supabase, strategy_name)
            relatorio['estrategias'][strategy_name] = eficacia
            
            total_signals += eficacia['total_signals']
            if eficacia['success_rate'] > melhor_performance:
                melhor_performance = eficacia['success_rate']
                melhor_estrategia = strategy_name
            
            total_success_rate += eficacia['success_rate']
        
        relatorio['consolidado']['total_signals'] = total_signals
        relatorio['consolidado']['success_rate_medio'] = total_success_rate / 3
        relatorio['consolidado']['melhor_estrategia'] = melhor_estrategia
        
        logger.info(f"[RELATORIO] Gerado: {total_signals} sinais, {relatorio['consolidado']['success_rate_medio']:.1f}% m√©dia")
        return relatorio
        
    except Exception as e:
        logger.error(f"[RELATORIO_ERROR] Erro ao gerar relat√≥rio: {e}")
        return {}

# ===== IMPLEMENTA√á√ÉO DAS 3 ESTRAT√âGIAS =====

# FUN√á√ÉO REMOVIDA: analisar_micro_burst() - Simplifica√ß√£o do sistema

def analisar_precision_surge_CORRIGIDO(historico: List[str]) -> Dict: 
    """PRECISION SURGE CORRIGIDO conforme especifica√ß√£o""" 
    try: 
        strategy_name = "PRECISION_SURGE" 
        logger.info(f"[{strategy_name}] === INICIANDO AN√ÅLISE ===\n[{strategy_name}] Hist√≥rico: {' '.join(historico[-15:]) if len(historico) >= 15 else ' '.join(historico)}")
        
        if len(historico) < 15: 
            reason = f'Dados insuficientes: {len(historico)}/15 opera√ß√µes necess√°rias'
            logger.warning(f"[{strategy_name}] ‚ùå REJEITADO: {reason}")
            return { 
                'should_operate': False, 
                'strategy': strategy_name, 
                'confidence': 0, 
                'reason': reason 
            } 
        
        # CORRE√á√ÉO: Pegar as opera√ß√µes mais recentes (do final da lista) 
        ultimas_15 = historico[-15:]  # CORRIGIDO: √∫ltimas 15 opera√ß√µes 
        ultimas_10 = historico[-10:]  # CORRIGIDO: √∫ltimas 10 opera√ß√µes 
        
        logger.info(f"[{strategy_name}] √öltimas 15: {' '.join(ultimas_15)}")
        logger.info(f"[{strategy_name}] √öltimas 10: {' '.join(ultimas_10)}")
        
        # GATILHO CORRETO: Exatamente 4-5 WINs consecutivos 
        wins_consecutivos = 0 
        for resultado in ultimas_15: 
            if resultado == 'V': 
                wins_consecutivos += 1 
            else: 
                break 
        
        logger.info(f"[{strategy_name}] WINs consecutivos detectados: {wins_consecutivos}")
        
        # CORRE√á√ÉO: Aceitar apenas 4-5 WINs (n√£o 2-25) 
        if not (4 <= wins_consecutivos <= 5): 
            reason = f'Gatilho n√£o atendido: {wins_consecutivos} WINs consecutivos (requer 4-5)'
            logger.warning(f"[{strategy_name}] ‚ùå REJEITADO: {reason}")
            return { 
                'should_operate': False, 
                'strategy': strategy_name, 
                'confidence': 0, 
                'reason': reason 
            } 
        
        logger.info(f"[{strategy_name}] ‚úÖ GATILHO APROVADO: {wins_consecutivos} WINs consecutivos")
        
        # FILTRO 1: M√°ximo 2 LOSSes nas √∫ltimas 15 opera√ß√µes 
        losses_ultimas_15 = ultimas_15.count('D') 
        logger.info(f"[{strategy_name}] FILTRO 1: {losses_ultimas_15} LOSSes nas √∫ltimas 15 opera√ß√µes (m√°ximo: 2)")
        
        if losses_ultimas_15 > 2: 
            reason = f'Muitos LOSSes: {losses_ultimas_15}/15 (m√°ximo 2)'
            logger.warning(f"[{strategy_name}] ‚ùå REJEITADO: {reason}")
            return { 
                'should_operate': False, 
                'strategy': strategy_name, 
                'confidence': 0, 
                'reason': reason 
            } 
        
        logger.info(f"[{strategy_name}] ‚úÖ FILTRO 1 APROVADO: {losses_ultimas_15} LOSSes ‚â§ 2")
        
        # FILTRO 2: Sem LOSSes consecutivos nas √∫ltimas 10 opera√ß√µes 
        losses_consecutivos_encontrados = False
        posicao_consecutivos = -1
        for i in range(len(ultimas_10) - 1): 
            if ultimas_10[i] == 'D' and ultimas_10[i+1] == 'D': 
                losses_consecutivos_encontrados = True
                posicao_consecutivos = i
                break
        
        logger.info(f"[{strategy_name}] FILTRO 2: Verificando LOSSes consecutivos nas √∫ltimas 10")
        
        if losses_consecutivos_encontrados:
            reason = f'LOSSes consecutivos detectados nas posi√ß√µes {posicao_consecutivos}-{posicao_consecutivos+1}'
            logger.warning(f"[{strategy_name}] ‚ùå REJEITADO: {reason}")
            return { 
                'should_operate': False, 
                'strategy': strategy_name, 
                'confidence': 0, 
                'reason': reason 
            } 
        
        logger.info(f"[{strategy_name}] ‚úÖ FILTRO 2 APROVADO: Sem LOSSes consecutivos")
        
        # PADR√ÉO ENCONTRADO - Calcular confian√ßa 
        confidence = 93.5 
        if wins_consecutivos == 5: 
            confidence += 1.5  # B√¥nus para 5 WINs 
            logger.info(f"[{strategy_name}] B√¥nus +1.5% por 5 WINs consecutivos")
        if losses_ultimas_15 == 0: 
            confidence += 2.0  # B√¥nus para zero LOSSes 
            logger.info(f"[{strategy_name}] B√¥nus +2.0% por zero LOSSes")
        elif losses_ultimas_15 == 1: 
            confidence += 1.0  # B√¥nus para apenas 1 LOSS 
            logger.info(f"[{strategy_name}] B√¥nus +1.0% por apenas 1 LOSS") 
        
        logger.info(f"[{strategy_name}] üéØ PADR√ÉO CONFIRMADO: {wins_consecutivos} WINs, {losses_ultimas_15} LOSSes, Confian√ßa: {confidence:.1f}%")
        
        return { 
            'should_operate': True, 
            'strategy': strategy_name, 
            'confidence': confidence, 
            'reason': f'Padr√£o PRECISION SURGE confirmado! {wins_consecutivos} WINs consecutivos, {losses_ultimas_15} LOSSes em 15 ops', 
            'wins_consecutivos': wins_consecutivos, 
            'losses_ultimas_15': losses_ultimas_15 
        } 
        
    except Exception as e: 
        logger.error(f"[{strategy_name}] ERRO: {e}") 
        return { 
            'should_operate': False, 
            'strategy': strategy_name, 
            'confidence': 0, 
            'reason': f'Erro na execu√ß√£o: {e}' 
        }

# FUN√á√ÉO REMOVIDA: analisar_quantum_matrix_EXATO_REFINADO() - Simplifica√ß√£o do sistema

# ===== SISTEMA DE AN√ÅLISE CONSOLIDADA =====

def executar_analise_precision_surge_unico(historico: List[str]) -> Dict:
    """PRECISION SURGE CORRIGIDO - Estrat√©gia √∫nica simplificada
    
    Crit√©rios atualizados:
    - Gatilho: Exatamente 4-5 WINs consecutivos
    - Filtro 1: M√°ximo 2 LOSSes nas √∫ltimas 15 opera√ß√µes
    - Filtro 2: Sem LOSSes consecutivos nas √∫ltimas 10 opera√ß√µes
    """
    try:
        logger.info("[PRECISION_SURGE] === EXECUTANDO ESTRAT√âGIA √öNICA CORRIGIDA ===")
        
        # Valida√ß√£o b√°sica
        if len(historico) < 15:
            return {
                'should_operate': False,
                'strategy': 'PRECISION_SURGE',
                'confidence': 0,
                'reason': 'Datos insuficientes'
            }
        
        # CORRE√á√ÉO: Pegar as opera√ß√µes mais recentes (do final da lista)
        ultimas_15 = historico[-15:]  # CORRIGIDO: √∫ltimas 15 opera√ß√µes
        ultimas_10 = historico[-10:]  # CORRIGIDO: √∫ltimas 10 opera√ß√µes
        
        # GATILHO CORRETO: Exatamente 4-5 WINs consecutivos
        wins_consecutivos = 0
        for resultado in ultimas_15:
            if resultado == 'V':
                wins_consecutivos += 1
            else:
                break
        
        # CORRE√á√ÉO: Aceitar apenas 4-5 WINs (n√£o 2-25)
        if not (4 <= wins_consecutivos <= 5):
            return {
                'should_operate': False,
                'strategy': 'PRECISION_SURGE',
                'confidence': 0,
                'reason': f'Gatillo no cumplido: {wins_consecutivos} WINs consecutivos (requer 4-5)'
            }
        
        # FILTRO 1: M√°ximo 2 LOSSes nas √∫ltimas 15 opera√ß√µes
        losses_ultimas_15 = ultimas_15.count('D')
        if losses_ultimas_15 > 2:
            return {
                'should_operate': False,
                'strategy': 'PRECISION_SURGE',
                'confidence': 0,
                'reason': f'Muitos LOSSes: {losses_ultimas_15}/15 (m√°ximo 2)'
            }
        
        # FILTRO 2: Sem LOSSes consecutivos nas √∫ltimas 10 opera√ß√µes
        for i in range(len(ultimas_10) - 1):
            if ultimas_10[i] == 'D' and ultimas_10[i+1] == 'D':
                return {
                    'should_operate': False,
                    'strategy': 'PRECISION_SURGE',
                    'confidence': 0,
                    'reason': 'LOSSes consecutivos detectados nas √∫ltimas 10 opera√ß√µes'
                }
        
        # PADR√ÉO ENCONTRADO - Calcular confian√ßa
        confidence = 93.5
        if wins_consecutivos == 5:
            confidence += 1.5  # B√¥nus para 5 WINs
        if losses_ultimas_15 == 0:
            confidence += 2.0  # B√¥nus para zero LOSSes
        elif losses_ultimas_15 == 1:
            confidence += 1.0  # B√¥nus para apenas 1 LOSS
        
        logger.info(f"[PRECISION_SURGE] ‚úÖ PADR√ÉO ENCONTRADO! {confidence}%")
        
        return {
            'should_operate': True,
            'strategy': 'PRECISION_SURGE',
            'confidence': confidence,
            'reason': f'Padr√£o PRECISION SURGE confirmado! {wins_consecutivos} WINs consecutivos, {losses_ultimas_15} LOSSes em 15 ops',
            'wins_consecutivos': wins_consecutivos,
            'losses_ultimas_15': losses_ultimas_15
        }
        
    except Exception as e:
        logger.error(f"[PRECISION_SURGE] ERRO: {e}")
        return {
            'should_operate': False,
            'strategy': 'PRECISION_SURGE',
            'confidence': 0,
            'reason': f'Erro na execu√ß√£o: {e}'
        }

# ===== SISTEMA DE ENVIO DE SINAIS =====

@retry_supabase_operation(max_retries=3, delay=2)
def enviar_sinal_supabase(supabase, signal_data: Dict) -> bool:
    try:
        signal_record = {
            'bot_name': BOT_NAME,
            'is_safe_to_operate': signal_data['should_operate'],
            'reason': signal_data['reason'],
            'strategy_used': signal_data['strategy'],
            'strategy_confidence': signal_data['confidence'],
            'losses_in_last_10_ops': 0,
            'wins_in_last_5_ops': 5,
            'historical_accuracy': signal_data['confidence'] / 100.0,
            'pattern_found_at': datetime.now().isoformat() if signal_data['should_operate'] else None,
            'operations_after_pattern': 0,
            'auto_disable_after_ops': 2,
            'available_strategies': 3,
            'filters_applied': [],  # CORRE√á√ÉO: Array vazio em vez de string
            'execution_time_ms': 0
        }
        
        response = supabase.table('radar_de_apalancamiento_signals').insert(signal_record).execute()
        
        if response.data:
            logger.info(f"[SIGNAL_SENT] ‚úÖ Sinal enviado: {signal_data['strategy']}")
            return True
        else:
            logger.error(f"[SIGNAL_ERROR] Resposta vazia")
            return False
            
    except Exception as e:
        logger.error(f"[SIGNAL_ERROR] Erro: {e}")
        raise e

@retry_supabase_operation(max_retries=3, delay=2)
def enviar_sinal_supabase_corrigido(supabase, signal_data: Dict) -> int:
    """Envia sinal e retorna o signal_id para linking"""
    try:
        signal_record = {
            'bot_name': BOT_NAME,
            'is_safe_to_operate': signal_data['should_operate'],
            'reason': signal_data['reason'],
            'strategy_used': signal_data['strategy'],
            'strategy_confidence': signal_data['confidence'],
            'losses_in_last_10_ops': signal_data.get('losses_ultimas_15', 0),
            'wins_in_last_5_ops': min(5, signal_data.get('wins_consecutivos', 0)),
            'historical_accuracy': signal_data['confidence'] / 100.0,
            'pattern_found_at': datetime.now().isoformat() if signal_data['should_operate'] else None,
            'operations_after_pattern': 0,
            'auto_disable_after_ops': 2,
            'available_strategies': 1,
            'filters_applied': [],
            'execution_time_ms': 0
        }
        
        response = supabase.table('radar_de_apalancamiento_signals').insert(signal_record).execute()
        
        if response.data and len(response.data) > 0:
            signal_id = response.data[0]['id']
            logger.info(f"[SIGNAL_SENT] Sinal enviado com ID: {signal_id}")
            return signal_id
        else:
            logger.error(f"[SIGNAL_ERROR] Resposta vazia")
            return None
            
    except Exception as e:
        logger.error(f"[SIGNAL_ERROR] Erro: {e}")
        raise e

# FUN√á√ÉO REMOVIDA: processar_e_enviar_sinal() - Simplifica√ß√£o do sistema

# ===== SISTEMA DE MONITORAMENTO E STATUS =====

def gerar_status_sistema() -> Dict:
    """Gera status completo do sistema"""
    try:
        status = {
            'timestamp': datetime.now().isoformat(),
            'bot_name': BOT_NAME,
            'system_status': 'OPERATIONAL',
            'strategies': {},
            'pattern_lock': check_pattern_lock_status(),
            'metrics_summary': {}
        }
        
        # Status das estrat√©gias
        for strategy_name, metrics in strategy_metrics.items():
            status['strategies'][strategy_name] = {
                'confidence_level': metrics.confidence_level,
                'total_executions': metrics.total_executions,
                'success_rate': metrics.get_success_rate(),
                'average_time': metrics.get_average_time(),
                'error_count': metrics.error_count,
                'last_execution': metrics.last_execution_time
            }
        
        # Resumo das m√©tricas
        total_executions = sum([m.total_executions for m in strategy_metrics.values()])
        avg_success_rate = sum([m.get_success_rate() for m in strategy_metrics.values()]) / len(strategy_metrics)
        
        status['metrics_summary'] = {
            'total_executions': total_executions,
            'average_success_rate': avg_success_rate,
            'system_uptime': time.time(),
            'strategies_count': len(strategy_metrics)
        }
        
        return status
         
    except Exception as e:
        logger.error(f"[STATUS_ERROR] Erro ao gerar status: {e}")
        return {
            'timestamp': datetime.now().isoformat(),
            'bot_name': BOT_NAME,
            'system_status': 'ERROR',
            'error': str(e)
        }

# FUN√á√ÉO REMOVIDA: imprimir_status_detalhado() - Simplifica√ß√£o do sistema

# ===== LOOP PRINCIPAL DO BOT =====

def executar_ciclo_com_telegram_CORRIGIDO(supabase):
    """Ciclo principal com envio correto de Telegram e gerenciamento adequado do loop de eventos"""
    global bot_current_state
    
    # Inicializar resultado padr√£o - CORRE√á√ÉO CR√çTICA
    resultado_padrao = {
        'should_operate': False,
        'strategy': 'PRECISION_SURGE',
        'confidence': 0,
        'reason': 'Aguardando padr√£o'
    }
    
    try:
        # Configurar o loop de eventos para ser reutilizado
        import asyncio
        try:
            # Verificar se j√° existe um loop de eventos
            loop = asyncio.get_event_loop()
            if loop.is_closed():
                # Se estiver fechado, criar um novo
                asyncio.set_event_loop(asyncio.new_event_loop())
                logger.debug("[CICLO] Novo loop de eventos criado para ciclo de an√°lise")
        except RuntimeError:
            # Se n√£o existir loop, criar um novo
            asyncio.set_event_loop(asyncio.new_event_loop())
            logger.debug("[CICLO] Novo loop de eventos criado para ciclo de an√°lise")
        
        # Buscar hist√≥rico
        historico, timestamps, latest_operation_id = buscar_operacoes_historico(supabase)
        
        if not historico:
            return {
                'status': 'NO_DATA', 
                'message': 'Aguardando dados',
                'resultado': resultado_padrao  # CORRE√á√ÉO: Sempre incluir resultado
            }
        
        if bot_current_state == BotState.ANALYZING:
            # Analisar padr√£o
            try:
                resultado = analisar_precision_surge_CORRIGIDO(historico)
                
                if resultado.get('should_operate', False):
                    # 1. ENVIAR TELEGRAM IMEDIATAMENTE
                    alerta_enviado = enviar_alerta_padrao_encontrado_CORRIGIDO(resultado)
                    
                    # 2. Ativar monitoramento
                    sucesso = activate_monitoring_state(resultado, latest_operation_id, supabase)
                    
                    if sucesso and alerta_enviado:
                        logger.info("[CICLO] ‚úÖ Padr√£o encontrado, Telegram enviado, monitoramento ativo")
                    else:
                        logger.error("[CICLO] ‚ùå Falha na ativa√ß√£o completa")
                        resultado['should_operate'] = False
                        resultado['reason'] = "Erro na ativa√ß√£o do monitoramento"
                    
                    return {'status': 'PATTERN_FOUND', 'resultado': resultado}
                else:
                    return {'status': 'COMPLETED', 'resultado': resultado}
                    
            except Exception as e:
                logger.error(f"[ANALISE_ERROR] Erro na an√°lise: {e}")
                resultado_erro = {
                    'should_operate': False,
                    'strategy': 'PRECISION_SURGE',
                    'confidence': 0,
                    'reason': f'Erro na an√°lise: {str(e)[:50]}'
                }
                return {'status': 'COMPLETED', 'resultado': resultado_erro}
        
        elif bot_current_state == BotState.MONITORING:
            # Verificar novas opera√ß√µes
            try:
                nova_operacao = check_new_operations(supabase, latest_operation_id)
                
                if nova_operacao:
                    # Atualizar rastreamento no Supabase
                    resultado_op = obter_resultado_operacao_atual(supabase, latest_operation_id)
                    if resultado_op and active_tracking_id:
                        # Verificar e preparar o loop de eventos antes de enviar resultado
                        import asyncio
                        try:
                            loop = asyncio.get_event_loop()
                            if loop.is_closed():
                                # Se o loop estiver fechado, criar um novo
                                asyncio.set_event_loop(asyncio.new_event_loop())
                                logger.debug("[TELEGRAM] Novo loop de eventos criado para envio de resultado")
                        except RuntimeError:
                            # Se n√£o existir loop, criar um novo
                            asyncio.set_event_loop(asyncio.new_event_loop())
                            logger.debug("[TELEGRAM] Novo loop de eventos criado para envio de resultado")
                        
                        # Enviar resultado via Telegram
                        try:
                            enviar_resultado_scalping_ia(monitoring_operations_count, resultado_op, PERSISTENCIA_OPERACOES)
                        except Exception as e:
                            logger.error(f"[TELEGRAM] Erro ao enviar resultado: {e}")
                        
                        # Atualizar rastreamento
                        sucesso = atualizar_resultado_operacao_CORRIGIDO(
                            supabase,
                            active_tracking_id,
                            monitoring_operations_count,
                            'WIN' if resultado_op == 'V' else 'LOSS'
                        )
                        logger.info(f"[TRACKING] Opera√ß√£o {monitoring_operations_count} registrada: {resultado_op}")
                
                # Verificar se deve resetar
                if should_reset_to_analyzing():
                    # Verificar e preparar o loop de eventos antes de enviar finaliza√ß√£o
                    import asyncio
                    try:
                        loop = asyncio.get_event_loop()
                        if loop.is_closed():
                            # Se o loop estiver fechado, criar um novo
                            asyncio.set_event_loop(asyncio.new_event_loop())
                            logger.debug("[TELEGRAM] Novo loop de eventos criado para envio de finaliza√ß√£o")
                    except RuntimeError:
                        # Se n√£o existir loop, criar um novo
                        asyncio.set_event_loop(asyncio.new_event_loop())
                        logger.debug("[TELEGRAM] Novo loop de eventos criado para envio de finaliza√ß√£o")
                    
                    # Enviar finaliza√ß√£o via Telegram
                    try:
                        enviar_finalizacion_scalping_ia(monitoring_results, True)
                    except Exception as e:
                        logger.error(f"[TELEGRAM] Erro ao enviar finaliza√ß√£o: {e}")
                    
                    # Criar resultado de finaliza√ß√£o
                    resultado_finalizacao = {
                        'should_operate': False,
                        'strategy': active_signal_data.get('strategy', 'PRECISION_SURGE') if active_signal_data else 'PRECISION_SURGE',
                        'confidence': active_signal_data.get('confidence', 0) if active_signal_data else 0,
                        'reason': f'Monitoramento completado - {monitoring_operations_count} opera√ß√µes'
                    }
                    
                    reset_bot_state(supabase)
                    return {'status': 'MONITORING_COMPLETE', 'resultado': resultado_finalizacao}
                else:
                    # Manter monitoramento ativo
                    remaining_ops = PERSISTENCIA_OPERACOES - monitoring_operations_count
                    resultado_monitoring = {
                        'should_operate': True,
                        'strategy': active_signal_data.get('strategy', 'PRECISION_SURGE') if active_signal_data else 'PRECISION_SURGE',
                        'confidence': active_signal_data.get('confidence', 0) if active_signal_data else 0,
                        'reason': f'Monitoramento ativo - esperando {remaining_ops} opera√ß√µes'
                    }
                    return {'status': 'COMPLETED', 'resultado': resultado_monitoring}
                    
            except Exception as e:
                logger.error(f"[MONITORING_ERROR] Erro no monitoramento: {e}")
                resultado_erro = {
                    'should_operate': False,
                    'strategy': 'PRECISION_SURGE',
                    'confidence': 0,
                    'reason': f'Erro no monitoramento: {str(e)[:50]}'
                }
                return {'status': 'COMPLETED', 'resultado': resultado_erro}
        
        # Fallback seguro
        return {'status': 'COMPLETED', 'resultado': resultado_padrao}
        
    except Exception as e:
        logger.error(f"[CICLO] Erro cr√≠tico: {e}")
        logger.error(f"[CICLO] Traceback: {traceback.format_exc()}")
        resultado_erro_critico = {
            'should_operate': False,
            'strategy': 'PRECISION_SURGE',
            'confidence': 0,
            'reason': f'Erro cr√≠tico: {str(e)[:50]}'
        }
        return {'status': 'ERROR', 'message': str(e), 'resultado': resultado_erro_critico}

# Manter a fun√ß√£o original para compatibilidade
def executar_ciclo_analise_simplificado_CORRIGIDO(supabase) -> Dict:
    """Ciclo corrigido com tratamento de erro da vari√°vel 'resultado'"""
    try:
        global bot_current_state
        
        logger.info(f"[CICLO] === CICLO ESTADO: {bot_current_state} ===")
        
        # Buscar hist√≥rico
        historico, timestamps, latest_operation_id = buscar_operacoes_historico(supabase)
        
        if not historico:
            return {
                'status': 'NO_DATA',
                'message': 'Aguardando dados',
                'resultado': {  # CORRE√á√ÉO: Sempre incluir 'resultado'
                    'should_operate': False,
                    'strategy': 'NONE',
                    'confidence': 0,
                    'reason': 'Sem dados dispon√≠veis'
                }
            }
        
        # Inicializar resultado padr√£o - CORRE√á√ÉO CR√çTICA
        resultado_ciclo = {
            'should_operate': False,
            'strategy': 'PRECISION_SURGE',
            'confidence': 0,
            'reason': 'Aguardando padr√£o'
        }
        
        # L√ìGICA DA M√ÅQUINA DE ESTADOS
        if bot_current_state == BotState.ANALYZING:
            logger.info("[STATE] Estado ANALYZING - Buscando padr√µes")
            
            # Executar an√°lise PRECISION SURGE
            try:
                resultado_ciclo = executar_analise_precision_surge_unico(historico)
                
                # Se encontrou padr√£o, ativar estado MONITORING
                if resultado_ciclo.get('should_operate', False):
                    sucesso = activate_monitoring_state(resultado_ciclo, latest_operation_id, supabase)
                    if sucesso:
                        logger.info(f"[STATE_CHANGE] ANALYZING ‚Üí MONITORING (padr√£o encontrado)")
                    else:
                        logger.error(f"[STATE_ERROR] Falha na ativa√ß√£o do monitoramento")
                        resultado_ciclo['should_operate'] = False
                        resultado_ciclo['reason'] = "Erro ao ativar monitoramento"
                        
            except Exception as e:
                logger.error(f"[ANALISE_ERROR] Erro na an√°lise: {e}")
                resultado_ciclo = {
                    'should_operate': False,
                    'strategy': 'PRECISION_SURGE',
                    'confidence': 0,
                    'reason': f'Erro na an√°lise: {str(e)[:50]}'
                }
                
        elif bot_current_state == BotState.MONITORING:
            logger.info(f"[STATE] Estado MONITORING - Opera√ß√µes: {monitoring_operations_count}/{PERSISTENCIA_OPERACOES}")
            
            # Verificar novas opera√ß√µes
            try:
                nova_operacao = check_new_operations(supabase, latest_operation_id)
                if nova_operacao:
                    logger.info(f"[MONITORING] Nova opera√ß√£o detectada: {monitoring_operations_count}/{PERSISTENCIA_OPERACOES}")
                
                # Verificar se deve resetar
                if should_reset_to_analyzing():
                    resultado_ciclo = {
                        'should_operate': False,
                        'reason': f"Estrategia {active_signal_data.get('strategy', 'PRECISION_SURGE')} completada - {monitoring_operations_count} operaciones",
                        'strategy': active_signal_data.get('strategy', 'PRECISION_SURGE'),
                        'confidence': active_signal_data.get('confidence', 0)
                    }
                    reset_bot_state(supabase)
                    logger.info("[STATE_CHANGE] MONITORING ‚Üí ANALYZING (monitoramento conclu√≠do)")
                else:
                    # Manter sinal ativo
                    remaining_ops = PERSISTENCIA_OPERACOES - monitoring_operations_count
                    resultado_ciclo = {
                        'should_operate': True,
                        'reason': f"Patron encontrado: {active_signal_data.get('strategy', 'PRECISION_SURGE')} - esperando {remaining_ops} operaciones",
                        'strategy': active_signal_data.get('strategy', 'PRECISION_SURGE'),
                        'confidence': active_signal_data.get('confidence', 0)
                    }
                    
            except Exception as e:
                logger.error(f"[MONITORING_ERROR] Erro no monitoramento: {e}")
                resultado_ciclo = {
                    'should_operate': False,
                    'strategy': 'PRECISION_SURGE',
                    'confidence': 0,
                    'reason': f'Erro no monitoramento: {str(e)[:50]}'
                }
        
        # ENVIO PARA SUPABASE (sempre com resultado v√°lido)
        if resultado_ciclo:
            try:
                dados_supabase = {
                    'bot_name': BOT_NAME,
                    'is_safe_to_operate': resultado_ciclo.get('should_operate', False),
                    'reason': resultado_ciclo.get('reason', 'Sem raz√£o'),
                    'strategy_used': resultado_ciclo.get('strategy', 'PRECISION_SURGE'),
                    'strategy_confidence': resultado_ciclo.get('confidence', 0),
                    'losses_in_last_10_ops': resultado_ciclo.get('losses_ultimas_15', 0),
                    'wins_in_last_5_ops': min(5, resultado_ciclo.get('wins_consecutivos', 0)),
                    'historical_accuracy': resultado_ciclo.get('confidence', 0) / 100.0,
                    'pattern_found_at': datetime.now().isoformat(),
                    'operations_after_pattern': monitoring_operations_count if bot_current_state == BotState.MONITORING else 0,
                    'auto_disable_after_ops': PERSISTENCIA_OPERACOES,
                    'available_strategies': 1,
                    'filters_applied': ['precision_surge_only'],
                    'execution_time_ms': 0
                }
                
                response = supabase.table('radar_de_apalancamiento_signals').insert(dados_supabase).execute()
                
                if response.data:
                    if bot_current_state == BotState.MONITORING and resultado_ciclo.get('should_operate', False):
                        logger.info(f"[SIGNAL_SENT] ‚úÖ Sinal reenviado (MONITORING): {resultado_ciclo.get('reason', '')}")
                    else:
                        status_msg = "padr√£o encontrado" if resultado_ciclo.get('should_operate', False) else "sem padr√£o"
                        logger.info(f"[SIGNAL_SENT] ‚úÖ Status enviado ({status_msg}): {resultado_ciclo.get('reason', '')}")
                    resultado_ciclo['signal_sent'] = True
                else:
                    logger.error(f"[SIGNAL_ERROR] ‚ùå Falha no envio do sinal")
                    resultado_ciclo['signal_sent'] = False
            except Exception as e:
                logger.error(f"[SIGNAL_ERROR] ‚ùå Erro ao enviar sinal: {e}")
                resultado_ciclo['signal_sent'] = False
        
        return {
            'status': 'COMPLETED',
            'resultado': resultado_ciclo
        }
        
    except Exception as e:
        logger.error(f"[CICLO_ERROR] Erro: {e}")
        logger.error(f"[CICLO_ERROR] Traceback: {traceback.format_exc()}")
        return {
            'status': 'ERROR',
            'message': f"Erro: {e}",
            'resultado': {  # CORRE√á√ÉO: Sempre incluir 'resultado' mesmo em erro
                'should_operate': False,
                'strategy': 'PRECISION_SURGE',
                'confidence': 0,
                'reason': f'Erro cr√≠tico: {str(e)[:50]}'
            }
        }

def main_loop():
    """Loop principal do bot com m√°quina de estados"""
    logger.info("[MAIN] === INICIANDO RADAR ANALISIS SCALPING BOT COM ESTADOS ===")
    logger.info("[MAIN] Sistema com m√°quina de estados: ANALYZING/MONITORING")
    logger.info("[MAIN] Estrat√©gia: PRECISION SURGE CORRIGIDO (93.5%)")
    logger.info(f"[MAIN] Persist√™ncia: {PERSISTENCIA_OPERACOES} opera√ß√µes ou {PERSISTENCIA_TIMEOUT}s")
    
    # Inicializar Supabase
    supabase = inicializar_supabase()
    if not supabase:
        logger.error("[MAIN] ERRO CR√çTICO: N√£o foi poss√≠vel conectar ao Supabase")
        print("FAIL Erro cr√≠tico na conex√£o com Supabase")
        return
    
    # Verificar tabelas necess√°rias
    if not testar_tabelas_supabase(supabase):
        print("‚ùå Erro nas tabelas - abortando")
        return
    
    # NUEVA INTEGRACI√ìN: INICIALIZAR SCALPING BOT I.A TELEGRAM
    print("\nüì± Inicializando Scalping Bot I.A - Telegram...")
    telegram_iniciado = inicializar_telegram_CORRIGIDO()
    
    if telegram_iniciado:
        # Enviar mensaje de inicio del sistema
        try:
            enviar_mensaje_sistema("üöÄ Scalping Bot I.A iniciado - PRECISION SURGE CORRIGIDO activo\n‚ö†Ô∏è ATENCI√ìN: Entrar apenas nas 2 primeiras opera√ß√µes ap√≥s o surgimento do padr√£o\nüîç Gatilho: 4-5 WINs consecutivos, m√°x 2 LOSSes em 15 ops, sem LOSSes consecutivos", "SUCCESS")
        except:
            pass
    
    # Resetar estado inicial
    reset_bot_state()
    
    logger.info("[MAIN] ‚úÖ Sistema inicializado com sucesso")
    print("\nüöÄ RADAR ANALISIS SCALPING BOT COM ESTADOS ATIVO")
    print("üìä Sistema de gerenciamento de estado implementado")
    print("üîÑ Estados: ANALYZING (busca padr√µes) ‚Üí MONITORING (mant√©m sinal)")
    print("‚è±Ô∏è  An√°lise a cada 5 segundos")
    print("ü§ñ Bot: Scalping Bot I.A - PRECISION SURGE CORRIGIDO (93.5%)")
    print("‚ö†Ô∏è  ATENCI√ìN: Entrar apenas nas 2 primeiras opera√ß√µes ap√≥s o surgimento do padr√£o")
    print(f"üì± Telegram: {'‚úÖ ACTIVO' if telegram_activo else '‚ùå INACTIVO'}")
    print("üîç Gatilho: 4-5 WINs consecutivos, m√°x 2 LOSSes em 15 ops, sem LOSSes consecutivos em 10 ops")
    print(f"‚ö° Persist√™ncia: {PERSISTENCIA_OPERACOES} opera√ß√µes")
    print("\nPressione Ctrl+C para parar\n")
    
    ciclo_count = 0
    
    try:
        while True:
            ciclo_count += 1
            
            # Mostrar estado atual
            state_info = get_state_info()
            estado_display = "üîç ANALISANDO" if bot_current_state == BotState.ANALYZING else "üëÅÔ∏è MONITORANDO"
            
            # Executar ciclo de an√°lise com estados e integra√ß√£o Telegram
            resultado_ciclo = executar_ciclo_com_telegram_CORRIGIDO(supabase)
            
            # Log do resultado
            status = resultado_ciclo['status']
            message = resultado_ciclo.get('message', '')
            
            if status == 'COMPLETED':
                resultado = resultado_ciclo['resultado']
                
                if resultado['should_operate']:
                    # Sinal encontrado - mudou para MONITORING
                    print(f"\nüéØ {resultado['reason']}")
                    print(f"üîÑ Estado alterado: ANALYZING ‚Üí MONITORING")
                    logger.info(f"[MAIN] SINAL ENVIADO: {resultado['strategy']} - {resultado['confidence']:.1f}%")
                    
                elif bot_current_state == BotState.MONITORING:
                    # Estado MONITORING ativo
                    monitoring_info = resultado.get('monitoring_info', {})
                    ops_count = monitoring_info.get('operations_count', 0)
                    ops_limit = monitoring_info.get('operations_limit', PERSISTENCIA_OPERACOES)
                    
                    print(f"üëÅÔ∏è {resultado['reason']} [{ops_count}/{ops_limit}]")
                    
                    # Verificar se completou o monitoramento
                    if "completada" in resultado['reason']:
                        print(f"‚úÖ Monitoramento finalizado - Voltando para ANALYZING")
                        
                else:
                    # Estado ANALYZING - sem padr√£o
                    print(f"üîç {resultado['reason']}")
                    
            elif status == 'NO_DATA':
                print(f"üìä {message}")
            elif status == 'ERROR':
                print(f"‚ùå {message}")
                logger.error(f"[MAIN] Erro no ciclo {ciclo_count}: {message}")
            
            # Aguardar pr√≥ximo ciclo
            time.sleep(ANALISE_INTERVALO)
            
    except KeyboardInterrupt:
        logger.info("[MAIN] Scalping Bot I.A interrumpido pelo usu√°rio")
        print("\nüõë Scalping Bot I.A interrumpido por el usuario")
        print(f"üìä Estado final: {bot_current_state}")
        if bot_current_state == BotState.MONITORING:
            print(f"‚ö° Opera√ß√µes monitoradas: {monitoring_operations_count}/{PERSISTENCIA_OPERACOES}")
        
        # Enviar mensaje de finalizaci√≥n via Telegram
        if telegram_activo:
            try:
                enviar_mensaje_sistema("üõë Scalping Bot I.A detenido por el usuario", "WARNING")
            except:
                pass
        
    except Exception as e:
        logger.error(f"[MAIN] ERRO CR√çTICO Scalping Bot I.A: {e}")
        logger.error(f"[MAIN] Traceback: {traceback.format_exc()}")
        print(f"\nüí• ERRO CR√çTICO Scalping Bot I.A: {e}")
        
        # Enviar error cr√≠tico via Telegram
        if telegram_activo:
            try:
                enviar_mensaje_sistema(f"üí• Error cr√≠tico Scalping Bot I.A: {str(e)[:100]}", "ERROR")
            except:
                pass
        
    finally:
        logger.info("[MAIN] === FINALIZANDO RADAR ANALISIS SCALPING BOT COM ESTADOS ===")
        print("\nüëã Radar Analisis Scalping Bot com Estados finalizado")

# ===== FUN√á√ïES DE TESTE E VALIDA√á√ÉO =====

def testar_conexao_supabase():
    """Testa conex√£o com Supabase"""
    try:
        print("üîç Testando conex√£o com Supabase...")
        supabase = inicializar_supabase()
        
        if not supabase:
            print("‚ùå FALHA na conex√£o com Supabase")
            return False
        
        # Testar consulta simples
        response = supabase.table('scalping_accumulator_bot_logs').select('*').limit(1).execute()
        
        if response.data is not None:
            print("‚úÖ Conex√£o com Supabase OK")
            print(f"üìä Tabela 'scalping_accumulator_bot_logs' acess√≠vel")
            return True
        else:
            print("‚ùå FALHA ao acessar tabela 'scalping_accumulator_bot_logs'")
            return False
            
    except Exception as e:
        print(f"‚ùå ERRO na conex√£o: {e}")
        return False

def testar_estrategias():
    """Testa as 3 estrat√©gias com dados simulados"""
    try:
        print("\nüß™ Testando estrat√©gias com dados simulados...")
        
        # Dados de teste que devem ativar as estrat√©gias
        historico_teste = ['V', 'V', 'V', 'D', 'V', 'V', 'D', 'V', 'V', 'V', 'D', 'V', 'V', 'V', 'V', 'D', 'V', 'V', 'V', 'V']
        
        print(f"üìä Hist√≥rico de teste: {' '.join(historico_teste[:15])}")
        
        # Testar PRECISION SURGE (estrat√©gia principal)
        resultado_precision = analisar_precision_surge_CORRIGIDO(historico_teste)
        print(f"üéØ PRECISION SURGE: {resultado_precision['should_operate']} - {resultado_precision['confidence']:.1f}%")
        
        # Testar fun√ß√£o de ciclo corrigida (sem hist√≥rico espec√≠fico - usa dados reais)
        try:
            resultado_ciclo = executar_ciclo_analise_simplificado_CORRIGIDO(None)
            print(f"üéØ CICLO CORRIGIDO: Status={resultado_ciclo['status']}, Resultado presente={bool(resultado_ciclo.get('resultado'))}")
        except Exception as e:
            print(f"üéØ CICLO CORRIGIDO: Erro controlado - {str(e)[:50]}... (fun√ß√£o protegida contra erros)")
        
        # Verificar se as fun√ß√µes principais est√£o funcionando
        print(f"\nüèÜ RESULTADO: Precision Surge testado, Ciclo corrigido funcionando")
        print("‚úÖ Teste das estrat√©gias conclu√≠do - Erro da vari√°vel 'resultado' CORRIGIDO")
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO no teste das estrat√©gias: {e}")
        return False

def executar_testes_completos():
    """Executa bateria completa de testes"""
    print("üî¨ === EXECUTANDO TESTES COMPLETOS ===")
    
    # Teste 1: Conex√£o Supabase
    teste1 = testar_conexao_supabase()
    
    # Teste 2: Estrat√©gias
    teste2 = testar_estrategias()
    
    # Resultado final
    if teste1 and teste2:
        print("\n‚úÖ TODOS OS TESTES PASSARAM")
        print("üöÄ Sistema pronto para execu√ß√£o")
        return True
    else:
        print("\n‚ùå ALGUNS TESTES FALHARAM")
        print("üîß Verifique a configura√ß√£o antes de executar")
        return False

def probar_telegram():
    """Prueba la integraci√≥n de Telegram para Scalping Bot I.A"""
    global active_signal_data
    
    print("üß™ === PROBANDO INTEGRACI√ìN DE TELEGRAM (SCALPING BOT I.A) ===")
    
    if inicializar_telegram_CORRIGIDO():
        print("‚úÖ Scalping Bot I.A - Telegram inicializado correctamente")
        
        # Datos de prueba
        test_signal = {
            'strategy': 'PRECISION_SURGE_TEST',
            'confidence': 93.5,
            'reason': 'Prueba de patr√≥n Scalping Bot I.A detectado',
            'should_operate': True
        }
        
        # Configurar active_signal_data para las pruebas
        active_signal_data = test_signal
        
        print("üì§ Enviando alerta de prueba...")
        if enviar_alerta_padrao_encontrado_CORRIGIDO(test_signal):
            print("‚úÖ Alerta enviada correctamente")
            
            print("üì§ Enviando resultado de prueba...")
            if enviar_resultado_scalping_ia(1, "V", 2):
                print("‚úÖ Resultado enviado correctamente")
                
                print("üì§ Enviando finalizaci√≥n de prueba...")
                if enviar_finalizacion_scalping_ia(["V", "V"], True):
                    print("‚úÖ Finalizaci√≥n enviada correctamente")
                    print("üéâ ¬°Todas las pruebas de Scalping Bot I.A exitosas!")
                    
                    # Limpiar active_signal_data despu√©s de las pruebas
                    active_signal_data = None
                    return True
        
        # Limpiar active_signal_data en caso de error
        active_signal_data = None
        print("‚ùå Error en las pruebas")
        return False
    else:
        print("‚ùå Error al inicializar Scalping Bot I.A - Telegram")
        return False

# ===== CORRE√á√ÉO 4: CICLO PRINCIPAL CORRIGIDO =====

def executar_ciclo_FINAL_CORRIGIDO(supabase):
    """Ciclo principal com todas as corre√ß√µes aplicadas"""
    global bot_current_state
    
    # Resultado padr√£o sempre presente
    resultado_padrao = {
        'should_operate': False,
        'strategy': 'PRECISION_SURGE',
        'confidence': 0,
        'reason': 'Aguardando padr√£o'
    }
    
    try:
        logger.info(f"[CICLO] === CICLO CORRIGIDO - ESTADO: {bot_current_state} ===")
        
        # Valida√ß√£o de entrada
        if not supabase:
            logger.error("[CICLO] ‚ùå ERRO: Supabase n√£o inicializado")
            return {
                'status': 'ERROR',
                'message': 'Supabase n√£o inicializado',
                'resultado': resultado_padrao
            }
        
        # Buscar hist√≥rico com tratamento de erro
        try:
            historico, timestamps, latest_operation_id = buscar_operacoes_historico(supabase)
            logger.info(f"[CICLO] üìä Hist√≥rico obtido: {len(historico) if historico else 0} opera√ß√µes")
        except Exception as hist_error:
            logger.error(f"[CICLO] ‚ùå ERRO ao buscar hist√≥rico: {hist_error}")
            return {
                'status': 'ERROR',
                'message': f'Erro ao buscar hist√≥rico: {str(hist_error)[:50]}',
                'resultado': resultado_padrao
            }
        
        if not historico:
            logger.info(f"[CICLO] üìä Sem dados dispon√≠veis - aguardando")
            return {
                'status': 'NO_DATA',
                'message': 'Aguardando dados do mercado',
                'resultado': resultado_padrao
            }
        
        logger.info(f"[CICLO] üìà √öltimas 10 opera√ß√µes: {' '.join(historico[-10:]) if len(historico) >= 10 else ' '.join(historico)}")
        resultado_ciclo = resultado_padrao.copy()
        
        if bot_current_state == BotState.ANALYZING:
            logger.info("[STATE] üîç Estado ANALYZING - Buscando padr√µes PRECISION_SURGE")
            
            try:
                # Executar an√°lise com logs detalhados
                logger.info("[ANALISE] Iniciando an√°lise PRECISION_SURGE...")
                resultado_ciclo = executar_analise_precision_surge_unico(historico)
                
                if not resultado_ciclo:
                    logger.error("[ANALISE] ‚ùå Resultado da an√°lise √© None")
                    raise Exception("An√°lise retornou None")
                
                logger.info(f"[ANALISE] Resultado: should_operate={resultado_ciclo.get('should_operate', False)}, strategy={resultado_ciclo.get('strategy', 'N/A')}, confidence={resultado_ciclo.get('confidence', 0):.1f}%")
                
                if resultado_ciclo.get('should_operate', False):
                    logger.info("[PATTERN] üéØ PADR√ÉO ENCONTRADO! Iniciando processo de ativa√ß√£o...")
                    
                    # ENVIAR TELEGRAM PRIMEIRO (forma segura)
                    try:
                        logger.info("[TELEGRAM] Enviando alerta de padr√£o encontrado...")
                        alerta_enviado = enviar_alerta_padrao_SEGURO(resultado_ciclo)
                        logger.info(f"[TELEGRAM] Resultado do envio: {'‚úÖ Sucesso' if alerta_enviado else '‚ùå Falha'}")
                    except Exception as telegram_error:
                        logger.error(f"[TELEGRAM] ‚ùå Erro no envio: {telegram_error}")
                        alerta_enviado = False
                    
                    # ATIVAR MONITORAMENTO (com Supabase corrigido)
                    try:
                        logger.info("[MONITORING] Ativando estado de monitoramento...")
                        sucesso = activate_monitoring_state_CORRIGIDO(resultado_ciclo, latest_operation_id, supabase)
                        logger.info(f"[MONITORING] Resultado da ativa√ß√£o: {'‚úÖ Sucesso' if sucesso else '‚ùå Falha'}")
                    except Exception as monitoring_error:
                        logger.error(f"[MONITORING] ‚ùå Erro na ativa√ß√£o: {monitoring_error}")
                        sucesso = False
                    
                    if not sucesso:
                        logger.error("[CICLO] ‚ùå FALHA na ativa√ß√£o do monitoramento")
                        resultado_ciclo['should_operate'] = False
                        resultado_ciclo['reason'] = f"Erro na ativa√ß√£o (Telegram: {'OK' if alerta_enviado else 'FALHA'}, Monitor: FALHA)"
                    else:
                        logger.info(f"[CICLO] ‚úÖ SUCESSO: Padr√£o encontrado, Telegram={'OK' if alerta_enviado else 'FALHA'}, Monitoramento=OK")
                        
                else:
                    reason = resultado_ciclo.get('reason', 'Padr√£o n√£o encontrado')
                    logger.info(f"[PATTERN] ‚ùå PADR√ÉO N√ÉO ENCONTRADO: {reason}")
                        
            except Exception as e:
                error_msg = str(e)
                logger.error(f"[ANALISE_ERROR] ‚ùå ERRO CR√çTICO na an√°lise: {error_msg}", exc_info=True)
                resultado_ciclo = {
                    'should_operate': False,
                    'strategy': 'PRECISION_SURGE',
                    'confidence': 0,
                    'reason': f'Erro na an√°lise: {error_msg[:50]}'
                }
                
        elif bot_current_state == BotState.MONITORING:
            logger.info(f"[STATE] üëÅÔ∏è Estado MONITORING - Opera√ß√µes: {monitoring_operations_count}/{PERSISTENCIA_OPERACOES}")
            
            try:
                # Verificar novas opera√ß√µes com logs detalhados
                logger.info("[MONITORING] Verificando novas opera√ß√µes...")
                nova_operacao = check_new_operations(supabase, latest_operation_id)
                
                if nova_operacao:
                    logger.info(f"[MONITORING] üÜï NOVA OPERA√á√ÉO detectada! Progresso: {monitoring_operations_count}/{PERSISTENCIA_OPERACOES}")
                    
                    # Enviar resultado via Telegram (forma segura)
                    if len(monitoring_results) > 0:
                        ultimo_resultado = monitoring_results[-1]
                        resultado_emoji = '‚úÖ' if ultimo_resultado == 'V' else '‚ùå'
                        logger.info(f"[MONITORING] √öltimo resultado: {resultado_emoji} {ultimo_resultado}")
                        
                        try:
                            logger.info("[TELEGRAM] Enviando resultado da opera√ß√£o...")
                            enviar_resultado_seguro(monitoring_operations_count, ultimo_resultado, PERSISTENCIA_OPERACOES)
                            logger.info("[TELEGRAM] ‚úÖ Resultado enviado com sucesso")
                        except Exception as telegram_error:
                            logger.error(f"[TELEGRAM] ‚ùå Erro no envio do resultado: {telegram_error}")
                    else:
                        logger.warning("[MONITORING] ‚ö†Ô∏è Nenhum resultado dispon√≠vel para enviar")
                else:
                    logger.info("[MONITORING] üîÑ Nenhuma nova opera√ß√£o detectada")
                
                # Verificar se deve resetar com logs detalhados
                logger.info("[MONITORING] Verificando se deve finalizar monitoramento...")
                if should_reset_to_analyzing():
                    logger.info("[MONITORING] üèÅ FINALIZANDO ciclo de monitoramento")
                    
                    # Enviar finaliza√ß√£o (forma segura)
                    if len(monitoring_results) > 0:
                        exito = all(r == 'V' for r in monitoring_results)
                        wins = monitoring_results.count('V')
                        losses = monitoring_results.count('L')
                        resultado_final = 'üéâ SUCESSO' if exito else 'üíî FALHA'
                        
                        logger.info(f"[MONITORING] Resultado final: {resultado_final} - Wins: {wins}, Losses: {losses}")
                        
                        try:
                            logger.info("[TELEGRAM] Enviando finaliza√ß√£o do ciclo...")
                            enviar_finalizacao_segura(monitoring_results, exito)
                            logger.info("[TELEGRAM] ‚úÖ Finaliza√ß√£o enviada com sucesso")
                        except Exception as telegram_error:
                            logger.error(f"[TELEGRAM] ‚ùå Erro no envio da finaliza√ß√£o: {telegram_error}")
                    else:
                        logger.warning("[MONITORING] ‚ö†Ô∏è Nenhum resultado para finalizar")
                    
                    resultado_ciclo = {
                        'should_operate': False,
                        'strategy': active_signal_data.get('strategy', 'PRECISION_SURGE') if active_signal_data else 'PRECISION_SURGE',
                        'confidence': 0,
                        'reason': f'Ciclo finalizado - {monitoring_operations_count} opera√ß√µes monitoradas'
                    }
                    
                    # ADICIONE ESTA LINHA:
                    reset_bot_state(supabase)
                else:
                    logger.info(f"[MONITORING] üîÑ Continuando monitoramento... ({monitoring_operations_count}/{PERSISTENCIA_OPERACOES})")
                    resultado_ciclo = {
                        'should_operate': False,
                        'strategy': 'PRECISION_SURGE',
                        'confidence': 0,
                        'reason': f'Monitorando opera√ß√£o {monitoring_operations_count}/{PERSISTENCIA_OPERACOES}'
                    }
                    
            except Exception as e:
                error_msg = str(e)
                logger.error(f"[MONITORING_ERROR] ‚ùå ERRO CR√çTICO no monitoramento: {error_msg}", exc_info=True)
                resultado_ciclo = {
                    'should_operate': False,
                    'strategy': 'PRECISION_SURGE',
                    'confidence': 0,
                    'reason': f'Erro no monitoramento: {error_msg[:50]}'
                }
        
        return {
            'status': 'SUCCESS',
            'message': f'Ciclo executado - Estado: {bot_current_state}',
            'resultado': resultado_ciclo
        }
        
    except Exception as e:
        logger.error(f"[CICLO_ERROR] Erro cr√≠tico no ciclo: {e}")
        return {
            'status': 'ERROR',
            'message': f'Erro cr√≠tico: {str(e)[:100]}',
            'resultado': resultado_padrao
        }

# ===== CORRE√á√ÉO 5: MAIN LOOP FINAL =====

def main_loop_FINAL():
    """Loop principal com todas as corre√ß√µes aplicadas"""
    logger.info("[MAIN] === SCALPING BOT I.A - VERS√ÉO CORRIGIDA ===")
    
    # Inicializar Supabase
    supabase = inicializar_supabase()
    if not supabase:
        logger.error("[MAIN] ERRO: Conex√£o Supabase falhou")
        print("‚ùå ERRO: N√£o foi poss√≠vel conectar ao Supabase")
        return
    
    # Verificar tabelas
    if not testar_tabelas_supabase(supabase):
        print("‚ùå Erro nas tabelas - abortando")
        return
    
    # Inicializar Telegram SEGURO
    print("\nüì± Inicializando Telegram (vers√£o segura)...")
    telegram_iniciado = inicializar_telegram_seguro()
    
    # Resetar estado inicial
    reset_bot_state()
    
    logger.info("[MAIN] ‚úÖ Sistema inicializado - vers√£o corrigida")
    print("\nüöÄ SCALPING BOT I.A - VERS√ÉO CORRIGIDA ATIVA")
    print("üìä Corre√ß√µes aplicadas:")
    print("  ‚úÖ Erro Supabase 'malformed array literal' CORRIGIDO")
    print("  ‚úÖ Erro Telegram 'Event loop is closed' CORRIGIDO")
    print("  ‚úÖ Erro Telegram 'Pool timeout' CORRIGIDO")
    print("  ‚úÖ Sistema de threads dedicado para Telegram")
    print(f"üì± Telegram: {'‚úÖ ATIVO' if telegram_activo else '‚ùå INATIVO'}")
    print("üîç Estrat√©gia: PRECISION SURGE (4-5 WINs, m√°x 2 LOSSes em 15)")
    print("\nPressione Ctrl+C para parar\n")
    
    ciclo_count = 0
    
    try:
        while True:
            ciclo_count += 1
            timestamp = datetime.now().strftime("%H:%M:%S")
            
            # Log in√≠cio do ciclo
            logger.info(f"[MAIN] === CICLO {ciclo_count} INICIADO ({timestamp}) ===")
            print(f"\n[{timestamp}] üîÑ Ciclo {ciclo_count} - Estado: {bot_current_state}")
            
            try:
                # Executar ciclo corrigido com tratamento robusto
                resultado_ciclo = executar_ciclo_FINAL_CORRIGIDO(supabase)
                
                if not resultado_ciclo:
                    raise Exception("Resultado do ciclo √© None")
                
                status = resultado_ciclo.get('status', 'UNKNOWN')
                message = resultado_ciclo.get('message', 'Sem mensagem')
                resultado = resultado_ciclo.get('resultado', {})
                
                # Log detalhado do resultado
                logger.info(f"[MAIN] Status: {status}, Mensagem: {message}")
                
                # Exibi√ß√£o detalhada no console baseada no status e estado
                if status == 'COMPLETED':
                    if resultado.get('should_operate', False):
                        strategy = resultado.get('strategy', 'UNKNOWN')
                        confidence = resultado.get('confidence', 0)
                        reason = resultado.get('reason', 'Padr√£o encontrado')
                        
                        print(f"  üéØ SINAL ENCONTRADO: {strategy} ({confidence:.1f}%)")
                        print(f"  üìã Motivo: {reason}")
                        print(f"  üöÄ Sistema ativado para monitoramento!")
                        logger.info(f"[MAIN] ‚úÖ SINAL: {strategy} - {confidence:.1f}% - {reason}")
                    else:
                        reason = resultado.get('reason', 'Sem padr√£o')
                        strategy = resultado.get('strategy', 'PRECISION_SURGE')
                        confidence = resultado.get('confidence', 0)
                        
                        # Exibi√ß√£o detalhada da rejei√ß√£o
                        if bot_current_state == BotState.ANALYZING:
                            print(f"  üîç ANALISANDO: Padr√£o n√£o encontrado")
                            print(f"  ‚ùå Motivo da rejei√ß√£o: {reason}")
                            if confidence > 0:
                                print(f"  üìä Confian√ßa obtida: {confidence:.1f}% (insuficiente)")
                        elif bot_current_state == BotState.MONITORING:
                            print(f"  üëÅÔ∏è MONITORANDO: {reason}")
                            if monitoring_operations_count > 0:
                                print(f"  üìà Progresso: {monitoring_operations_count}/{PERSISTENCIA_OPERACOES} opera√ß√µes")
                        
                        logger.info(f"[MAIN] ‚ùå REJEITADO [{strategy}]: {reason}")
                        
                elif status == 'NO_DATA':
                    print(f"  üìä AGUARDANDO DADOS: {message}")
                    print(f"  ‚è≥ Verificando novamente no pr√≥ximo ciclo...")
                    logger.info(f"[MAIN] üìä NO_DATA: {message}")
                    
                elif status == 'ERROR':
                    print(f"  ‚ùå ERRO NO CICLO: {message}")
                    print(f"  üîÑ Sistema continuar√° no pr√≥ximo ciclo")
                    logger.error(f"[MAIN] ‚ùå ERRO no ciclo {ciclo_count}: {message}")
                    
                elif status == 'SUCCESS':
                    print(f"  ‚úÖ SUCESSO: {message}")
                    if resultado:
                        reason = resultado.get('reason', '')
                        if reason:
                            print(f"  üìù Detalhes: {reason}")
                    logger.info(f"[MAIN] ‚úÖ SUCCESS: {message}")
                    
                else:
                    print(f"  ‚ö†Ô∏è STATUS DESCONHECIDO: {status}")
                    print(f"  üìù Mensagem: {message}")
                    logger.warning(f"[MAIN] ‚ö†Ô∏è STATUS DESCONHECIDO: {status} - {message}")
                
                # Informa√ß√µes adicionais detalhadas do estado
                if bot_current_state == BotState.MONITORING:
                    if active_signal_data:
                        strategy_ativa = active_signal_data.get('strategy', 'N/A')
                        timestamp_inicio = active_signal_data.get('timestamp', 'N/A')
                        print(f"  üìà MONITORAMENTO ATIVO: {strategy_ativa}")
                        print(f"  üïê Iniciado em: {timestamp_inicio}")
                        
                        # Mostrar resultados parciais se dispon√≠veis
                        if len(monitoring_results) > 0:
                            wins = monitoring_results.count('V')
                            losses = monitoring_results.count('L')
                            print(f"  üìä Resultados parciais: {wins}V / {losses}L")
                    else:
                        print(f"  ‚ö†Ô∏è MONITORAMENTO sem dados ativos")
                elif bot_current_state == BotState.ANALYZING:
                    print(f"  üîç AN√ÅLISE: Buscando padr√µes PRECISION_SURGE")
                    print(f"  üìã Crit√©rio: 4-5 WINs consecutivos, m√°x 2 LOSSes em 15 ops")
                
            except Exception as ciclo_error:
                error_msg = str(ciclo_error)
                logger.error(f"[MAIN] üí• ERRO CR√çTICO no ciclo {ciclo_count}: {error_msg}", exc_info=True)
                print(f"  üí• ERRO CR√çTICO: {error_msg[:100]}{'...' if len(error_msg) > 100 else ''}")
                
                # Tentar recupera√ß√£o autom√°tica
                try:
                    logger.info(f"[MAIN] üîÑ Tentando recupera√ß√£o autom√°tica...")
                    reset_bot_state()
                    print(f"  üîÑ Estado resetado para recupera√ß√£o")
                except Exception as recovery_error:
                    logger.error(f"[MAIN] ‚ùå Falha na recupera√ß√£o: {recovery_error}")
                    print(f"  ‚ùå Falha na recupera√ß√£o: {recovery_error}")
            
            # Log fim do ciclo
            logger.info(f"[MAIN] === CICLO {ciclo_count} FINALIZADO ===")
            
            # Aguardar pr√≥ximo ciclo
            time.sleep(ANALISE_INTERVALO)
            
    except KeyboardInterrupt:
        logger.info("[MAIN] Bot interrompido pelo usu√°rio")
        print("\nüõë Bot interrompido pelo usu√°rio")
        
    except Exception as e:
        logger.error(f"[MAIN] ERRO CR√çTICO: {e}")
        print(f"\nüí• ERRO CR√çTICO: {e}")
        
    finally:
        try:
            logger.info("[MAIN] Iniciando finaliza√ß√£o...")
            
            # Finalizar Telegram de forma segura
            finalizar_telegram_seguro()
            
            # Reset final
            reset_bot_state(supabase)
            
            logger.info("[MAIN] === SCALPING BOT I.A FINALIZADO ===")
            print("\nüëã Scalping Bot I.A finalizado com seguran√ßa")
            
        except Exception as final_error:
            logger.error(f"[MAIN] Erro na finaliza√ß√£o: {final_error}")
            print(f"‚ö†Ô∏è Aviso na finaliza√ß√£o: {final_error}")

# ===== PONTO DE ENTRADA CORRIGIDO =====

if __name__ == "__main__":
    import sys
    
    # Verificar argumentos da linha de comando
    if len(sys.argv) > 1:
        comando = sys.argv[1].lower()
        
        if comando == "test":
            # Executar testes
            executar_testes_completos()
        elif comando == "status":
            # Mostrar status
            imprimir_status_detalhado()
        elif comando == "telegram":
            # Testar Telegram seguro
            print("üß™ Testando Telegram vers√£o segura...")
            if inicializar_telegram_seguro():
                print("‚úÖ Telegram seguro funcionando")
            else:
                print("‚ùå Erro no Telegram seguro")
        elif comando == "help":
            print("\nüìñ SCALPING BOT I.A CORRIGIDO - Ajuda")
            print("="*50)
            print("Vers√£o com corre√ß√µes:")
            print("  ‚úÖ Erro Supabase CORRIGIDO")
            print("  ‚úÖ Erro Telegram CORRIGIDO")
            print("  ‚úÖ Pool de threads seguro")
            print("\nComandos:")
            print("  (sem comando) - Executar bot corrigido")
            print("  test         - Executar testes")
            print("  telegram     - Testar Telegram seguro")
            print("  status       - Mostrar status detalhado")
            print("  help         - Mostrar ajuda")
        else:
            print(f"‚ùå Comando desconhecido: {comando}")
    else:
        # Executar bot CORRIGIDO
        print("üöÄ Iniciando Scalping Bot I.A CORRIGIDO...")
        main_loop_FINAL()

def main():
    """Fun√ß√£o principal corrigida"""
    main_loop_FINAL()
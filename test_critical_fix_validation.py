#!/usr/bin/env python3
"""
Teste de valida√ß√£o da corre√ß√£o cr√≠tica do sistema de confirma√ß√£o.
Verifica se todas as modifica√ß√µes solicitadas foram implementadas.
"""

import re
import os

def test_critical_fix():
    """Valida se a corre√ß√£o cr√≠tica foi implementada corretamente."""
    
    file_path = "tunderbotalavanca.py"
    
    if not os.path.exists(file_path):
        print("‚ùå ERRO: Arquivo tunderbotalavanca.py n√£o encontrado")
        return False
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    print("üîç VALIDA√á√ÉO DA CORRE√á√ÉO CR√çTICA DO SISTEMA DE CONFIRMA√á√ÉO")
    print("=" * 70)
    
    # Teste 1: Verificar otimiza√ß√£o do log de risco (s√≥ loga se mudou de estado)
    print("\n1. Verificando otimiza√ß√£o do log de risco...")
    
    risk_pattern = r'if not self\.aguardando_confirmacao:\s*#.*\n\s*self\.aguardando_confirmacao = True\s*\n\s*logger\.info\(f"üõ°Ô∏è D√çGITO DE RISCO DETECTADO'
    if re.search(risk_pattern, content, re.MULTILINE):
        print("‚úÖ Otimiza√ß√£o do log de risco implementada (s√≥ loga se mudou de estado)")
        test1_passed = True
    else:
        print("‚ùå Otimiza√ß√£o do log de risco n√£o encontrada")
        test1_passed = False
    
    # Teste 2: Verificar coment√°rio de corre√ß√£o atualizado
    print("\n2. Verificando coment√°rio de corre√ß√£o atualizado...")
    
    if "# ‚úÖ CORRIGIDO: N√ÉO fazer return aqui - continuar para l√≥gica probabil√≠stica" in content:
        print("‚úÖ Coment√°rio de corre√ß√£o atualizado corretamente")
        test2_passed = True
    else:
        print("‚ùå Coment√°rio de corre√ß√£o n√£o foi atualizado")
        test2_passed = False
    
    # Teste 3: Verificar t√≠tulo da ETAPA 2 atualizado
    print("\n3. Verificando t√≠tulo da ETAPA 2...")
    
    if "# ETAPA 2: SISTEMA DE CONFIRMA√á√ÉO (CORRIGIDO)" in content:
        print("‚úÖ T√≠tulo da ETAPA 2 atualizado para (CORRIGIDO)")
        test3_passed = True
    else:
        print("‚ùå T√≠tulo da ETAPA 2 n√£o foi atualizado")
        test3_passed = False
    
    # Teste 4: Verificar t√≠tulo da ETAPA 3 atualizado
    print("\n4. Verificando t√≠tulo da ETAPA 3...")
    
    if "# ETAPA 3: VERIFICAR SE AINDA EM MODO ESPERA" in content:
        print("‚úÖ T√≠tulo da ETAPA 3 atualizado corretamente")
        test4_passed = True
    else:
        print("‚ùå T√≠tulo da ETAPA 3 n√£o foi atualizado")
        test4_passed = False
    
    # Teste 5: Verificar log simplificado no final
    print("\n5. Verificando log simplificado...")
    
    if 'logger.debug(f"‚ùå Gatilho n√£o ativado - Loss={self.consecutive_losses}, Random={random_number}")' in content:
        print("‚úÖ Log simplificado implementado")
        test5_passed = True
    else:
        print("‚ùå Log n√£o foi simplificado")
        test5_passed = False
    
    # Teste 6: Verificar aus√™ncia do return problem√°tico
    print("\n6. Verificando aus√™ncia do return problem√°tico...")
    
    # Procurar pela se√ß√£o de confirma√ß√£o e verificar se n√£o h√° return
    confirmation_pattern = r'if self\.aguardando_confirmacao and last_digit < 8:(.*?)(?=\n\s*#|\n\s*if|\Z)'
    confirmation_match = re.search(confirmation_pattern, content, re.DOTALL)
    
    if confirmation_match:
        confirmation_section = confirmation_match.group(1)
        if 'return' not in confirmation_section:
            print("‚úÖ Return problem√°tico removido com sucesso")
            test6_passed = True
        else:
            print("‚ùå Return problem√°tico ainda presente")
            test6_passed = False
    else:
        print("‚ùå Se√ß√£o de confirma√ß√£o n√£o encontrada")
        test6_passed = False
    
    # Teste 7: Verificar estrutura completa das 4 etapas
    print("\n7. Verificando estrutura completa...")
    
    etapas_esperadas = [
        "# ETAPA 1: FILTRO DE SEGURAN√áA (FIEL AO XML)",
        "# ETAPA 2: SISTEMA DE CONFIRMA√á√ÉO (CORRIGIDO)",
        "# ETAPA 3: VERIFICAR SE AINDA EM MODO ESPERA",
        "# ETAPA 4: FILTRO PROBABIL√çSTICO (FIEL AO XML)"
    ]
    
    etapas_encontradas = 0
    for etapa in etapas_esperadas:
        if etapa in content:
            etapas_encontradas += 1
    
    if etapas_encontradas == 4:
        print("‚úÖ Todas as 4 etapas com t√≠tulos corretos presentes")
        test7_passed = True
    else:
        print(f"‚ùå Apenas {etapas_encontradas}/4 etapas encontradas")
        test7_passed = False
    
    # Resultado final
    print("\n" + "=" * 70)
    print("RESULTADO FINAL DA VALIDA√á√ÉO:")
    
    all_tests = [test1_passed, test2_passed, test3_passed, test4_passed, test5_passed, test6_passed, test7_passed]
    passed_tests = sum(all_tests)
    
    if passed_tests == 7:
        print("üéâ CORRE√á√ÉO CR√çTICA IMPLEMENTADA COM SUCESSO!")
        print("\n‚úÖ Todas as modifica√ß√µes solicitadas foram aplicadas:")
        print("   - Otimiza√ß√£o do log de risco (s√≥ loga se mudou de estado)")
        print("   - Return problem√°tico removido da se√ß√£o de confirma√ß√£o")
        print("   - Coment√°rios e t√≠tulos atualizados corretamente")
        print("   - Log simplificado implementado")
        print("   - Estrutura das 4 etapas mantida e corrigida")
        print("\nüöÄ O bot agora segue EXATAMENTE a l√≥gica do XML!")
        return True
    else:
        print(f"‚ùå {passed_tests}/7 valida√ß√µes passaram - CORRE√á√ÉO INCOMPLETA")
        return False

if __name__ == "__main__":
    test_critical_fix()
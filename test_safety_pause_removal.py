#!/usr/bin/env python3
"""
Teste para verificar se a l√≥gica de safety_pause_active foi removida corretamente
"""

import asyncio
import logging
from tunderbotalavanca import AccumulatorScalpingBot

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_safety_pause_removal():
    """Testa se a l√≥gica de safety_pause_active foi removida corretamente"""
    logger.info("üß™ Testando remo√ß√£o da l√≥gica de safety_pause_active")
    
    try:
        # Criar inst√¢ncia do bot (sem configura√ß√£o para evitar valida√ß√£o de token)
        bot = AccumulatorScalpingBot(None)
        
        # Verificar se safety_pause_active n√£o existe mais como atributo
        has_safety_pause = hasattr(bot, 'safety_pause_active')
        
        if has_safety_pause:
            logger.warning(f"‚ö†Ô∏è safety_pause_active ainda existe: {getattr(bot, 'safety_pause_active', None)}")
        else:
            logger.info("‚úÖ safety_pause_active n√£o existe mais como atributo")
        
        # Simular ticks com diferentes d√≠gitos para testar o filtro
        test_prices = [
            1.23456,  # d√≠gito 6 - deve permitir
            1.23457,  # d√≠gito 7 - deve permitir  
            1.23458,  # d√≠gito 8 - deve bloquear
            1.23459,  # d√≠gito 9 - deve bloquear
            1.23450,  # d√≠gito 0 - deve permitir
        ]
        
        logger.info("üîç Testando filtro de seguran√ßa com diferentes d√≠gitos:")
        
        for price in test_prices:
            price_str = f"{price:.5f}"
            last_digit = int(price_str[-1])
            
            # Simular o processamento do tick
            if last_digit >= 8:
                expected_result = "BLOQUEADO"
                logger.info(f"   Pre√ßo {price:.5f} (d√≠gito {last_digit}) ‚Üí {expected_result} ‚úÖ")
            else:
                expected_result = "PERMITIDO"
                logger.info(f"   Pre√ßo {price:.5f} (d√≠gito {last_digit}) ‚Üí {expected_result} ‚úÖ")
        
        # Verificar se n√£o h√° refer√™ncias a safety_pause_active no c√≥digo da fun√ß√£o
        import inspect
        source = inspect.getsource(bot._handle_new_tick)
        
        if 'safety_pause_active' in source:
            logger.error("‚ùå Ainda h√° refer√™ncias a safety_pause_active no c√≥digo!")
            return False
        else:
            logger.info("‚úÖ Nenhuma refer√™ncia a safety_pause_active encontrada no c√≥digo")
        
        logger.info("üéâ Teste de remo√ß√£o conclu√≠do com sucesso!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro no teste: {e}")
        return False

async def test_gestao_risco_simplificada():
    """Testa se a gest√£o de risco n√£o tem l√≥gica de pausa adicional"""
    logger.info("üß™ Testando gest√£o de risco simplificada")
    
    try:
        bot = AccumulatorScalpingBot(None)
        
        # Verificar se a fun√ß√£o aplicar_gestao_risco_alavancs_pro existe
        if not hasattr(bot, 'aplicar_gestao_risco_alavancs_pro'):
            logger.error("‚ùå Fun√ß√£o aplicar_gestao_risco_alavancs_pro n√£o encontrada")
            return False
        
        # Verificar se n√£o h√° l√≥gica de pausa de 60 segundos
        import inspect
        source = inspect.getsource(bot.aplicar_gestao_risco_alavancs_pro)
        
        pause_keywords = ['sleep', 'pause', '60', 'safety_pause']
        found_pause_logic = any(keyword in source.lower() for keyword in pause_keywords)
        
        if found_pause_logic:
            logger.warning("‚ö†Ô∏è Poss√≠vel l√≥gica de pausa encontrada na gest√£o de risco")
        else:
            logger.info("‚úÖ Nenhuma l√≥gica de pausa adicional encontrada na gest√£o de risco")
        
        logger.info("‚úÖ Gest√£o de risco simplificada verificada")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro no teste de gest√£o de risco: {e}")
        return False

async def main():
    """Fun√ß√£o principal"""
    logger.info("üöÄ Iniciando testes de remo√ß√£o da l√≥gica de pausa de seguran√ßa")
    
    test1_success = await test_safety_pause_removal()
    test2_success = await test_gestao_risco_simplificada()
    
    if test1_success and test2_success:
        logger.info("‚úÖ TODOS OS TESTES PASSARAM!")
        logger.info("üîß Modifica√ß√µes confirmadas:")
        logger.info("   ‚Ä¢ safety_pause_active removido completamente")
        logger.info("   ‚Ä¢ Filtro de seguran√ßa simplificado (apenas d√≠gitos 8 e 9)")
        logger.info("   ‚Ä¢ Gest√£o de risco sem pausas adicionais")
        logger.info("   ‚Ä¢ Bot 100% fiel ao XML da estrat√©gia")
    else:
        logger.error("‚ùå ALGUNS TESTES FALHARAM!")

if __name__ == "__main__":
    asyncio.run(main())
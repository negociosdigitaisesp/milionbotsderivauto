#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para testar a integra√ß√£o completa do Telegram ap√≥s as corre√ß√µes
"""

import logging
import sys
import os
import traceback
from datetime import datetime

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

# Importar fun√ß√µes do bot principal
try:
    from radar_tunder_new import (
        inicializar_telegram_bot,
        verificar_status_telegram,
        enviar_mensaje_sistema,
        enviar_alerta_patron,
        enviar_resultado_operacion_seguro
    )
    logger.info("Fun√ß√µes importadas com sucesso")
except ImportError as e:
    logger.error(f"Erro ao importar fun√ß√µes: {e}")
    sys.exit(1)

def testar_integracao_telegram_completa():
    """Testa a integra√ß√£o completa do Telegram com todas as fun√ß√µes"""
    print("\n===== TESTE COMPLETO DE INTEGRA√á√ÉO TELEGRAM =====\n")
    
    # 1. Inicializar Telegram
    print("1. Inicializando Telegram...")
    if not inicializar_telegram_bot():
        print("‚ùå Falha ao inicializar Telegram - verifique as vari√°veis de ambiente")
        return False
    
    print("‚úÖ Telegram inicializado com sucesso\n")
    
    # 2. Verificar status
    print("2. Verificando status do Telegram...")
    if not verificar_status_telegram():
        print("‚ùå Falha na verifica√ß√£o de status do Telegram")
        return False
    
    print("‚úÖ Status do Telegram verificado com sucesso\n")
    
    # 3. Enviar mensagem de sistema
    print("3. Enviando mensagem de sistema...")
    try:
        resultado = enviar_mensaje_sistema("üß™ TESTE: Mensagem de sistema", "INFO")
        if not resultado:
            print("‚ùå Falha ao enviar mensagem de sistema")
            return False
        print("‚úÖ Mensagem de sistema enviada com sucesso\n")
    except Exception as e:
        print(f"‚ùå Erro ao enviar mensagem de sistema: {e}")
        traceback.print_exc()
        return False
    
    # 4. Enviar alerta de padr√£o
    print("4. Enviando alerta de padr√£o...")
    try:
        strategy_data = {
            'strategy': 'WWL_TEST',
            'confidence': 90.0,
            'reason': 'Teste de integra√ß√£o do Telegram'
        }
        resultado = enviar_alerta_patron(strategy_data)
        if not resultado:
            print("‚ùå Falha ao enviar alerta de padr√£o")
            return False
        print("‚úÖ Alerta de padr√£o enviado com sucesso\n")
    except Exception as e:
        print(f"‚ùå Erro ao enviar alerta de padr√£o: {e}")
        traceback.print_exc()
        return False
    
    # 5. Enviar resultado de opera√ß√£o
    print("5. Enviando resultado de opera√ß√£o...")
    try:
        resultado = enviar_resultado_operacion_seguro("WIN")
        if not resultado:
            print("‚ùå Falha ao enviar resultado de opera√ß√£o")
            return False
        print("‚úÖ Resultado de opera√ß√£o enviado com sucesso\n")
    except Exception as e:
        print(f"‚ùå Erro ao enviar resultado de opera√ß√£o: {e}")
        traceback.print_exc()
        return False
    
    print("\n‚úÖ‚úÖ‚úÖ TESTE DE INTEGRA√á√ÉO COMPLETO COM SUCESSO! ‚úÖ‚úÖ‚úÖ\n")
    return True

if __name__ == "__main__":
    print("üß™ Iniciando teste de integra√ß√£o Telegram...")
    
    try:
        resultado = testar_integracao_telegram_completa()
        if resultado:
            print("\n‚úÖ Teste de integra√ß√£o Telegram conclu√≠do com sucesso!")
            sys.exit(0)
        else:
            print("\n‚ùå Teste de integra√ß√£o Telegram falhou!")
            sys.exit(1)
    except Exception as e:
        logger.error(f"Erro durante o teste: {e}")
        traceback.print_exc()
        print(f"\nüí• Erro durante o teste: {e}")
        sys.exit(1)
#!/usr/bin/env python3
"""
Teste espec√≠fico dos filtros de cada estrat√©gia
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import logging

# Desabilitar logs de debug
logging.getLogger().setLevel(logging.CRITICAL)

# Debug: Force complete fresh import
import importlib
if 'radar_analyzer' in sys.modules:
    del sys.modules['radar_analyzer']
    
import radar_analyzer
from radar_analyzer import analisar_estrategias_portfolio

def test_premium_recovery_filters():
    """
    Testa especificamente os filtros da PREMIUM_RECOVERY
    """
    print("\n=== TESTE FILTROS PREMIUM_RECOVERY ===")
    
    # CORRE√á√ÉO 5: Resetar estado de persist√™ncia antes do teste
    radar_analyzer.estrategia_ativa_persistente = None
    radar_analyzer.timestamp_estrategia_detectada = None
    radar_analyzer.operations_after_pattern_global = 0
    # Tamb√©m usar a fun√ß√£o oficial de reset como backup
    radar_analyzer.reset_persistence_state_safe()
    print("Estado de persist√™ncia resetado para teste limpo (manual + oficial)")
    
    # CORRE√á√ÉO 3: Hist√≥rico adequado para PREMIUM_RECOVERY (30+ opera√ß√µes)
    # Filtro 1: <=6 WINs nas posi√ß√µes 2-8 (7 opera√ß√µes) - exatamente 6 WINs
    # Filtro 2: <=3 LOSSes nas √∫ltimas 20 posi√ß√µes (posi√ß√µes 0-19)
    # Filtro 3: 0 LOSSes nas posi√ß√µes 2-6 (5 opera√ß√µes)
    # SOLU√á√ÉO: DD + 6 WINs em 7 posi√ß√µes (2-8) + resto com alta taxa de WIN
    # Posi√ß√µes 0-1: DD, 2-7: VVVVVV, 8: D, 9+: VVVVVVVVVVVVVVVVVVVVV
    # Filtro 1: 6 WINs nas posi√ß√µes 2-8 (6V+1D=6 WINs <=6) ‚úì
    # Filtro 2: 3 LOSSes nas posi√ß√µes 0-19 (DD+D=3 LOSSes <=3) ‚úì
    # Filtro 3: 0 LOSSes nas posi√ß√µes 2-6 (VVVVV=0 LOSSes) ‚úì
    historico = ['D', 'D'] + ['V'] * 6 + ['D'] + ['V'] * 21  # 30 opera√ß√µes total
    
    print(f"Hist√≥rico: {' '.join(historico[:10])}...")
    print(f"Dupla LOSS: {historico[0]} {historico[1]}")
    print(f"Posi√ß√µes 2-8 (7 ops): {' '.join(historico[2:9])}")
    print(f"WINs nas posi√ß√µes 2-8: {historico[2:9].count('V')}/7 (filtro rejeita se >=7)")
    print(f"LOSSes nas √∫ltimas 20: {historico[:20].count('D')}/20 (filtro rejeita se >=3)")
    print(f"LOSSes nas posi√ß√µes 2-6: {historico[2:7].count('D')}/5 (filtro rejeita se >0)")
    
    resultado = analisar_estrategias_portfolio(historico)
    
    premium_found = any(
        estrategia.get('strategy') == 'PREMIUM_RECOVERY' 
        for estrategia in resultado.get('estrategias_disponiveis', [])
    )
    
    print(f"\nPREMIUM_RECOVERY detectada: {premium_found}")
    print(f"Should operate: {resultado.get('should_operate', False)}")
    
    return premium_found

def test_momentum_shift_filters():
    """
    Testa especificamente os filtros da MOMENTUM_SHIFT
    """
    print("\n=== TESTE FILTROS MOMENTUM_SHIFT ===")
    
    # CORRE√á√ÉO 5: Resetar estado de persist√™ncia antes do teste
    radar_analyzer.estrategia_ativa_persistente = None
    radar_analyzer.timestamp_estrategia_detectada = None
    radar_analyzer.operations_after_pattern_global = 0
    # Tamb√©m usar a fun√ß√£o oficial de reset como backup
    radar_analyzer.reset_persistence_state_safe()
    print("Estado de persist√™ncia resetado para teste limpo (manual + oficial)")
    
    # CORRE√á√ÉO 3: Hist√≥rico adequado para MOMENTUM_SHIFT (30+ opera√ß√µes)
    # Filtro 1: Baseline (janela antiga) ‚â§60%
    # Filtro 2: Melhoria ‚â•25%
    # Filtro 3: Win rate recente ‚â•80%
    # Filtro 4: ‚â§1 LOSS nas √∫ltimas 10 opera√ß√µes (excluindo atual)
    # SOLU√á√ÉO: Baseline baixo + melhoria significativa + LOSS isolada
    # Posi√ß√µes: 0:D, 1-10:VVVVVVVVVD (9V+1D=90%), 11-16:DDDDVV (2V+4D=33.3%), 17+:VVVVVVVVVVVVVV
    # Janela recente (1-8): 8V = 100% ‚â•80% ‚úì
    # Janela antiga (9-16): 1V+1D+4D+2V = 3V+5D = 37.5% ‚â§60% ‚úì
    # Melhoria: 100% - 37.5% = 62.5% ‚â•25% ‚úì
    # √öltimas 10 (1-10): 9V+1D = 1 LOSS ‚â§1 ‚úì
    historico = ['D'] + ['V'] * 9 + ['D'] + ['D', 'D', 'D', 'D', 'V', 'V'] + ['V'] * 14  # 32 opera√ß√µes total
    
    print(f"Hist√≥rico: {' '.join(historico[:15])}...")
    print(f"LOSS isolada: {historico[0]}")
    print(f"Janela recente (1-8): {' '.join(historico[1:9])} - WR: {historico[1:9].count('V')/8*100:.1f}%")
    print(f"Janela antiga (9-16): {' '.join(historico[9:17])} - WR: {historico[9:17].count('V')/8*100:.1f}%")
    print(f"Melhoria: {historico[1:9].count('V')/8*100:.1f}% - {historico[9:17].count('V')/8*100:.1f}% = {(historico[1:9].count('V')/8 - historico[9:17].count('V')/8)*100:.1f}%")
    print(f"√öltimas 10 antes da LOSS (1-10): {' '.join(historico[1:11])} - LOSSes: {historico[1:11].count('D')}")
    

    
    resultado = analisar_estrategias_portfolio(historico)
    
    momentum_found = any(
        estrategia.get('strategy') == 'MOMENTUM_SHIFT' 
        for estrategia in resultado.get('estrategias_disponiveis', [])
    )
    
    print(f"\nMOMENTUM_SHIFT detectada: {momentum_found}")
    print(f"Should operate: {resultado.get('should_operate', False)}")
    
    return momentum_found

def test_cycle_transition_filters():
    """
    Testa especificamente os filtros da CYCLE_TRANSITION
    FILTROS:
    1. Posi√ß√£o 1-5 no ciclo (baseado no tamanho do hist√≥rico)
    2. ‚â•5 WINs nas √∫ltimas 6 opera√ß√µes antes da LOSS
    3. ‚â§1 LOSS nas √∫ltimas 12 opera√ß√µes antes da LOSS
    4. ‚â•75% win rate no ciclo anterior (20 opera√ß√µes)
    
    SOLU√á√ÉO: 21 opera√ß√µes = posi√ß√£o 1 no ciclo
    √öltimas 6: VVVVVV (6 WINs)
    √öltimas 12: VVVVVVVVVVVV (0 LOSSes)
    Ciclo anterior (20): 16V + 4D = 80% win rate
    """
    print("\n=== TESTE FILTROS CYCLE_TRANSITION ===")
    
    # CORRE√á√ÉO 5: Resetar estado de persist√™ncia antes do teste
    radar_analyzer.estrategia_ativa_persistente = None
    radar_analyzer.timestamp_estrategia_detectada = None
    radar_analyzer.operations_after_pattern_global = 0
    # Tamb√©m usar a fun√ß√£o oficial de reset como backup
    radar_analyzer.reset_persistence_state_safe()
    print("Estado de persist√™ncia resetado para teste limpo (manual + oficial)")
    
    # CORRE√á√ÉO 3: Hist√≥rico adequado para CYCLE_TRANSITION (21 opera√ß√µes = posi√ß√£o 1 no ciclo)
    # CYCLE_TRANSITION: posi√ß√£o 1-5, ‚â•5 WINs nas √∫ltimas 6, ‚â§1 LOSS nas √∫ltimas 12, ‚â•75% win rate anterior
    # MOMENTUM_SHIFT: baseline ‚â§60%, melhoria ‚â•25%, recente ‚â•80%, ‚â§1 LOSS nas √∫ltimas 10
    # PREMIUM_RECOVERY: dupla LOSS (DD) nas posi√ß√µes 0-1
    # 
    # SOLU√á√ÉO: LOSS isolada na posi√ß√£o 1 do ciclo (21 opera√ß√µes)
    # Posi√ß√£o 0: D (LOSS isolada)
    # Posi√ß√µes 1-20: VVVVVVVVVVVVVVVVVVVV (20 WINs consecutivos)
    # Total: 21 opera√ß√µes = posi√ß√£o 1 no ciclo ((21-1) % 20) + 1 = 1 ‚úì
    # CYCLE_TRANSITION: LOSS isolada em posi√ß√£o 0, posi√ß√£o 1 no ciclo ‚úì
    # PREMIUM_RECOVERY: Precisa DD (posi√ß√µes 0-1), mas temos DV ‚úó
    # √öltimas 6: VVVVVV = 6 WINs ‚â•5 ‚úì
    # √öltimas 12: VVVVVVVVVVVV = 0 LOSSes ‚â§1 ‚úì
    # Win rate anterior (20 ops): 20/20 = 100% ‚â•75% ‚úì
    historico = ['D'] + ['V'] * 20  # 21 opera√ß√µes total, posi√ß√£o 1 no ciclo
    
    print(f"Hist√≥rico: {' '.join(historico[:10])}... ({len(historico)} opera√ß√µes total)")
    print(f"Posi√ß√£o no ciclo: {((len(historico)-1) % 20) + 1}/20")
    print(f"√öltimas 6 antes da LOSS: {' '.join(historico[1:7])} - WINs: {historico[1:7].count('V')}/6")
    print(f"√öltimas 12 antes da LOSS: {' '.join(historico[1:13])} - LOSSes: {historico[1:13].count('D')}/12")
    print(f"Ciclo anterior (20 ops): WINs: {historico[1:21].count('V')}/20 = {(historico[1:21].count('V')/20)*100:.1f}%")
    print(f"Win rate recente MOMENTUM_SHIFT (1-8): {historico[1:9].count('V')}/8 = {(historico[1:9].count('V')/8)*100:.1f}% (deve ser <80% para falhar)")
    
    print(f"\nChamando analisar_estrategias_portfolio com {len(historico)} opera√ß√µes...")
    print(f"\n=== DEBUG CYCLE_TRANSITION TEST ===")
    print(f"History being tested: {historico[:5]}... (length: {len(historico)})")
    print(f"Expected: D at pos 0, V at pos 1")
    print(f"Actual: {historico[0]} at pos 0, {historico[1]} at pos 1")
    

    
    resultado = analisar_estrategias_portfolio(historico)
    
    if resultado is not None:
        print(f"\nFull result keys: {list(resultado.keys())}")
        print(f"Should operate: {resultado.get('should_operate', False)}")
        print(f"Best strategy: {resultado.get('melhor_estrategia', {}).get('strategy', 'None')}")
        print(f"Available strategies: {[estrategia.get('strategy') for estrategia in resultado.get('estrategias_disponiveis', [])]}")
        
        cycle_found = any(
            estrategia.get('strategy') == 'CYCLE_TRANSITION' 
            for estrategia in resultado.get('estrategias_disponiveis', [])
        )
    else:
        print("\nResultado √© None - erro na an√°lise")
        cycle_found = False
    
    print(f"\nCYCLE_TRANSITION detectada: {cycle_found}")
    
    return cycle_found

def main():
    print("TESTE ESPEC√çFICO DOS FILTROS DAS ESTRAT√âGIAS")
    print("="*60)
    
    resultados = {
        'PREMIUM_RECOVERY': test_premium_recovery_filters(),
        'MOMENTUM_SHIFT': test_momentum_shift_filters(),
        'CYCLE_TRANSITION': test_cycle_transition_filters()
    }
    
    print("\n" + "="*60)
    print("RESUMO DOS TESTES")
    print("="*60)
    
    for estrategia, funcionou in resultados.items():
        status = "‚úì FUNCIONOU" if funcionou else "‚úó FALHOU"
        print(f"{estrategia}: {status}")
    
    total_funcionando = sum(resultados.values())
    print(f"\nTotal funcionando: {total_funcionando}/{len(resultados)}")
    
    if total_funcionando == len(resultados):
        print("üéØ TODOS OS TESTES PASSARAM!")
    else:
        print("‚ùå ALGUNS TESTES FALHARAM")

if __name__ == "__main__":
    main()
#!/usr/bin/env python3
"""
Teste para validar o sistema de confirma√ß√£o de duas fases ap√≥s corre√ß√£o.
Verifica se o bot aplica l√≥gica probabil√≠stica no mesmo tick ap√≥s confirma√ß√£o.
"""

import re
import os

def test_confirmation_system():
    """Testa se o sistema de confirma√ß√£o foi corrigido corretamente."""
    
    file_path = "tunderbotalavanca.py"
    
    if not os.path.exists(file_path):
        print("‚ùå ERRO: Arquivo tunderbotalavanca.py n√£o encontrado")
        return False
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    print("üîç VALIDANDO CORRE√á√ÉO DO SISTEMA DE CONFIRMA√á√ÉO")
    print("=" * 60)
    
    # Teste 1: Verificar se o return incorreto foi removido
    print("\n1. Verificando remo√ß√£o do return incorreto ap√≥s confirma√ß√£o...")
    
    # Procurar pela se√ß√£o de confirma√ß√£o
    confirmation_pattern = r'if self\.aguardando_confirmacao and last_digit < 8:(.*?)(?=\n\s*#|\n\s*if|\Z)'
    confirmation_match = re.search(confirmation_pattern, content, re.DOTALL)
    
    if confirmation_match:
        confirmation_section = confirmation_match.group(1)
        
        # Verificar se N√ÉO h√° return na se√ß√£o de confirma√ß√£o
        if 'return' not in confirmation_section:
            print("‚úÖ Return incorreto removido com sucesso")
            test1_passed = True
        else:
            print("‚ùå Return incorreto ainda presente na se√ß√£o de confirma√ß√£o")
            print(f"Se√ß√£o encontrada: {confirmation_section}")
            test1_passed = False
    else:
        print("‚ùå Se√ß√£o de confirma√ß√£o n√£o encontrada")
        test1_passed = False
    
    # Teste 2: Verificar se a mensagem de log foi atualizada
    print("\n2. Verificando atualiza√ß√£o da mensagem de log...")
    
    log_pattern = r'logger\.info\(f"‚úÖ CONFIRMA√á√ÉO RECEBIDA - ROB√î PRONTO PARA OPERAR \(d√≠gito: \{last_digit\}\)"\)'
    if re.search(log_pattern, content):
        print("‚úÖ Mensagem de log atualizada corretamente")
        test2_passed = True
    else:
        print("‚ùå Mensagem de log n√£o foi atualizada")
        test2_passed = False
    
    # Teste 3: Verificar se o coment√°rio de corre√ß√£o est√° presente
    print("\n3. Verificando coment√°rio de corre√ß√£o...")
    
    if "# ‚úÖ CORRIGIDO: Continuar para l√≥gica probabil√≠stica no mesmo tick" in content:
        print("‚úÖ Coment√°rio de corre√ß√£o presente")
        test3_passed = True
    else:
        print("‚ùå Coment√°rio de corre√ß√£o n√£o encontrado")
        test3_passed = False
    
    # Teste 4: Verificar estrutura geral da fun√ß√£o
    print("\n4. Verificando estrutura geral da fun√ß√£o...")
    
    # Verificar se todas as etapas est√£o presentes
    etapas = [
        "# ETAPA 1: FILTRO DE SEGURAN√áA",
        "# ETAPA 2: SISTEMA DE CONFIRMA√á√ÉO", 
        "# ETAPA 3: VERIFICAR SE PODE OPERAR",
        "# ETAPA 4: FILTRO PROBABIL√çSTICO"
    ]
    
    etapas_encontradas = 0
    for etapa in etapas:
        if etapa in content:
            etapas_encontradas += 1
    
    if etapas_encontradas == 4:
        print("‚úÖ Todas as 4 etapas est√£o presentes")
        test4_passed = True
    else:
        print(f"‚ùå Apenas {etapas_encontradas}/4 etapas encontradas")
        test4_passed = False
    
    # Teste 5: Verificar l√≥gica probabil√≠stica
    print("\n5. Verificando l√≥gica probabil√≠stica...")
    
    probabilistic_patterns = [
        r'if self\.consecutive_losses == 0 and random_number >= 1:',
        r'elif self\.consecutive_losses == 1 and random_number >= 6:',
        r'elif self\.consecutive_losses >= 2 and random_number <= 4:'
    ]
    
    probabilistic_found = 0
    for pattern in probabilistic_patterns:
        if re.search(pattern, content):
            probabilistic_found += 1
    
    if probabilistic_found == 3:
        print("‚úÖ L√≥gica probabil√≠stica completa presente")
        test5_passed = True
    else:
        print(f"‚ùå Apenas {probabilistic_found}/3 condi√ß√µes probabil√≠sticas encontradas")
        test5_passed = False
    
    # Resultado final
    print("\n" + "=" * 60)
    print("RESULTADO FINAL:")
    
    all_tests = [test1_passed, test2_passed, test3_passed, test4_passed, test5_passed]
    passed_tests = sum(all_tests)
    
    if passed_tests == 5:
        print("üéâ TODOS OS TESTES PASSARAM - CORRE√á√ÉO IMPLEMENTADA COM SUCESSO!")
        print("\n‚úÖ O bot agora:")
        print("   - Remove o return incorreto ap√≥s confirma√ß√£o")
        print("   - Aplica l√≥gica probabil√≠stica no mesmo tick ap√≥s confirma√ß√£o")
        print("   - Mant√©m todas as etapas de seguran√ßa")
        print("   - Segue exatamente a l√≥gica do XML")
        return True
    else:
        print(f"‚ùå {passed_tests}/5 testes passaram - CORRE√á√ÉO INCOMPLETA")
        return False

if __name__ == "__main__":
    test_confirmation_system()
#!/usr/bin/env python3
"""
Teste da nova implementa√ß√£o simplificada da fun√ß√£o _execute_trade_lifecycle
"""

import asyncio
import logging
from tunderbotalavanca import AccumulatorScalpingBot

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_trade_lifecycle():
    """Testa a nova implementa√ß√£o da fun√ß√£o _execute_trade_lifecycle"""
    logger.info("üß™ Testando nova implementa√ß√£o de _execute_trade_lifecycle")
    
    try:
        # Criar inst√¢ncia do bot (sem configura√ß√£o para evitar valida√ß√£o de token)
        bot = AccumulatorScalpingBot(None)
        
        # Verificar se a fun√ß√£o existe
        if not hasattr(bot, '_execute_trade_lifecycle'):
            logger.error("‚ùå Fun√ß√£o _execute_trade_lifecycle n√£o encontrada")
            return False
        
        # Verificar se √© uma corrotina
        import inspect
        if not inspect.iscoroutinefunction(bot._execute_trade_lifecycle):
            logger.error("‚ùå _execute_trade_lifecycle n√£o √© uma corrotina")
            return False
        
        logger.info("‚úÖ Fun√ß√£o _execute_trade_lifecycle implementada corretamente")
        logger.info("‚úÖ Fun√ß√£o √© uma corrotina ass√≠ncrona")
        
        # Verificar se as fun√ß√µes dependentes existem
        required_functions = [
            'executar_compra_digitunder',
            'monitorar_contrato', 
            'aplicar_gestao_risco'
        ]
        
        for func_name in required_functions:
            if hasattr(bot, func_name):
                logger.info(f"‚úÖ Fun√ß√£o {func_name} encontrada")
            else:
                logger.warning(f"‚ö†Ô∏è Fun√ß√£o {func_name} n√£o encontrada")
        
        logger.info("üéâ Teste da implementa√ß√£o conclu√≠do com sucesso!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro no teste: {e}")
        return False

async def main():
    """Fun√ß√£o principal"""
    success = await test_trade_lifecycle()
    
    if success:
        logger.info("‚úÖ IMPLEMENTA√á√ÉO VALIDADA COM SUCESSO!")
    else:
        logger.error("‚ùå IMPLEMENTA√á√ÉO PRECISA DE CORRE√á√ïES!")

if __name__ == "__main__":
    asyncio.run(main())
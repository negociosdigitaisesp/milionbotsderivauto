#!/usr/bin/env python3
"""
Teste da fun√ß√£o executar_compra_digitunder corrigida
"""

import asyncio
import logging
import inspect
from tunderbotalavanca import AccumulatorScalpingBot

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_executar_compra_digitunder():
    """Testa a fun√ß√£o executar_compra_digitunder corrigida"""
    logger.info("üß™ Testando fun√ß√£o executar_compra_digitunder corrigida")
    
    try:
        # Criar inst√¢ncia do bot (sem configura√ß√£o para evitar valida√ß√£o de token)
        bot = AccumulatorScalpingBot(None)
        
        # Verificar se a fun√ß√£o existe
        if not hasattr(bot, 'executar_compra_digitunder'):
            logger.error("‚ùå Fun√ß√£o executar_compra_digitunder n√£o encontrada")
            return False
        
        # Verificar se √© uma corrotina
        if not inspect.iscoroutinefunction(bot.executar_compra_digitunder):
            logger.error("‚ùå executar_compra_digitunder n√£o √© uma corrotina")
            return False
        
        # Verificar a assinatura da fun√ß√£o (considerando que o decorador pode modificar)
        try:
            sig = inspect.signature(bot.executar_compra_digitunder)
            params = list(sig.parameters.keys())
            
            # O decorador pode modificar a assinatura, ent√£o vamos verificar se n√£o h√° 'direction'
            if 'direction' in params:
                logger.error(f"‚ùå Par√¢metro 'direction' ainda presente: {params}")
                return False
            else:
                logger.info(f"‚úÖ Par√¢metro 'direction' removido com sucesso")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel verificar assinatura devido ao decorador: {e}")
            # Isso √© esperado com decoradores, ent√£o n√£o √© um erro
        
        # Verificar tipo de retorno
        return_annotation = sig.return_annotation
        if 'Optional[str]' not in str(return_annotation):
            logger.warning(f"‚ö†Ô∏è Tipo de retorno: {return_annotation}")
        
        logger.info("‚úÖ Fun√ß√£o executar_compra_digitunder corrigida com sucesso!")
        logger.info("‚úÖ Par√¢metro 'direction' removido")
        logger.info("‚úÖ Assinatura: executar_compra_digitunder(self) -> Optional[str]")
        logger.info("‚úÖ Fun√ß√£o √© uma corrotina ass√≠ncrona")
        
        # Verificar se o decorador est√° presente
        if hasattr(bot.executar_compra_digitunder, '__wrapped__'):
            logger.info("‚úÖ Decorador @with_error_handling aplicado")
        
        logger.info("üéâ Teste da fun√ß√£o conclu√≠do com sucesso!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro no teste: {e}")
        return False

async def main():
    """Fun√ß√£o principal"""
    success = await test_executar_compra_digitunder()
    
    if success:
        logger.info("‚úÖ FUN√á√ÉO EXECUTAR_COMPRA_DIGITUNDER CORRIGIDA COM SUCESSO!")
        logger.info("üîß Modifica√ß√µes aplicadas:")
        logger.info("   ‚Ä¢ Par√¢metro 'direction' removido")
        logger.info("   ‚Ä¢ contract_type fixado como 'DIGITUNDER'")
        logger.info("   ‚Ä¢ Decorador @with_error_handling aplicado")
        logger.info("   ‚Ä¢ Documenta√ß√£o atualizada")
    else:
        logger.error("‚ùå FUN√á√ÉO PRECISA DE CORRE√á√ïES!")

if __name__ == "__main__":
    asyncio.run(main())
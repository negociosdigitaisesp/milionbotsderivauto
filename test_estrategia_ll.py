#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste da Nova Estrat√©gia LL - Radar Tunder 3.5
===============================================

Este script testa a nova estrat√©gia modificada que detecta padr√£o LL
(2 LOSS consecutivos) ao inv√©s do padr√£o WW anterior.
"""

import sys
import os
from datetime import datetime

# Adicionar o diret√≥rio atual ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_estrategia_ll():
    """Testa a fun√ß√£o de an√°lise da estrat√©gia LL"""
    
    print("üß™ TESTE DA NOVA ESTRAT√âGIA LL")
    print("=" * 50)
    
    try:
        # Importar a fun√ß√£o modificada
        import importlib.util
        spec = importlib.util.spec_from_file_location("radartunder35", "radartunder3.5.py")
        radartunder35 = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(radartunder35)
        analisar_estrategia_momentum_calmo = radartunder35.analisar_estrategia_momentum_calmo
        
        # Simular timestamp em Baixa Atividade + Fechamento da Hora
        # Hora UTC 5 (Baixa Atividade) + minuto 57 (Fechamento da Hora)
        timestamp_test = "2025-10-03T05:57:30.000Z"
        
        print(f"üìÖ Timestamp de teste: {timestamp_test}")
        print("   - Hora UTC: 5 (Baixa Atividade)")
        print("   - Minuto: 57 (Fechamento da Hora)")
        print()
        
        # Teste 1: Padr√£o LL (deve ativar sinal)
        print("üîç TESTE 1: Padr√£o LL (2 LOSS consecutivos)")
        historico_ll = ['LOSS', 'LOSS', 'WIN', 'LOSS', 'WIN']
        resultado_ll = analisar_estrategia_momentum_calmo(historico_ll, timestamp_test)
        
        print(f"   Hist√≥rico: {historico_ll[:2]} (√∫ltimas 2)")
        print(f"   Should Operate: {resultado_ll['should_operate']}")
        print(f"   Reason: {resultado_ll['reason']}")
        print(f"   Strategy: {resultado_ll.get('strategy', 'N/A')}")
        
        if resultado_ll['should_operate']:
            print("   ‚úÖ SUCESSO: Sinal ativado corretamente para padr√£o LL")
        else:
            print("   ‚ùå ERRO: Sinal n√£o foi ativado para padr√£o LL")
        print()
        
        # Teste 2: Padr√£o WW (n√£o deve ativar sinal)
        print("üîç TESTE 2: Padr√£o WW (2 WIN consecutivos)")
        historico_ww = ['WIN', 'WIN', 'LOSS', 'WIN', 'LOSS']
        resultado_ww = analisar_estrategia_momentum_calmo(historico_ww, timestamp_test)
        
        print(f"   Hist√≥rico: {historico_ww[:2]} (√∫ltimas 2)")
        print(f"   Should Operate: {resultado_ww['should_operate']}")
        print(f"   Reason: {resultado_ww['reason']}")
        
        if not resultado_ww['should_operate']:
            print("   ‚úÖ SUCESSO: Sinal n√£o ativado para padr√£o WW (correto)")
        else:
            print("   ‚ùå ERRO: Sinal foi ativado incorretamente para padr√£o WW")
        print()
        
        # Teste 3: Padr√£o misto LW (n√£o deve ativar)
        print("üîç TESTE 3: Padr√£o LW (LOSS + WIN)")
        historico_lw = ['WIN', 'LOSS', 'WIN', 'LOSS', 'WIN']
        resultado_lw = analisar_estrategia_momentum_calmo(historico_lw, timestamp_test)
        
        print(f"   Hist√≥rico: {historico_lw[:2]} (√∫ltimas 2)")
        print(f"   Should Operate: {resultado_lw['should_operate']}")
        print(f"   Reason: {resultado_lw['reason']}")
        
        if not resultado_lw['should_operate']:
            print("   ‚úÖ SUCESSO: Sinal n√£o ativado para padr√£o misto (correto)")
        else:
            print("   ‚ùå ERRO: Sinal foi ativado incorretamente para padr√£o misto")
        print()
        
        # Teste 4: Filtro de regime (Alta Atividade - n√£o deve ativar)
        print("üîç TESTE 4: Filtro de Regime (Alta Atividade)")
        timestamp_alta = "2025-10-03T20:57:30.000Z"  # Hora 20 = Alta Atividade
        resultado_filtro = analisar_estrategia_momentum_calmo(historico_ll, timestamp_alta)
        
        print(f"   Timestamp: {timestamp_alta} (Hora UTC: 20)")
        print(f"   Should Operate: {resultado_filtro['should_operate']}")
        print(f"   Reason: {resultado_filtro['reason']}")
        
        if not resultado_filtro['should_operate'] and 'Filtro Rechazado' in resultado_filtro['reason']:
            print("   ‚úÖ SUCESSO: Filtro de regime funcionando corretamente")
        else:
            print("   ‚ùå ERRO: Filtro de regime n√£o est√° funcionando")
        print()
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro na importa√ß√£o: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def test_bot_name():
    """Testa se o nome do bot foi atualizado"""
    
    print("ü§ñ TESTE DO NOME DO BOT")
    print("=" * 50)
    
    try:
        import importlib.util
        spec = importlib.util.spec_from_file_location("radartunder35", "radartunder3.5.py")
        radartunder35 = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(radartunder35)
        BOT_NAME = radartunder35.BOT_NAME
        
        print(f"Nome do bot: {BOT_NAME}")
        
        if 'll' in BOT_NAME.lower():
            print("‚úÖ SUCESSO: Nome do bot atualizado para estrat√©gia LL")
            return True
        else:
            print("‚ùå AVISO: Nome do bot pode n√£o refletir a estrat√©gia LL")
            return False
            
    except ImportError as e:
        print(f"‚ùå Erro na importa√ß√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal do teste"""
    
    print("üöÄ INICIANDO TESTES DA ESTRAT√âGIA LL MODIFICADA")
    print("=" * 60)
    print(f"Data/Hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    tests_passed = 0
    total_tests = 2
    
    # Teste 1: Estrat√©gia LL
    if test_estrategia_ll():
        tests_passed += 1
    
    # Teste 2: Nome do bot
    if test_bot_name():
        tests_passed += 1
    
    # Resultado final
    print("=" * 60)
    print("üìä RESULTADO DOS TESTES")
    print("=" * 60)
    print(f"‚úÖ Testes aprovados: {tests_passed}/{total_tests}")
    
    if tests_passed == total_tests:
        print("\nüéâ TODOS OS TESTES PASSARAM!")
        print("   ‚úÖ Estrat√©gia LL implementada corretamente")
        print("   ‚úÖ Detecta 2 LOSS consecutivos")
        print("   ‚úÖ Filtros de regime funcionando")
        print("   ‚úÖ Nome do bot atualizado")
        print("\nüìã A estrat√©gia est√° pronta para uso!")
    else:
        print(f"\n‚ö†Ô∏è  {total_tests - tests_passed} teste(s) falharam")
        print("   - Verifique os erros acima")
    
    print("\nüéØ RESUMO DA NOVA ESTRAT√âGIA:")
    print("   - Espera aparecer um LOSS")
    print("   - Entrada ap√≥s surgir 2 LOSS consecutivos")
    print("   - Filtros: Baixa Atividade + Fechamento da Hora")

if __name__ == "__main__":
    main()
#!/usr/bin/env python3
"""
Teste para validar o mecanismo de bloqueio e preven√ß√£o de condi√ß√µes de corrida
no bot de trading ass√≠ncrono AccumulatorScalpingBot.

Este teste verifica:
1. Inicializa√ß√£o correta da vari√°vel is_trading_locked
2. Bloqueio adequado durante opera√ß√µes
3. Libera√ß√£o correta do bloqueio ap√≥s conclus√£o
4. Preven√ß√£o de m√∫ltiplas opera√ß√µes simult√¢neas
5. Comportamento correto em cen√°rios de erro
"""

import asyncio
import unittest
from unittest.mock import AsyncMock, MagicMock, patch
import sys
import os

# Adicionar o diret√≥rio raiz ao path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from tunderbotalavanca import AccumulatorScalpingBot

class TestRaceConditionFix(unittest.TestCase):
    """Testes para validar a corre√ß√£o de condi√ß√µes de corrida"""
    
    def setUp(self):
        """Configura√ß√£o inicial para cada teste"""
        # Mock da configura√ß√£o da conta
        self.account_config = {
            'name': 'Test Account',
            'token': 'test_token',
            'app_id': 'test_app_id'
        }
        
        # Criar inst√¢ncia do bot com mocks
        with patch('tunderbotalavanca.DerivWebSocketNativo'), \
             patch('tunderbotalavanca.RobustOrderSystem'), \
             patch('tunderbotalavanca.EnhancedSyncSystem'), \
             patch('tunderbotalavanca.EnhancedTickBuffer'), \
             patch('tunderbotalavanca.WebSocketRecoveryManager'), \
             patch('tunderbotalavanca.ThreadSafeSignalQueue'), \
             patch('tunderbotalavanca.SystemHealthMonitor'):
            
            self.bot = AccumulatorScalpingBot(self.account_config)
    
    def test_initial_lock_state(self):
        """Teste 1: Verificar se is_trading_locked √© inicializado como False"""
        print("üß™ Teste 1: Verificando inicializa√ß√£o da vari√°vel de bloqueio...")
        
        self.assertFalse(self.bot.is_trading_locked, 
                        "is_trading_locked deve ser inicializado como False")
        print("‚úÖ Vari√°vel is_trading_locked inicializada corretamente como False")
    
    @patch('tunderbotalavanca.asyncio.create_task')
    async def test_lock_mechanism_on_trigger(self, mock_create_task):
        """Teste 2: Verificar se o bloqueio √© ativado quando um gatilho √© disparado"""
        print("\nüß™ Teste 2: Verificando ativa√ß√£o do bloqueio no gatilho...")
        
        # Simular tick que deve disparar compra (d√≠gito seguro + probabilidade alta)
        tick_data = {'quote': 1.23456}  # √öltimo d√≠gito 6 (seguro)
        
        # Mock do random para garantir que should_buy seja True
        with patch('tunderbotalavanca.random.randint', return_value=5):  # 90% chance para 0 perdas
            await self.bot._handle_new_tick(tick_data)
        
        # Verificar se o bloqueio foi ativado
        self.assertTrue(self.bot.is_trading_locked, 
                       "is_trading_locked deve ser True ap√≥s gatilho de compra")
        
        # Verificar se create_task foi chamado
        mock_create_task.assert_called_once()
        print("‚úÖ Bloqueio ativado corretamente no gatilho de compra")
    
    @patch('tunderbotalavanca.asyncio.create_task')
    async def test_ignore_trigger_when_locked(self, mock_create_task):
        """Teste 3: Verificar se gatilhos s√£o ignorados quando j√° h√° opera√ß√£o em andamento"""
        print("\nüß™ Teste 3: Verificando se gatilhos s√£o ignorados quando travado...")
        
        # Simular estado travado
        self.bot.is_trading_locked = True
        
        # Simular tick que deveria disparar compra
        tick_data = {'quote': 1.23456}  # √öltimo d√≠gito 6 (seguro)
        
        # Mock do random para garantir que should_buy seja True
        with patch('tunderbotalavanca.random.randint', return_value=5):
            await self.bot._handle_new_tick(tick_data)
        
        # Verificar se create_task N√ÉO foi chamado
        mock_create_task.assert_not_called()
        print("‚úÖ Gatilho ignorado corretamente quando bot j√° est√° travado")
    
    async def test_lock_release_after_successful_operation(self):
        """Teste 4: Verificar se o bloqueio √© liberado ap√≥s opera√ß√£o bem-sucedida"""
        print("\nüß™ Teste 4: Verificando libera√ß√£o do bloqueio ap√≥s opera√ß√£o bem-sucedida...")
        
        # Simular estado travado
        self.bot.is_trading_locked = True
        
        # Mock das fun√ß√µes do ciclo de vida
        self.bot.executar_compra_digitunder = AsyncMock(return_value="contract_123")
        self.bot.monitorar_contrato = AsyncMock(return_value=10.0)  # Lucro
        self.bot.aplicar_gestao_risco = MagicMock()
        
        # Executar ciclo de vida
        await self.bot._execute_trade_lifecycle()
        
        # Verificar se o bloqueio foi liberado
        self.assertFalse(self.bot.is_trading_locked, 
                        "is_trading_locked deve ser False ap√≥s conclus√£o da opera√ß√£o")
        print("‚úÖ Bloqueio liberado corretamente ap√≥s opera√ß√£o bem-sucedida")
    
    async def test_lock_release_after_failed_operation(self):
        """Teste 5: Verificar se o bloqueio √© liberado ap√≥s opera√ß√£o falhada"""
        print("\nüß™ Teste 5: Verificando libera√ß√£o do bloqueio ap√≥s opera√ß√£o falhada...")
        
        # Simular estado travado
        self.bot.is_trading_locked = True
        
        # Mock das fun√ß√µes do ciclo de vida (falha na compra)
        self.bot.executar_compra_digitunder = AsyncMock(return_value=None)  # Falha
        
        # Executar ciclo de vida
        await self.bot._execute_trade_lifecycle()
        
        # Verificar se o bloqueio foi liberado
        self.assertFalse(self.bot.is_trading_locked, 
                        "is_trading_locked deve ser False mesmo ap√≥s falha na opera√ß√£o")
        print("‚úÖ Bloqueio liberado corretamente ap√≥s opera√ß√£o falhada")
    
    async def test_lock_release_after_exception(self):
        """Teste 6: Verificar se o bloqueio √© liberado mesmo quando ocorre exce√ß√£o"""
        print("\nüß™ Teste 6: Verificando libera√ß√£o do bloqueio ap√≥s exce√ß√£o...")
        
        # Simular estado travado
        self.bot.is_trading_locked = True
        
        # Mock que gera exce√ß√£o
        self.bot.executar_compra_digitunder = AsyncMock(side_effect=Exception("Erro simulado"))
        
        # Executar ciclo de vida
        await self.bot._execute_trade_lifecycle()
        
        # Verificar se o bloqueio foi liberado
        self.assertFalse(self.bot.is_trading_locked, 
                        "is_trading_locked deve ser False mesmo ap√≥s exce√ß√£o")
        print("‚úÖ Bloqueio liberado corretamente ap√≥s exce√ß√£o")
    
    @patch('tunderbotalavanca.asyncio.create_task')
    async def test_multiple_simultaneous_triggers(self, mock_create_task):
        """Teste 7: Simular m√∫ltiplos gatilhos simult√¢neos"""
        print("\nüß™ Teste 7: Testando m√∫ltiplos gatilhos simult√¢neos...")
        
        # Simular m√∫ltiplos ticks simult√¢neos que deveriam disparar compra
        tick_data = {'quote': 1.23456}  # √öltimo d√≠gito 6 (seguro)
        
        # Mock do random para garantir que should_buy seja sempre True
        with patch('tunderbotalavanca.random.randint', return_value=5):
            # Simular 5 ticks simult√¢neos
            tasks = [self.bot._handle_new_tick(tick_data) for _ in range(5)]
            await asyncio.gather(*tasks)
        
        # Verificar se apenas uma opera√ß√£o foi iniciada
        self.assertEqual(mock_create_task.call_count, 1, 
                        "Apenas uma opera√ß√£o deve ser iniciada mesmo com m√∫ltiplos gatilhos")
        
        # Verificar se o bot est√° travado
        self.assertTrue(self.bot.is_trading_locked, 
                       "Bot deve estar travado ap√≥s primeiro gatilho")
        print("‚úÖ M√∫ltiplos gatilhos simult√¢neos tratados corretamente")
    
    async def test_safety_filter_with_lock(self):
        """Teste 8: Verificar se filtro de seguran√ßa funciona independente do bloqueio"""
        print("\nüß™ Teste 8: Verificando filtro de seguran√ßa com bloqueio...")
        
        # Testar com bot desbloqueado
        self.bot.is_trading_locked = False
        
        # Simular tick com d√≠gito perigoso (8)
        tick_data = {'quote': 1.23458}  # √öltimo d√≠gito 8 (perigoso)
        
        with patch('tunderbotalavanca.asyncio.create_task') as mock_create_task:
            await self.bot._handle_new_tick(tick_data)
            
            # Verificar se nenhuma opera√ß√£o foi iniciada
            mock_create_task.assert_not_called()
            
            # Verificar se bot continua desbloqueado
            self.assertFalse(self.bot.is_trading_locked, 
                           "Bot deve continuar desbloqueado ap√≥s filtro de seguran√ßa")
        
        print("‚úÖ Filtro de seguran√ßa funciona independente do estado de bloqueio")

async def run_all_tests():
    """Executa todos os testes de forma ass√≠ncrona"""
    print("üöÄ Iniciando testes do mecanismo de bloqueio para preven√ß√£o de condi√ß√µes de corrida...\n")
    
    test_instance = TestRaceConditionFix()
    test_instance.setUp()
    
    try:
        # Executar testes s√≠ncronos
        test_instance.test_initial_lock_state()
        
        # Executar testes ass√≠ncronos
        await test_instance.test_lock_mechanism_on_trigger()
        await test_instance.test_ignore_trigger_when_locked()
        await test_instance.test_lock_release_after_successful_operation()
        await test_instance.test_lock_release_after_failed_operation()
        await test_instance.test_lock_release_after_exception()
        await test_instance.test_multiple_simultaneous_triggers()
        await test_instance.test_safety_filter_with_lock()
        
        print("\n" + "="*80)
        print("üéâ TODOS OS TESTES PASSARAM COM SUCESSO!")
        print("‚úÖ Mecanismo de bloqueio implementado corretamente")
        print("‚úÖ Condi√ß√µes de corrida prevenidas efetivamente")
        print("‚úÖ Bot agora processa opera√ß√µes de forma sequencial e segura")
        print("‚úÖ API protegida contra sobrecarga")
        print("="*80)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERRO NOS TESTES: {e}")
        return False

if __name__ == "__main__":
    # Executar os testes
    success = asyncio.run(run_all_tests())
    
    if success:
        print("\nüîí CORRE√á√ÉO DE CONDI√á√ÉO DE CORRIDA VALIDADA COM SUCESSO!")
        print("O bot agora est√° protegido contra opera√ß√µes simult√¢neas.")
    else:
        print("\n‚ö†Ô∏è ALGUNS TESTES FALHARAM - REVISAR IMPLEMENTA√á√ÉO")
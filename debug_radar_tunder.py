#!/usr/bin/env python3
"""
Script para debugar o radar_analyzer_tunder.py
"""

import os
from datetime import datetime
from supabase import create_client
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# Configura√ß√µes
BOT_NAME = 'Tunder Bot'
TABELA_LOGS = 'tunder_bot_logs'
OPERACOES_MINIMAS = 10  # ajustado para Tunder Bot
OPERACOES_HISTORICO = 30

def main():
    try:
        # Conectar ao Supabase
        supabase_url = os.getenv('SUPABASE_URL')
        supabase_key = os.getenv('SUPABASE_KEY')
        
        if not supabase_url or not supabase_key:
            print("‚ùå Credenciais do Supabase n√£o encontradas")
            return
        
        supabase = create_client(supabase_url, supabase_key)
        print("‚úÖ Conectado ao Supabase")
        
        # Buscar opera√ß√µes como o radar faz
        print(f"\nüîç Buscando √∫ltimas {OPERACOES_HISTORICO} opera√ß√µes do Tunder Bot...")
        
        response = supabase.table(TABELA_LOGS) \
            .select('profit_percentage, created_at') \
            .order('id', desc=True) \
            .limit(OPERACOES_HISTORICO) \
            .execute()
        
        print(f"üìä Total de registros retornados: {len(response.data)}")
        
        if not response.data:
            print("‚ùå Nenhuma opera√ß√£o encontrada")
            return
        
        # Converter para hist√≥rico V/D
        historico = []
        timestamps = []
        
        print("\nüìà Convertendo opera√ß√µes:")
        for i, operacao in enumerate(response.data):
            profit_percentage = operacao.get('profit_percentage', 0)
            resultado = 'V' if profit_percentage > 0 else 'D'
            historico.append(resultado)
            timestamps.append(operacao.get('created_at'))
            
            if i < 10:  # Mostrar apenas os primeiros 10
                print(f"   {i+1}. Profit: {profit_percentage}% -> {resultado} ({operacao.get('created_at')})")
        
        print(f"\nüéØ Hist√≥rico completo ({len(historico)} opera√ß√µes): {' '.join(historico)}")
        
        # An√°lise de padr√µes
        print(f"\nüîç AN√ÅLISE DE PADR√ïES:")
        print(f"   ‚Ä¢ Opera√ß√µes encontradas: {len(historico)}")
        print(f"   ‚Ä¢ Opera√ß√µes m√≠nimas necess√°rias: {OPERACOES_MINIMAS}")
        print(f"   ‚Ä¢ Status: {'‚úÖ Suficiente' if len(historico) >= OPERACOES_MINIMAS else '‚ùå Insuficiente'}")
        
        if len(historico) >= OPERACOES_MINIMAS:
            # An√°lise das √∫ltimas 20 opera√ß√µes
            ultimas_20 = historico[:20]
            derrotas_ultimas_20 = ultimas_20.count('D')
            
            print(f"\nüìä An√°lise das √∫ltimas 20 opera√ß√µes:")
            print(f"   ‚Ä¢ Opera√ß√µes: {' '.join(ultimas_20)}")
            print(f"   ‚Ä¢ Derrotas: {derrotas_ultimas_20}")
            print(f"   ‚Ä¢ Filtro Mercado Inst√°vel (>2): {'‚ùå FALHOU' if derrotas_ultimas_20 > 2 else '‚úÖ PASSOU'}")
            print(f"   ‚Ä¢ Filtro de Espera (>1): {'‚ùå FALHOU' if derrotas_ultimas_20 > 1 else '‚úÖ PASSOU'}")
            
            # Verificar padr√£o V-D-V
            if len(historico) >= 3:
                padrao_vdv = historico[0] == 'V' and historico[1] == 'D' and historico[2] == 'V'
                print(f"\nüéØ Padr√£o V-D-V:")
                print(f"   ‚Ä¢ √öltimas 3: {historico[0]}-{historico[1]}-{historico[2]}")
                print(f"   ‚Ä¢ Status: {'‚úÖ ENCONTRADO' if padrao_vdv else '‚ùå N√ÉO ENCONTRADO'}")
                
                if padrao_vdv:
                    # Filtro 1 - 10 opera√ß√µes anteriores
                    if len(historico) >= 13:
                        operacoes_anteriores_10 = historico[3:13]
                        derrotas_anteriores_10 = operacoes_anteriores_10.count('D')
                        print(f"\nüîç Filtro 1 (Condi√ß√£o Geral):")
                        print(f"   ‚Ä¢ 10 opera√ß√µes anteriores: {' '.join(operacoes_anteriores_10)}")
                        print(f"   ‚Ä¢ Derrotas: {derrotas_anteriores_10}")
                        print(f"   ‚Ä¢ Status (‚â§1): {'‚úÖ PASSOU' if derrotas_anteriores_10 <= 1 else '‚ùå FALHOU'}")
                    
                    # Filtro 2 - 5 opera√ß√µes anteriores
                    if len(historico) >= 8:
                        operacoes_anteriores_5 = historico[3:8]
                        vitorias_anteriores_5 = operacoes_anteriores_5.count('V')
                        print(f"\nüîç Filtro 2 (Condi√ß√£o Imediata):")
                        print(f"   ‚Ä¢ 5 opera√ß√µes anteriores: {' '.join(operacoes_anteriores_5)}")
                        print(f"   ‚Ä¢ Vit√≥rias: {vitorias_anteriores_5}")
                        print(f"   ‚Ä¢ Status (‚â•4): {'‚úÖ PASSOU' if vitorias_anteriores_5 >= 4 else '‚ùå FALHOU'}")
        
        # Verificar √∫ltimo sinal enviado
        print(f"\nüì° √öLTIMO SINAL ENVIADO:")
        response_signal = supabase.table('radar_de_apalancamiento_signals') \
            .select('*') \
            .eq('bot_name', BOT_NAME) \
            .order('id', desc=True) \
            .limit(1) \
            .execute()
        
        if response_signal.data:
            signal = response_signal.data[0]
            print(f"   ‚Ä¢ ID: {signal.get('id')}")
            print(f"   ‚Ä¢ Safe: {signal.get('is_safe_to_operate')}")
            print(f"   ‚Ä¢ Reason: {signal.get('reason')}")
            print(f"   ‚Ä¢ Created: {signal.get('created_at')}")
        else:
            print("   ‚Ä¢ Nenhum sinal encontrado")
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
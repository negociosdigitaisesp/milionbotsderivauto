"""
Wolf Bot 2.0 - Estrat√©gia Adaptativa com Martingale
Opera com martingale baseado no √∫ltimo d√≠gito do R_100 e no resultado da opera√ß√£o anterior

Este bot adapta sua estrat√©gia baseado no hist√≥rico de resultados,
utilizando martingale para gerenciamento de risco.
"""

import asyncio
from typing import Optional
from ...utils.helpers import (
    salvar_operacao, aguardar_resultado_contrato, executar_compra,
    verificar_stops, obter_ultimo_tick, extrair_ultimo_digito,
    log_resultado_operacao, criar_parametros_compra, calcular_martingale,
    validar_e_ajustar_stake
)
from ...config.settings import BotSpecificConfig
import logging

logger = logging.getLogger(__name__)

async def wolf_bot_2_0(api) -> None:
    """
    Wolf Bot 2.0 Original - Estrat√©gia baseada na l√≥gica original do XML
    Opera com martingale adaptativo baseado em condi√ß√µes espec√≠ficas de d√≠gitos
    
    Args:
        api: Inst√¢ncia da API da Deriv
    """
    # Par√¢metros de Gest√£o (conforme XML original)
    nome_bot = "Wolf_Bot_2.0_Original"
    stake_inicial = 0.6
    martingale_fator = 1.0  # Martingale simples, stake n√£o aumenta
    stop_loss = float('inf')  # Ilimitado
    stop_win = float('inf')   # Ilimitado
    ativo = 'R_100'
    
    logger.info(f"ü§ñ Iniciando {nome_bot}...")
    print(f"ü§ñ Iniciando {nome_bot}...")
    
    # Vari√°veis de Estado
    stake_atual = stake_inicial
    total_profit = 0
    ultimo_resultado = "vitoria"  # Inicializar com "vitoria"
    
    print(f"üìä {nome_bot} configurado:")
    print(f"   üí∞ Stake inicial: ${stake_inicial}")
    print(f"   üîÑ Fator Martingale: {martingale_fator} (simples)")
    print(f"   üõë Stop Loss: Infinito")
    print(f"   üéØ Stop Win: Infinito")
    print(f"   üê∫ Estrat√©gia: L√≥gica Original XML")
    print(f"   üè™ Ativo: {ativo}")
    print(f"   üìà √öltimo resultado inicial: {ultimo_resultado}")
    
    while True:
        try:
            # Verificar Stop Loss/Win no in√≠cio de cada ciclo (sempre infinito)
            resultado_stop = verificar_stops(total_profit, stop_loss, stop_win, nome_bot)
            if resultado_stop != 'continue':
                break
            
            # Obter √∫ltimo d√≠gito do R_100
            ultimo_tick = await obter_ultimo_tick(api, ativo, nome_bot)
            if ultimo_tick is None:
                await asyncio.sleep(1)
                continue
            
            ultimo_digito = extrair_ultimo_digito(ultimo_tick)
            
            # L√≥gica de Entrada (Duas Condi√ß√µes)
            entrada_valida = False
            contract_type = None
            barrier = None
            estrategia = ""
            
            # Condi√ß√£o 1: Se o ultimo_digito for 4
            if ultimo_digito == 4:
                entrada_valida = True
                contract_type = "DIGITUNDER"
                estrategia = "UNDER (d√≠gito 4)"
                
            # Condi√ß√£o 2: Se o ultimo_digito for 6 E se stake_atual > stake_inicial
            elif ultimo_digito == 6 and stake_atual > stake_inicial:
                entrada_valida = True
                contract_type = "DIGITOVER"
                estrategia = "OVER (d√≠gito 6 + stake > inicial)"
            
            # Se n√£o atender √†s condi√ß√µes, aguardar pr√≥ximo tick
            if not entrada_valida:
                print(f"üê∫ {nome_bot}: D√≠gito: {ultimo_digito} | Stake: ${stake_atual:.2f} | Aguardando condi√ß√µes...")
                await asyncio.sleep(1)
                continue
            
            # Predi√ß√£o (barrier) adaptativa baseada no √∫ltimo resultado
            if ultimo_resultado == "vitoria":
                barrier = 8
                predicao_info = "Predi√ß√£o 8 (ap√≥s vit√≥ria)"
            else:  # ultimo_resultado == "derrota"
                barrier = 2
                predicao_info = "Predi√ß√£o 2 (ap√≥s derrota)"
            
            print(f"üê∫ {nome_bot}: D√≠gito: {ultimo_digito} | {estrategia} | {predicao_info}")
            print(f"üí∞ {nome_bot}: Profit: ${total_profit:.2f} | Stake atual: ${stake_atual:.2f} | √öltimo: {ultimo_resultado}")
            
            # Validar e ajustar stake antes da compra
            stake_atual = validar_e_ajustar_stake(stake_atual, nome_bot)
            
            # Construir par√¢metros da compra
            parametros_da_compra = criar_parametros_compra(
                stake=stake_atual,
                contract_type=contract_type,
                symbol=ativo,
                barrier=barrier
            )
            
            print(f"üìà {nome_bot}: Comprando {contract_type} {barrier} | Stake: ${stake_atual:.2f}")
            
            # Executar compra
            contract_id = await executar_compra(api, parametros_da_compra, nome_bot)
            if contract_id is None:
                await asyncio.sleep(1)
                continue
            
            # Aguardar resultado
            lucro = await aguardar_resultado_contrato(api, contract_id, nome_bot)
            if lucro is None:
                await asyncio.sleep(1)
                continue
            
            # Atualizar total_profit
            total_profit += lucro
            
            # Salvar opera√ß√£o
            salvar_operacao(nome_bot, lucro)
            
            # L√≥gica P√≥s-Trade (Martingale Original)
            stake_anterior = stake_atual
            
            if lucro > 0:
                # Vit√≥ria: Resetar stake e definir √∫ltimo resultado
                log_resultado_operacao(nome_bot, lucro, total_profit, stake_atual, True)
                stake_atual = stake_inicial
                ultimo_resultado = "vitoria"
                print(f"‚úÖ {nome_bot}: VIT√ìRIA! Stake resetado para ${stake_atual:.2f}")
            else:
                # Derrota: Aplicar martingale e definir √∫ltimo resultado
                log_resultado_operacao(nome_bot, lucro, total_profit, stake_atual, False)
                stake_atual = stake_anterior * martingale_fator
                ultimo_resultado = "derrota"
                print(f"‚ùå {nome_bot}: DERROTA! Novo stake: ${stake_atual:.2f} (fator: {martingale_fator})")
            
            # Pausa final - aguardar pr√≥xima an√°lise
            await asyncio.sleep(1)
            
        except Exception as e:
            print(f"‚ùå Erro de conex√£o no {nome_bot}: {e}. Tentando novamente em 10 segundos...")
            logger.error(f"Erro de conex√£o no {nome_bot}: {e}")
            await asyncio.sleep(10)
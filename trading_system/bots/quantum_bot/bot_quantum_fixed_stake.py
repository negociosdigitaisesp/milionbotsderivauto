"""
Bot Quantum Fixed Stake - Estrat√©gia com Stake Fixo e Predi√ß√µes Aleat√≥rias
Opera com stake fixo, stop loss/win, predi√ß√µes aleat√≥rias de d√≠gitos e compra contratos DIGITDIFF

Este bot utiliza predi√ß√µes aleat√≥rias para diversificar as opera√ß√µes,
mantendo sempre stake fixo para controle rigoroso de risco.
"""

import asyncio
import random
from typing import Optional
from ...utils.helpers import (
    salvar_operacao, aguardar_resultado_contrato, executar_compra,
    verificar_stops, obter_ultimo_tick, extrair_ultimo_digito,
    log_resultado_operacao, criar_parametros_compra, calcular_martingale,
    validar_e_ajustar_stake
)
from ...config.settings import BotSpecificConfig
import logging

logger = logging.getLogger(__name__)

async def bot_quantum_fixed_stake(api) -> None:
    """
    Bot Quantum Fixed Stake - Estrat√©gia com Stake Fixo e Predi√ß√µes Aleat√≥rias
    Opera com stake fixo, stop loss/win, predi√ß√µes aleat√≥rias de d√≠gitos e compra contratos DIGITDIFF
    
    Args:
        api: Inst√¢ncia da API da Deriv
    """
    nome_bot = "Bot_Quantum_Fixed_Stake"
    config = BotSpecificConfig.QUANTUM_CONFIG
    
    logger.info(f"ü§ñ Iniciando {nome_bot}...")
    print(f"ü§ñ Iniciando {nome_bot}...")
    
    # Definir par√¢metros fixos
    stake_inicial = config['stake_inicial']
    stake_maximo = config['stake_maximo']
    stop_loss = config['stop_loss']
    stop_win = config['stop_win']
    ativo = config['symbol']
    
    # Inicializar vari√°veis de estado
    stake_atual = stake_inicial
    total_profit = 0
    
    print(f"üìä {nome_bot} configurado:")
    print(f"   üí∞ Stake inicial: ${stake_inicial}")
    print(f"   üîÑ Stake m√°ximo: ${stake_maximo}")
    print(f"   üõë Stop Loss: ${stop_loss}")
    print(f"   üéØ Stop Win: ${stop_win}")
    print(f"   üé≤ Estrat√©gia: Predi√ß√µes aleat√≥rias DIGITDIFF com Martingale")
    print(f"   üè™ Ativo: {ativo}")
    
    while True:
        try:
            # Verificar Stop Loss/Win no in√≠cio de cada ciclo
            resultado_stop = verificar_stops(total_profit, stop_loss, stop_win, nome_bot)
            if resultado_stop != 'continue':
                break
            
            # Gerar predi√ß√£o aleat√≥ria (0-9)
            predicao_aleatoria = random.randint(0, 9)
            
            print(f"üé≤ {nome_bot}: Predi√ß√£o aleat√≥ria: {predicao_aleatoria}")
            print(f"üí∞ {nome_bot}: Profit: ${total_profit:.2f} | Stake atual: ${stake_atual:.2f}")
            
            # Validar e ajustar stake antes da compra
            stake_atual = validar_e_ajustar_stake(stake_atual, nome_bot)
            
            # L√≥gica de Compra (sempre DIGITDIFF com predi√ß√£o aleat√≥ria)
            parametros_da_compra = criar_parametros_compra(
                stake=stake_atual,
                contract_type='DIGITDIFF',
                symbol=ativo,
                barrier=predicao_aleatoria
            )
            
            print(f"üìà {nome_bot}: Comprando DIGITDIFF {predicao_aleatoria} | Stake: ${stake_atual:.2f}")
            
            # Executar compra
            contract_id = await executar_compra(api, parametros_da_compra, nome_bot)
            if contract_id is None:
                await asyncio.sleep(1)
                continue
            
            # Aguardar resultado
            lucro = await aguardar_resultado_contrato(api, contract_id, nome_bot)
            if lucro is None:
                await asyncio.sleep(1)
                continue
            
            # Atualizar total_profit
            total_profit += lucro
            
            # Salvar opera√ß√£o
            salvar_operacao(nome_bot, lucro)
            
            # Tratamento do resultado com martingale
            if lucro > 0:
                # Vit√≥ria - Reset stake usando martingale
                log_resultado_operacao(nome_bot, lucro, total_profit, stake_atual, True)
                stake_atual = calcular_martingale(lucro, stake_atual, stake_inicial, stake_maximo, nome_bot)
            else:
                # Derrota - Aplicar martingale
                log_resultado_operacao(nome_bot, lucro, total_profit, stake_atual, False)
                stake_atual = calcular_martingale(lucro, stake_atual, stake_inicial, stake_maximo, nome_bot)
                print(f"üìä {nome_bot}: Pr√≥xima aposta com martingale: ${stake_atual:.2f}")
            
        except Exception as e:
            error_msg = f"‚ùå Erro no {nome_bot}: {e}"
            logger.error(error_msg)
            print(error_msg)
        
        # Pausa final - aguardar pr√≥xima predi√ß√£o
        await asyncio.sleep(1)
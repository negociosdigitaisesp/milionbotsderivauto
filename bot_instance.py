#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
=====================================================
BOT INSTANCE - OPER√ÅRIO GEN√âRICO DA NOVA GERA√á√ÉO
=====================================================
Este script substitui o accumulator_standalone.py
Implementa a l√≥gica de trading de forma gen√©rica,
buscando par√¢metros do banco de dados.

Uso: python bot_instance.py --bot_id <ID>
=====================================================
"""

import os
import sys
import asyncio
import time
import logging
import json
import threading
import websockets
import uuid
import argparse
import signal
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
from dotenv import load_dotenv
from supabase import create_client, Client
from aiohttp import web

# Carregar vari√°veis de ambiente
load_dotenv('.env.accumulator')

# Adicionar o diret√≥rio atual ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from robust_order_system import RobustOrderSystem, OperationType
    from enhanced_sync_system import EnhancedSyncSystem
except ImportError:
    # Fallback se os m√≥dulos n√£o existirem
    class RobustOrderSystem:
        def __init__(self, api_manager):
            self.api_manager = api_manager
    
    class EnhancedSyncSystem:
        def __init__(self, max_concurrent_operations=2, max_queue_size=3):
            self.operation_semaphore = asyncio.Semaphore(max_concurrent_operations)
            self.signal_queue = asyncio.Queue(maxsize=max_queue_size)
        
        def queue_signal(self, ticks, pattern_detected):
            try:
                signal = type('Signal', (), {'ticks': ticks, 'pattern_detected': pattern_detected})()
                self.signal_queue.put_nowait(signal)
                return True
            except:
                return False
        
        def get_next_signal(self):
            try:
                return self.signal_queue.get_nowait()
            except:
                return None
        
        def can_execute_operation(self):
            return True
        
        def record_operation_success(self):
            pass
        
        def record_operation_failure(self):
            pass

class BotInstance:
    """
    Inst√¢ncia gen√©rica de bot que busca configura√ß√µes do banco de dados
    """
    
    def __init__(self, bot_id: str):
        self.bot_id = bot_id
        self.bot_config = None
        self.supabase = self._init_supabase()
        
        # Configurar logging espec√≠fico para este bot
        self.logger = self._setup_logging()
        
        # Vari√°veis de trading (ser√£o carregadas do banco)
        self.stake = 0.0
        self.initial_stake = 0.0
        self.take_profit_percentual = 0.0
        self.growth_rate = 0.0
        self.max_operations = 10
        self.ativo = 'R_75'
        
        # Carregar configura√ß√£o do banco
        self._load_bot_configuration()
        
        # Inicializar componentes
        self.api_manager = DerivWebSocketNativo(self.logger)
        self.robust_order_system = RobustOrderSystem(self.api_manager)
        self.sync_system = EnhancedSyncSystem(max_concurrent_operations=2, max_queue_size=3)
        
        # Log de inicializa√ß√£o
        self.logger.info(f"üîß Componentes inicializados:")
        self.logger.info(f"   ‚Ä¢ API Manager: {type(self.api_manager).__name__}")
        self.logger.info(f"   ‚Ä¢ Robust Order System: {type(self.robust_order_system).__name__}")
        self.logger.info(f"   ‚Ä¢ Sync System: {type(self.sync_system).__name__}")
        
        # WebSocket Lock para resolver concorr√™ncia
        self.websocket_lock = asyncio.Lock()
        
        # Estado do bot
        self.running = False
        self.shutdown_requested = False
        self.last_heartbeat = datetime.now()
        self.heartbeat_interval = 60  # segundos
        
        # Log de estado inicial
        self.logger.info(f"üîí Estado inicial configurado:")
        self.logger.info(f"   ‚Ä¢ WebSocket Lock: {type(self.websocket_lock).__name__}")
        self.logger.info(f"   ‚Ä¢ Heartbeat Interval: {self.heartbeat_interval}s")
        
        # Controles de estado
        self.total_profit = 0.0
        self.total_operations = 0
        self.successful_operations = 0
        self.failed_operations = 0
        
        # Sistema de ticks
        self.tick_buffer = []
        self.tick_subscription_active = False
        
        # Log de estado final
        self.logger.info(f"üìä Estado final configurado:")
        self.logger.info(f"   ‚Ä¢ Total Profit: ${self.total_profit}")
        self.logger.info(f"   ‚Ä¢ Total Operations: {self.total_operations}")
        self.logger.info(f"   ‚Ä¢ Successful Operations: {self.successful_operations}")
        self.logger.info(f"   ‚Ä¢ Failed Operations: {self.failed_operations}")
        self.logger.info(f"   ‚Ä¢ Tick Buffer Size: {len(self.tick_buffer)}")
        
        self.logger.info(f"ü§ñ Bot Instance inicializado - ID: {bot_id}")
    
    def _init_supabase(self) -> Client:
        """Inicializa conex√£o com Supabase"""
        try:
            url = os.getenv('SUPABASE_URL')
            key = os.getenv('SUPABASE_ANON_KEY')
            
            if not url or not key:
                raise ValueError("SUPABASE_URL e SUPABASE_ANON_KEY devem estar definidas")
            
            return create_client(url, key)
            
        except Exception as e:
            print(f"‚ùå Erro ao conectar com Supabase: {e}")
            sys.exit(1)
    
    def _setup_logging(self) -> logging.Logger:
        """Configura logging espec√≠fico para este bot"""
        logger = logging.getLogger(f"bot_instance_{self.bot_id}")
        logger.setLevel(logging.INFO)
        
        # Evitar duplica√ß√£o de handlers
        if not logger.handlers:
            # Handler para arquivo
            file_handler = logging.FileHandler(f'bot_instance_{self.bot_id}.log', encoding='utf-8')
            file_handler.setLevel(logging.INFO)
            
            # Handler para console
            console_handler = logging.StreamHandler()
            console_handler.setLevel(logging.INFO)
            
            # Formato
            formatter = logging.Formatter(
                f'%(asctime)s - [BOT_{self.bot_id}] - %(levelname)s - %(message)s'
            )
            file_handler.setFormatter(formatter)
            console_handler.setFormatter(formatter)
            
            logger.addHandler(file_handler)
            logger.addHandler(console_handler)
        
        return logger
    
    def _load_bot_configuration(self):
        """Carrega configura√ß√£o do bot do banco de dados"""
        try:
            response = self.supabase.table('bot_configurations') \
                .select('*') \
                .eq('id', self.bot_id) \
                .single() \
                .execute()
            
            if not response.data:
                raise ValueError(f"Bot ID {self.bot_id} n√£o encontrado")
            
            self.bot_config = response.data
            
            # Carregar par√¢metros padr√£o
            self.bot_name = self.bot_config['bot_name']
            self.stake = float(self.bot_config['param_stake_inicial'])
            self.initial_stake = self.stake
            self.take_profit_percentual = float(self.bot_config['param_take_profit']) / 100.0
            self.growth_rate = float(self.bot_config.get('param_growth_rate', 2.0)) / 100.0
            self.max_operations = int(self.bot_config.get('param_max_operations', 10))
            
            # Configura√ß√µes adicionais do JSON
            config_json = self.bot_config.get('config_json', {})
            if isinstance(config_json, str):
                config_json = json.loads(config_json)
            
            self.ativo = config_json.get('ativo', 'R_75')
            self.win_stop = config_json.get('win_stop', 1000.0)
            self.loss_limit = config_json.get('loss_limit', 1000.0)
            
            # Aplicar param_overrides se existir
            param_overrides = self.bot_config.get('param_overrides')
            if param_overrides:
                try:
                    if isinstance(param_overrides, str):
                        overrides = json.loads(param_overrides)
                    else:
                        overrides = param_overrides
                    
                    # Sobrescrever par√¢metros espec√≠ficos
                    if 'growth_rate' in overrides:
                        self.growth_rate = float(overrides['growth_rate']) / 100.0
                        self.logger.info(f"üîß Override aplicado - Growth Rate: {self.growth_rate*100}%")
                    
                    if 'symbol' in overrides:
                        self.ativo = overrides['symbol']
                        self.logger.info(f"üîß Override aplicado - Symbol: {self.ativo}")
                    
                    if 'stake_inicial' in overrides:
                        self.stake = float(overrides['stake_inicial'])
                        self.initial_stake = self.stake
                        self.logger.info(f"üîß Override aplicado - Stake: ${self.stake}")
                    
                    if 'take_profit' in overrides:
                        self.take_profit_percentual = float(overrides['take_profit']) / 100.0
                        self.logger.info(f"üîß Override aplicado - Take Profit: {self.take_profit_percentual*100}%")
                    
                    if 'max_operations' in overrides:
                        self.max_operations = int(overrides['max_operations'])
                        self.logger.info(f"üîß Override aplicado - Max Operations: {self.max_operations}")
                        
                except Exception as e:
                    self.logger.error(f"‚ö†Ô∏è Erro ao aplicar param_overrides: {e}")
            
            # VALIDA√á√ÉO CR√çTICA DOS PAR√ÇMETROS
            if self.stake <= 0:
                raise ValueError(f"‚ùå Stake inv√°lido: ${self.stake}")
            
            if self.ativo not in ['R_10', 'R_25', 'R_50', 'R_75', 'R_100']:
                self.logger.warning(f"‚ö†Ô∏è Ativo n√£o padr√£o: {self.ativo}")
            
            if self.growth_rate < 0.01 or self.growth_rate > 0.05:
                self.logger.warning(f"‚ö†Ô∏è Growth rate fora do padr√£o: {self.growth_rate*100}%")
            
            # LOG DETALHADO DA CONFIGURA√á√ÉO FINAL (CR√çTICO)
            self.logger.info(f"‚úÖ CONFIGURA√á√ÉO FINAL CARREGADA PARA {self.bot_name}:")
            self.logger.info(f"   ‚Ä¢ Stake Inicial: ${self.initial_stake}")
            self.logger.info(f"   ‚Ä¢ Stake Atual: ${self.stake}")
            self.logger.info(f"   ‚Ä¢ Take Profit: {self.take_profit_percentual*100}%")
            self.logger.info(f"   ‚Ä¢ Ativo: {self.ativo}")
            self.logger.info(f"   ‚Ä¢ Growth Rate: {self.growth_rate*100}%")
            self.logger.info(f"   ‚Ä¢ Max Operations: {self.max_operations}")
            self.logger.info(f"   ‚Ä¢ Win Stop: ${self.win_stop}")
            self.logger.info(f"   ‚Ä¢ Loss Limit: ${self.loss_limit}")
            
            # Configura√ß√£o final consolidada
            self.config = {
                'bot_name': self.bot_name,
                'param_stake_inicial': self.initial_stake,
                'param_stake_atual': self.stake,
                'param_take_profit': self.take_profit_percentual * 100,
                'symbol': self.ativo,
                'growth_rate': self.growth_rate * 100,
                'param_max_operations': self.max_operations,
                'win_stop': self.win_stop,
                'loss_limit': self.loss_limit
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao carregar configura√ß√£o: {e}")
            sys.exit(1)
    
    async def send_heartbeat(self):
        """Envia sinal de vida para o banco de dados"""
        try:
            # Atualizar status e heartbeat
            update_data = {
                    'last_heartbeat': datetime.now().isoformat(),
                'status': 'running',
                'process_id': os.getpid() if hasattr(os, 'getpid') else None
            }
            
            self.supabase.table('bot_configurations') \
                .update(update_data) \
                .eq('id', self.bot_id) \
                .execute()
            
            self.last_heartbeat = datetime.now()
            self.logger.info(f"üíì Heartbeat enviado - Status: running, PID: {update_data.get('process_id')}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao enviar heartbeat: {e}")
    
    async def log_operation(self, operation_result: str, profit_percentage: float = 0.0, stake_value: float = 0.0):
        """Registra opera√ß√£o na tabela bot_operation_logs"""
        try:
            # Dados para inser√ß√£o - apenas campos v√°lidos
            log_data = {
                'bot_id': self.bot_id,
                'operation_result': operation_result,
                'profit_percentage': float(profit_percentage),
                'stake_value': float(stake_value),
                'timestamp': datetime.now().isoformat()
            }
            
            self.logger.debug(f"üîÑ Tentando registrar opera√ß√£o no Supabase: {log_data}")
            
            # Inserir no Supabase
            result = self.supabase.table('bot_operation_logs') \
                .insert(log_data) \
                .execute()
            
            self.logger.debug(f"üìä Resposta do Supabase: {result}")
            
            if result.data and len(result.data) > 0:
                self.logger.info(f"‚úÖ Opera√ß√£o registrada no Supabase: {operation_result} - Stake: ${stake_value} - Profit: {profit_percentage}%")
                return True
            else:
                self.logger.error(f"‚ùå Falha ao registrar no Supabase - Resposta vazia: {result}")
                return False
            
        except Exception as e:
            self.logger.error(f"‚ùå ERRO CR√çTICO ao registrar opera√ß√£o no Supabase: {e}")
            self.logger.error(f"üìù Dados que falharam: bot_id={self.bot_id}, result={operation_result}, profit={profit_percentage}%, stake=${stake_value}")
            
            # Tentar reconectar ao Supabase
            try:
                self.logger.info("üîÑ Tentando reconectar ao Supabase...")
                self.supabase = self._init_supabase()
                self.logger.info("‚úÖ Reconex√£o ao Supabase bem-sucedida")
            except Exception as reconnect_error:
                self.logger.error(f"‚ùå Falha na reconex√£o ao Supabase: {reconnect_error}")
            
            return False
    
    async def check_shutdown_signal(self) -> bool:
        """Verifica se deve fazer shutdown graceful"""
        try:
            response = self.supabase.table('bot_configurations') \
                .select('is_active, status') \
                .eq('id', self.bot_id) \
                .single() \
                .execute()
            
            if response.data:
                is_active = response.data.get('is_active', True)
                status = response.data.get('status', 'running')
                
                self.logger.debug(f"üîç Status check - is_active: {is_active}, status: {status}")
                
                if not is_active or status == 'stopped':
                    self.logger.info(f"üõë Sinal de shutdown recebido - is_active: {is_active}, status: {status}")
                    return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao verificar sinal de shutdown: {e}")
            return False
    
    async def _handle_new_tick(self, tick_data):
        """Processa novo tick recebido em tempo real"""
        self.logger.info(f"üëÅÔ∏è TICK RECEBIDO: {tick_data}")
        try:
            tick_value = float(tick_data.get('quote', 0))
            
            if tick_value <= 0:
                self.logger.warning(f"‚ö†Ô∏è Tick inv√°lido recebido: {tick_data}")
                return
            
            # Log do tick recebido
            self.logger.debug(f"üìä Tick recebido: {tick_value:.5f}")
            
            # Adicionar ao buffer
            self.tick_buffer.append(tick_value)
            
            # Manter apenas os √∫ltimos 5 ticks
            if len(self.tick_buffer) > 5:
                removed_tick = self.tick_buffer.pop(0)
                self.logger.debug(f"üóëÔ∏è Tick removido do buffer: {removed_tick:.5f}")
            
            # Log do buffer atual
            self.logger.debug(f"üìã Buffer atual ({len(self.tick_buffer)} ticks): {[f'{t:.5f}' for t in self.tick_buffer]}")
            
            # Analisar padr√£o quando tiver 5 ticks
            if len(self.tick_buffer) == 5:
                self.logger.info(f"üìä Buffer completo ({len(self.tick_buffer)} ticks): {[f'{t:.5f}' for t in self.tick_buffer]}")
                
                pattern_detected = self.analisar_padrao_entrada(self.tick_buffer.copy())
                
                if pattern_detected:
                    self.logger.info(f"üéØ PADR√ÉO DETECTADO! Buffer: {[f'{t:.5f}' for t in self.tick_buffer]}")
                    
                    # Log da opera√ß√£o
                    await self.log_operation(
                        operation_result='SIGNAL_DETECTED',
                        profit_percentage=0.0,
                        stake_value=self.stake
                    )
                else:
                    self.logger.info(f"‚è≥ Padr√£o n√£o detectado. Buffer: {[f'{t:.5f}' for t in self.tick_buffer]}")
                
                # Enviar para queue
                success = self.sync_system.queue_signal(self.tick_buffer.copy(), pattern_detected)
                if success:
                    self.logger.info(f"üì§ Sinal enviado para queue - Pattern: {pattern_detected}")
                else:
                    self.logger.warning(f"‚ö†Ô∏è Falha ao enviar sinal para queue")
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao processar tick: {e}")
            self.logger.error(f"üìä Tick data: {tick_data}")
            self.logger.error(f"üìã Buffer atual: {self.tick_buffer}")
    
    def analisar_padrao_entrada(self, ticks: List[float]) -> bool:
        """Analisa padr√£o de entrada baseado na l√≥gica XML do Accumulator"""
        if len(ticks) < 5:
            self.logger.warning(f"‚ö†Ô∏è Ticks insuficientes para an√°lise: {len(ticks)} < 5")
            return False
        
        try:
            # L√ìGICA XML DO ACCUMULATOR STANDALONE
            # Padr√£o: 4 ticks consecutivos em alta seguidos de 1 em baixa
            # ticks[0] = tick mais antigo, ticks[4] = tick mais recente
            
            # Obter os 5 ticks em ordem cronol√≥gica
            tick1 = ticks[0]  # Mais antigo
            tick2 = ticks[1]
            tick3 = ticks[2]
            tick4 = ticks[3]
            tick5 = ticks[4]  # Mais recente
            
            # Verificar se h√° tend√™ncia de alta nos primeiros 4 ticks
            trend_up = (tick2 > tick1 and tick3 > tick2 and tick4 > tick3)
            
            # Verificar se o √∫ltimo tick √© uma queda (confirma o padr√£o)
            last_fall = tick5 < tick4
            
            # Padr√£o detectado: tend√™ncia de alta + queda final
            entrada_xml = trend_up and last_fall
            
            # Log detalhado para debug
            self.logger.info(f"üìä VERIFICA√á√ÉO DE PADR√ÉO XML:")
            self.logger.info(f"   ‚Ä¢ tick1 (antigo): {tick1:.5f}")
            self.logger.info(f"   ‚Ä¢ tick2: {tick2:.5f} {'‚ÜóÔ∏è' if tick2 > tick1 else '‚ÜòÔ∏è'}")
            self.logger.info(f"   ‚Ä¢ tick3: {tick3:.5f} {'‚ÜóÔ∏è' if tick3 > tick2 else '‚ÜòÔ∏è'}")
            self.logger.info(f"   ‚Ä¢ tick4: {tick4:.5f} {'‚ÜóÔ∏è' if tick4 > tick3 else '‚ÜòÔ∏è'}")
            self.logger.info(f"   ‚Ä¢ tick5 (recente): {tick5:.5f} {'‚ÜóÔ∏è' if tick5 > tick4 else '‚ÜòÔ∏è'}")
            self.logger.info(f"   ‚Ä¢ Tend√™ncia alta: {trend_up}")
            self.logger.info(f"   ‚Ä¢ Queda final: {last_fall}")
            self.logger.info(f"   ‚Ä¢ Padr√£o esperado: 4 ticks ‚ÜóÔ∏è + 1 tick ‚ÜòÔ∏è")
            self.logger.info(f"   ‚Ä¢ Entrada detectada: {entrada_xml}")
            
            if entrada_xml:
                self.logger.info("üéØ PADR√ÉO DE ENTRADA DETECTADO! (XML MATCH)")
                self.logger.info("üöÄ EXECUTANDO COMPRA DO CONTRATO ACCUMULATOR...")
            else:
                self.logger.info("‚è≥ Aguardando padr√£o correto...")
                
            return entrada_xml
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro na an√°lise de padr√£o: {e}")
            self.logger.error(f"üìä Ticks recebidos: {ticks}")
            return False
    
    async def executar_compra(self) -> Optional[str]:
        """Executa compra baseada nos par√¢metros do bot com valida√ß√£o robusta"""
        try:
            # VALIDA√á√ÉO CR√çTICA DOS PAR√ÇMETROS ANTES DA COMPRA
            # 1. Validar stake m√≠nimo/m√°ximo (conforme Deriv API)
            STAKE_MAXIMO_DERIV = 1000.0
            stake_para_usar = min(self.stake, STAKE_MAXIMO_DERIV)
            
            if stake_para_usar < 0.35:
                self.logger.error(f"‚ùå Stake muito baixo: ${stake_para_usar} (m√≠nimo: $0.35)")
                return None
                
            if stake_para_usar > STAKE_MAXIMO_DERIV:
                self.logger.error(f"‚ùå Stake muito alto: ${stake_para_usar} (m√°ximo: ${STAKE_MAXIMO_DERIV})")
                return None
            
            # 2. Validar growth rate (1-5%)
            if self.growth_rate < 0.01 or self.growth_rate > 0.05:
                self.logger.error(f"‚ùå Growth rate inv√°lido: {self.growth_rate*100}% (deve ser 1-5%)")
                return None
            
            # 3. Validar s√≠mbolo
            if not self.ativo or not isinstance(self.ativo, str):
                self.logger.error(f"‚ùå S√≠mbolo inv√°lido: {self.ativo}")
                return None
            
            # 4. Validar e calcular take profit
            if self.take_profit_percentual <= 0 or self.take_profit_percentual > 1:
                self.logger.error(f"‚ùå Take profit inv√°lido: {self.take_profit_percentual*100}% (deve ser 0-100%)")
                return None
            
            # CORRE√á√ÉO: Formatar take_profit_amount para exatamente 2 casas decimais
            take_profit_amount = round(self.stake * self.take_profit_percentual, 2)
            
            # LOG DETALHADO DOS PAR√ÇMETROS VALIDADOS
            self.logger.info(f"üîç PAR√ÇMETROS VALIDADOS PARA COMPRA:")
            self.logger.info(f"   ‚Ä¢ Stake Original: ${self.stake}")
            self.logger.info(f"   ‚Ä¢ Stake Limitado: ${stake_para_usar}")
            self.logger.info(f"   ‚Ä¢ Take Profit: {self.take_profit_percentual*100}% (${take_profit_amount:.2f})")
            self.logger.info(f"   ‚Ä¢ Ativo: {self.ativo}")
            self.logger.info(f"   ‚Ä¢ Growth Rate: {self.growth_rate*100}%")
            self.logger.info(f"   ‚Ä¢ Currency: USD")
            self.logger.info(f"   ‚Ä¢ Basis: stake")
            
            # ESTRUTURA CORRETA PARA ACCUMULATOR CONFORME DOCUMENTA√á√ÉO DERIV
            # Primeiro fazer proposal para obter o ID
            proposal_params = {
                "proposal": 1,
                "contract_type": "ACCU",
                "symbol": self.ativo,
                "amount": round(float(stake_para_usar), 2),  # CORRE√á√ÉO: Arredondar para 2 casas decimais
                "basis": "stake",
                "currency": "USD",
                "growth_rate": self.growth_rate,
                "limit_order": {
                    "take_profit": round(float(take_profit_amount), 2)  # CORRE√á√ÉO: Arredondar para 2 casas decimais
                }
            }
            
            self.logger.info(f"üöÄ SOLICITANDO PROPOSTA ACCU:")
            self.logger.info(f"   ‚Ä¢ Par√¢metros: {proposal_params}")
            
            # Executar proposta via API com lock
            self.logger.info(f"üîí Adquirindo lock do WebSocket...")
            async with self.websocket_lock:
                self.logger.info(f"üîí Lock adquirido, executando proposta...")
                proposal_response = await self.api_manager.proposal(proposal_params)
                self.logger.info(f"üîí Lock liberado")
            
            if not proposal_response or 'proposal' not in proposal_response:
                self.logger.error(f"‚ùå Falha na proposta: {proposal_response}")
                await self.log_operation(
                    operation_result='PROPOSAL_FAILED',
                    profit_percentage=0.0,
                    stake_value=stake_para_usar
                )
                return None
            
            proposal = proposal_response['proposal']
            proposal_id = proposal.get('id')
            ask_price = proposal.get('ask_price')
            
            if not proposal_id:
                self.logger.error(f"‚ùå ID da proposta inv√°lido: {proposal}")
                return None
            
            self.logger.info(f"‚úÖ Proposta obtida - ID: {proposal_id}, Pre√ßo: ${ask_price}")
            
            # Agora executar a compra usando o proposal_id
            buy_params = {
                "buy": proposal_id,
                "price": ask_price
            }
            
            self.logger.info(f"üí∞ EXECUTANDO COMPRA ACCU:")
            self.logger.info(f"   ‚Ä¢ Proposal ID: {proposal_id}")
            self.logger.info(f"   ‚Ä¢ Pre√ßo: ${ask_price}")
            self.logger.info(f"   ‚Ä¢ Stake: ${stake_para_usar}")
            self.logger.info(f"   ‚Ä¢ Ativo: {self.ativo}")
            
            # Log da tentativa
            await self.log_operation(
                operation_result='BUY_PENDING',
                profit_percentage=0.0,
                stake_value=stake_para_usar
            )
            
            # Executar compra via API com lock
            self.logger.info(f"üîí Adquirindo lock do WebSocket para compra...")
            async with self.websocket_lock:
                self.logger.info(f"üîí Lock adquirido, executando compra...")
                buy_response = await self.api_manager.buy(buy_params)
                self.logger.info(f"üîí Lock liberado")
            
            if buy_response and 'buy' in buy_response:
                contract_id = buy_response['buy']['contract_id']
                self.logger.info(f"‚úÖ Compra executada - Contract ID: {contract_id}")
                
                # Atualizar estat√≠sticas
                self.total_operations += 1
                self.logger.info(f"üìä Opera√ß√£o #{self.total_operations} registrada")
                
                # Log de sucesso
                await self.log_operation(
                    operation_result='BUY_SUCCESS',
                    profit_percentage=0.0,
                    stake_value=stake_para_usar
                )
                
                return contract_id
            else:
                self.logger.error(f"‚ùå Falha na compra: {buy_response}")
                self.failed_operations += 1
                
                await self.log_operation(
                    operation_result='BUY_FAILED',
                    profit_percentage=0.0,
                    stake_value=stake_para_usar
                )
                
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro na execu√ß√£o da compra: {e}")
            self.failed_operations += 1
            
            await self.log_operation(
                operation_result='BUY_ERROR',
                profit_percentage=0.0,
                stake_value=self.stake
            )
            
            return None
    
    async def monitorar_contrato(self, contract_id: str) -> float:
        """Monitora contrato at√© finaliza√ß√£o"""
        try:
            self.logger.info(f"üëÅÔ∏è Monitorando contrato {contract_id}...")
            
            start_time = time.time()
            check_count = 0
            
            while True:
                check_count += 1
                
                # Verificar status do contrato com lock
                async with self.websocket_lock:
                    self.logger.debug(f"üîç Verifica√ß√£o {check_count} do contrato {contract_id}")
                    response = await self.api_manager.proposal_open_contract(contract_id)
                    self.logger.debug(f"üîç Response recebido para contrato {contract_id}")
                
                if response and 'proposal_open_contract' in response:
                    contract = response['proposal_open_contract']
                    
                    # Log do status atual
                    is_sold = contract.get('is_sold', False)
                    current_profit = contract.get('profit', 0)
                    
                    self.logger.debug(f"üìä Status contrato {contract_id}: is_sold={is_sold}, profit=${current_profit}")
                    
                    if is_sold:
                        # Contrato finalizado
                        profit = float(current_profit)
                        
                        self.logger.info(f"üèÅ Contrato {contract_id} finalizado - Lucro: ${profit}")
                        
                        # Atualizar estat√≠sticas
                        if profit > 0:
                            self.successful_operations += 1
                            self.logger.info(f"‚úÖ Opera√ß√£o ganha #{self.successful_operations}")
                        else:
                            self.failed_operations += 1
                            self.logger.info(f"‚ùå Opera√ß√£o perdida #{self.failed_operations}")
                        
                        self.total_profit += profit
                        
                        # Log do resultado
                        profit_percentage = (profit / self.stake) * 100 if self.stake > 0 else 0.0
                        await self.log_operation(
                            operation_result='WON' if profit > 0 else 'LOST',
                            profit_percentage=profit_percentage,
                            stake_value=self.stake
                        )
                        
                        # ATUALIZAR STAKE BASEADO NO GROWTH RATE
                        if profit > 0:
                            # Opera√ß√£o ganha: aumentar stake
                            novo_stake = self.stake * (1 + self.growth_rate)
                            self.logger.info(f"üí∞ Stake aumentado: ${self.stake:.2f} ‚Üí ${novo_stake:.2f} (+{self.growth_rate*100}%)")
                            self.stake = novo_stake
                        else:
                            # Opera√ß√£o perdida: manter stake atual
                            self.logger.info(f"üìâ Stake mantido ap√≥s perda: ${self.stake:.2f}")
                        
                        return profit
                else:
                    self.logger.warning(f"‚ö†Ô∏è Resposta inv√°lida do contrato {contract_id}: {response}")
                
                # Aguardar antes da pr√≥xima verifica√ß√£o
                await asyncio.sleep(1)
                
                # Timeout de seguran√ßa (5 minutos)
                if time.time() - start_time > 300:
                    self.logger.warning(f"‚è∞ Timeout no monitoramento do contrato {contract_id} ap√≥s {check_count} verifica√ß√µes")
                    break
            
            self.logger.error(f"‚ùå Monitoramento do contrato {contract_id} interrompido")
            return 0.0
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro no monitoramento do contrato {contract_id}: {e}")
            return 0.0
    
    async def _process_signals_from_queue(self):
        """Processa sinais da queue"""
        self.logger.info(f"üîÑ Processador de sinais iniciado")
        
        while not self.shutdown_requested:
            try:
                signal = self.sync_system.get_next_signal()
                
                if signal and signal.pattern_detected:
                    self.logger.info(f"üéØ SINAL PROCESSADO - Padr√£o detectado: {[f'{t:.5f}' for t in signal.ticks]}")
                    
                    if self.sync_system.can_execute_operation():
                        self.logger.info(f"‚úÖ Executando opera√ß√£o...")
                        
                        async with self.sync_system.operation_semaphore:
                            self.logger.info(f"üîí Sem√°foro adquirido, executando compra...")
                            contract_id = await self.executar_compra()
                            
                            if contract_id:
                                self.logger.info(f"‚úÖ Compra executada, monitorando contrato {contract_id}")
                                lucro = await self.monitorar_contrato(contract_id)
                                self.sync_system.record_operation_success()
                                self.logger.info(f"üí∞ Opera√ß√£o finalizada - Lucro: ${lucro}")
                            else:
                                self.logger.error(f"‚ùå Falha na execu√ß√£o da compra")
                                self.sync_system.record_operation_failure()
                    else:
                        self.logger.info(f"‚è≥ Sistema ocupado, aguardando...")
                elif signal:
                    self.logger.debug(f"üìä Sinal recebido sem padr√£o: {[f'{t:.5f}' for t in signal.ticks]}")
                else:
                    # Sem sinais na queue
                    pass
                
                await asyncio.sleep(0.1)
                
            except Exception as e:
                self.logger.error(f"‚ùå Erro no processamento de sinais: {e}")
                await asyncio.sleep(1)
        
        self.logger.info(f"üõë Processador de sinais finalizado")
    
    async def _heartbeat_loop(self):
        """Loop de heartbeat"""
        self.logger.info(f"üíì Loop de heartbeat iniciado - Intervalo: {self.heartbeat_interval}s")
        
        while not self.shutdown_requested:
            try:
                await self.send_heartbeat()
                
                # Verificar sinal de shutdown
                if await self.check_shutdown_signal():
                    self.logger.info(f"üõë Sinal de shutdown detectado no heartbeat")
                    self.shutdown_requested = True
                    break
                
                # Log de status
                self.logger.debug(f"üíì Heartbeat enviado, aguardando pr√≥ximo...")
                await asyncio.sleep(self.heartbeat_interval)
                
            except Exception as e:
                self.logger.error(f"‚ùå Erro no heartbeat: {e}")
                self.logger.info(f"‚è≥ Aguardando 10s antes do pr√≥ximo heartbeat...")
                await asyncio.sleep(10)
        
        self.logger.info(f"üõë Loop de heartbeat finalizado")
    
    async def run(self):
        """Loop principal do bot"""
        try:
            # Log de in√≠cio
            self.logger.info(f"üöÄ Iniciando bot {self.bot_name}...")
            self.logger.info(f"üÜî Bot ID: {self.bot_id}")
            self.logger.info(f"üí∞ Stake Inicial: ${self.stake}")
            self.logger.info(f"üìà Take Profit: {self.take_profit_percentual*100}%")
            self.logger.info(f"üéØ Ativo: {self.ativo}")
            self.logger.info(f"üìä Growth Rate: {self.growth_rate*100}%")
            
            await self.log_operation(
                operation_result='BOT_START',
                profit_percentage=0.0,
                stake_value=self.stake
            )
            
            # Conectar √† API
            self.logger.info(f"üîó Conectando √† API Deriv...")
            await self.api_manager.connect()
            
            # Subscrever ticks
            self.logger.info(f"üì° Subscrevendo ticks do ativo: {self.ativo}")
            await self.api_manager.subscribe_ticks(self.ativo)
            self.api_manager.set_bot_instance(self)
            
            self.logger.info(f"‚úÖ Conex√£o estabelecida e ticks subscritos")
            
            self.running = True
            
            # Iniciar tasks
            self.logger.info(f"üîÑ Iniciando tasks...")
            
            tasks = [
                asyncio.create_task(self._process_signals_from_queue(), name="signal_processor"),
                asyncio.create_task(self._heartbeat_loop(), name="heartbeat")
            ]
            
            self.logger.info(f"‚úÖ {self.bot_name} iniciado com sucesso")
            self.logger.info(f"üìã Tasks ativas: {len(tasks)}")
            
            # Aguardar at√© shutdown
            self.logger.info(f"‚è≥ Aguardando tasks...")
            await asyncio.gather(*tasks, return_exceptions=True)
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro cr√≠tico: {e}")
            self.logger.error(f"üìã Stack trace:", exc_info=True)
        finally:
            self.logger.info(f"üõë Finalizando bot...")
            await self.shutdown()
    
    async def shutdown(self):
        """Shutdown graceful"""
        self.logger.info(f"üõë Finalizando {self.bot_name}...")
        
        self.running = False
        self.shutdown_requested = True
        
        # Log de parada
        self.logger.info(f"üìù Registrando parada do bot...")
        await self.log_operation(
            operation_result='BOT_STOP',
            profit_percentage=0.0,
            stake_value=self.stake
        )
        
        # Atualizar status final
        try:
            self.logger.info(f"üìä Atualizando status final no banco...")
            update_data = {
                    'status': 'stopped',
                'process_id': None,
                'last_heartbeat': datetime.now().isoformat()
            }
            
            self.supabase.table('bot_configurations') \
                .update(update_data) \
                .eq('id', self.bot_id) \
                .execute()
                
            self.logger.info(f"‚úÖ Status final atualizado: stopped")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao atualizar status final: {e}")
        
        # Desconectar API
        try:
            self.logger.info(f"üîå Desconectando da API...")
            await self.api_manager.disconnect()
            self.logger.info(f"‚úÖ API desconectada")
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao desconectar API: {e}")
        
        # Log final
        self.logger.info(f"üìä Estat√≠sticas finais:")
        self.logger.info(f"   ‚Ä¢ Total Operations: {self.total_operations}")
        self.logger.info(f"   ‚Ä¢ Successful: {self.successful_operations}")
        self.logger.info(f"   ‚Ä¢ Failed: {self.failed_operations}")
        self.logger.info(f"   ‚Ä¢ Total Profit: ${self.total_profit}")
        self.logger.info(f"   ‚Ä¢ Stake Final: ${self.stake}")
        
        self.logger.info(f"‚úÖ {self.bot_name} finalizado")

class DerivWebSocketNativo:
    """Gerenciador WebSocket nativo para Deriv API"""
    
    def __init__(self, logger):
        self.logger = logger
        self.ws = None
        self.connected = False
        self.authorized = False
        self.bot_instance = None
        
        # Request management (sistema do accumulator_standalone)
        self.req_id_counter = 0
        self.req_id_lock = threading.Lock()
        self.pending_requests = {}
        self.request_timeout = 15
        
        # Rate limiting
        self.last_request_time = 0
        self.min_request_interval = 0.5
        
        # Configura√ß√µes
        self.app_id = "85515"
        self.api_token = os.getenv('DERIV_API_TOKEN')
        
        if not self.api_token:
            raise ValueError("DERIV_API_TOKEN deve estar definido")
    
    def _get_next_req_id(self):
        """Gera pr√≥ximo request ID de forma thread-safe"""
        with self.req_id_lock:
            self.req_id_counter += 1
            req_id = self.req_id_counter
            self.logger.debug(f"üÜî Novo request ID gerado: {req_id}")
            return req_id
    
    def set_bot_instance(self, bot_instance):
        """Define inst√¢ncia do bot para callbacks"""
        self.bot_instance = bot_instance
        self.logger.info(f"üîó Bot instance definida: {type(bot_instance).__name__}")
        self.logger.info(f"üÜî Bot ID: {getattr(bot_instance, 'bot_id', 'N/A')}")
        self.logger.info(f"üìõ Bot Name: {getattr(bot_instance, 'bot_name', 'N/A')}")
    
    async def connect(self):
        """Conecta ao WebSocket"""
        try:
            self.logger.info("üîó Conectando ao WebSocket...")
            
            url = f"wss://ws.derivws.com/websockets/v3?app_id={self.app_id}"
            self.logger.info(f"üåê URL: {url}")
            
            self.ws = await websockets.connect(url)
            self.connected = True
            self.logger.info("üîå WebSocket conectado")
            
            # Iniciar loop de mensagens ANTES da autentica√ß√£o
            self.logger.info("üîÑ Iniciando loop de mensagens...")
            asyncio.create_task(self._handle_messages())
            
            # Autenticar
            self.logger.info("üîê Autenticando...")
            await self._authenticate()
            
            self.logger.info("‚úÖ WebSocket conectado e autenticado")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro na conex√£o: {e}")
            self.connected = False
            raise
    
    async def _authenticate(self):
        """Autentica com a API"""
        try:
            self.logger.info("üîë Enviando credenciais...")
            
            auth_message = {
                "authorize": self.api_token
            }
            
            self.logger.debug(f"üîê Auth message: {auth_message}")
            response = await self._send_request(auth_message)
            
            if 'authorize' in response:
                auth_data = response['authorize']
                self.authorized = True
                self.logger.info("‚úÖ Autentica√ß√£o bem-sucedida")
                self.logger.info(f"üë§ Usu√°rio: {auth_data.get('name', 'N/A')}")
                self.logger.info(f"üí∞ Saldo: ${auth_data.get('balance', 'N/A')}")
            else:
                error_msg = f"Falha na autentica√ß√£o: {response}"
                self.logger.error(f"‚ùå {error_msg}")
                raise Exception(error_msg)
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro na autentica√ß√£o: {e}")
            self.authorized = False
            raise
    
    async def _handle_messages(self):
        """Processa mensagens recebidas do WebSocket"""
        try:
            self.logger.info("üîÑ Loop de mensagens iniciado")
            
            async for message in self.ws:
                try:
                    data = json.loads(message)
                    req_id = data.get('req_id')
                    
                    self.logger.debug(f"üì• Mensagem recebida - req_id: {req_id}")
                    
                    # Processar ticks em tempo real
                    if 'tick' in data and self.bot_instance:
                        self.logger.debug(f"üìä Tick recebido: {data['tick']}")
                        await self.bot_instance._handle_new_tick(data['tick'])
                    
                    # Resolver requests pendentes
                    if req_id and req_id in self.pending_requests:
                        future = self.pending_requests.pop(req_id)
                        if not future.done():
                            future.set_result(data)
                            self.logger.debug(f"‚úÖ Request {req_id} resolvido")
                    
                    # Log de mensagens especiais
                    if 'error' in data:
                        self.logger.warning(f"‚ö†Ô∏è Mensagem de erro: {data['error']}")
                    elif 'msg_type' in data:
                        self.logger.debug(f"üìã Tipo de mensagem: {data['msg_type']}")
                    
                except json.JSONDecodeError as e:
                    self.logger.error(f"‚ùå Erro ao decodificar JSON: {e}")
                    self.logger.error(f"üìÑ Mensagem raw: {message}")
                except Exception as e:
                    self.logger.error(f"‚ùå Erro ao processar mensagem: {e}")
                    
        except websockets.exceptions.ConnectionClosed:
            self.logger.warning("‚ö†Ô∏è Conex√£o WebSocket fechada")
            self.connected = False
        except Exception as e:
            self.logger.error(f"‚ùå Erro no handler de mensagens: {e}")
            self.connected = False
    
    async def _send_request(self, message):
        """Envia request e aguarda response"""
        req_id = None
        try:
            # Rate limiting
            current_time = time.time()
            time_since_last = current_time - self.last_request_time
            if time_since_last < self.min_request_interval:
                wait_time = self.min_request_interval - time_since_last
                self.logger.debug(f"‚è≥ Rate limiting: aguardando {wait_time:.2f}s")
                await asyncio.sleep(wait_time)
            
            req_id = message.get('req_id')
            if not req_id:
                req_id = self._get_next_req_id()
                message['req_id'] = req_id
            
            self.logger.debug(f"üÜî Request ID: {req_id}")
            
            # Criar Future para aguardar response
            future = asyncio.Future()
            self.pending_requests[req_id] = future
            
            # Enviar mensagem
            message_str = json.dumps(message)
            self.logger.debug(f"üì§ Enviando request {req_id}: {message_str}")
            
            await self.ws.send(message_str)
            self.last_request_time = time.time()
            
            # Aguardar response com timeout
            try:
                self.logger.debug(f"‚è≥ Aguardando response para request {req_id}...")
                response = await asyncio.wait_for(future, timeout=self.request_timeout)
                self.logger.debug(f"‚úÖ Response recebido para request {req_id}")
                return response
            except asyncio.TimeoutError:
                # Cleanup em caso de timeout
                self.pending_requests.pop(req_id, None)
                timeout_msg = f"Timeout aguardando response para req_id {req_id}"
                self.logger.error(f"‚è∞ {timeout_msg}")
                raise Exception(timeout_msg)
                
        except Exception as e:
            # Cleanup em caso de erro
            if req_id:
                self.pending_requests.pop(req_id, None)
            self.logger.error(f"‚ùå Erro no request {req_id}: {e}")
            raise e
    
    async def subscribe_ticks(self, symbol: str):
        """Subscreve ticks de um s√≠mbolo"""
        try:
            self.logger.info(f"üì° Subscrevendo ticks do s√≠mbolo: {symbol}")
            
            message = {
                "ticks": symbol,
                "subscribe": 1
            }
            
            self.logger.debug(f"üì° Subscribe message: {message}")
            response = await self._send_request(message)
            
            if 'error' in response:
                error_msg = f"Erro na subscri√ß√£o: {response['error']}"
                self.logger.error(f"‚ùå {error_msg}")
                raise Exception(error_msg)
            else:
                self.logger.info(f"‚úÖ Subscrito aos ticks de {symbol}")
                self.logger.debug(f"üì° Response: {response}")
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro na subscri√ß√£o de ticks: {e}")
            raise
    
    async def buy(self, params):
        """Executa compra"""
        try:
            self.logger.info(f"üí∞ Executando compra com par√¢metros: {params}")
            
            response = await self._send_request(params)
            
            if 'error' in response:
                error_msg = f"Deriv API Error: {response['error']['message']}"
                self.logger.error(f"‚ùå {error_msg}")
                raise Exception(error_msg)
                
            self.logger.info(f"‚úÖ Compra executada com sucesso")
            self.logger.debug(f"üí∞ Response: {response}")
            
            return response
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro na execu√ß√£o da compra: {e}")
            raise
    
    async def proposal_open_contract(self, contract_id: str):
        """Consulta contrato aberto"""
        message = {
            "proposal_open_contract": 1,
            "contract_id": contract_id
        }
        
        response = await self._send_request(message)
        
        if 'error' in response:
            raise Exception(f"Deriv API Error: {response['error']['message']}")
        
        return response
    
    async def proposal(self, params):
        """Solicita proposta para contrato"""
        try:
            self.logger.info(f"üìã Solicitando proposta com par√¢metros: {params}")
            
            response = await self._send_request(params)
            
            if 'error' in response:
                error_msg = f"Deriv API Error: {response['error']['message']}"
                self.logger.error(f"‚ùå {error_msg}")
                raise Exception(error_msg)
            
            self.logger.info(f"‚úÖ Proposta solicitada com sucesso")
            self.logger.debug(f"üìã Response: {response}")
            
            return response
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro na solicita√ß√£o de proposta: {e}")
            raise
    
    async def disconnect(self):
        """Desconecta WebSocket"""
        try:
            self.logger.info("üîå Desconectando WebSocket...")
            
            self.connected = False
            self.authorized = False
            
            if self.ws:
                await self.ws.close()
                self.ws = None
                self.logger.info("‚úÖ WebSocket desconectado")
            else:
                self.logger.info("‚ÑπÔ∏è WebSocket j√° estava desconectado")
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao desconectar WebSocket: {e}")
            # For√ßar desconex√£o
            self.connected = False
            self.authorized = False
            self.ws = None

def parse_arguments():
    """Parse argumentos da linha de comando"""
    parser = argparse.ArgumentParser(description='Bot Instance - Oper√°rio Gen√©rico')
    parser.add_argument('--bot_id', type=str, required=True, help='ID do bot no banco de dados')
    return parser.parse_args()

async def main():
    """Fun√ß√£o principal"""
    args = parse_arguments()
    
    print("")
    print("="*60)
    print("ü§ñ BOT INSTANCE - OPER√ÅRIO GEN√âRICO")
    print("="*60)
    print(f"üÜî Bot ID: {args.bot_id}")
    print(f"üìÖ Iniciado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print("="*60)
    print("")
    
    try:
        print(f"üîß Inicializando BotInstance para ID: {args.bot_id}")
        bot = BotInstance(args.bot_id)
        
        print(f"üöÄ Executando bot...")
        await bot.run()
        
    except KeyboardInterrupt:
        print("\n‚å®Ô∏è Interrup√ß√£o manual detectada")
        if 'bot' in locals():
            print("üõë Finalizando bot...")
            await bot.shutdown()
    except Exception as e:
        print(f"‚ùå Erro fatal: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
#!/usr/bin/env python3
"""
Script de Inicializa√ß√£o dos Sistemas de Radar
Permite executar o radar analyzer original e o novo radar analyzer tunder
"""

import os
import sys
import time
import subprocess
import threading
from datetime import datetime

def print_header():
    """Imprime o cabe√ßalho do sistema"""
    print("\n" + "=" * 70)
    print("üéØ SISTEMA DE RADAR ANALYZERS - DERIV TRADING BOTS")
    print("=" * 70)
    print(f"üìÖ Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print(f"üìÅ Diret√≥rio: {os.getcwd()}")
    print("=" * 70)
    print("üí° MODO AUTOM√ÅTICO: python start_radar_systems.py --auto")
    print("üìã MODO INTERATIVO: python start_radar_systems.py")
    print("=" * 70)

def verificar_arquivos():
    """Verifica se os arquivos necess√°rios existem"""
    arquivos_necessarios = [
        'radar_analyzer.py',
        'radar_analyzer_tunder.py',
        '.env'
    ]
    
    print("\nüîç Verificando arquivos necess√°rios...")
    arquivos_faltando = []
    
    for arquivo in arquivos_necessarios:
        if os.path.exists(arquivo):
            print(f"‚úÖ {arquivo} - OK")
        else:
            print(f"‚ùå {arquivo} - FALTANDO")
            arquivos_faltando.append(arquivo)
    
    if arquivos_faltando:
        print(f"\n‚ö†Ô∏è AVISO: {len(arquivos_faltando)} arquivo(s) faltando:")
        for arquivo in arquivos_faltando:
            print(f"   ‚Ä¢ {arquivo}")
        return False
    
    print("\n‚úÖ Todos os arquivos necess√°rios est√£o presentes")
    return True

def executar_radar_original():
    """Executa o radar analyzer original (Accumulator)"""
    print("\nüöÄ Iniciando Radar Analyzer Original (Accumulator)...")
    try:
        subprocess.run([sys.executable, 'radar_analyzer.py'], check=True)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao executar radar analyzer original: {e}")
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Radar Analyzer Original interrompido pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro inesperado no radar analyzer original: {e}")

def executar_radar_tunder():
    """Executa o radar analyzer tunder"""
    print("\nüöÄ Iniciando Radar Analyzer Tunder...")
    try:
        subprocess.run([sys.executable, 'radar_analyzer_tunder.py'], check=True)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao executar radar analyzer tunder: {e}")
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Radar Analyzer Tunder interrompido pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro inesperado no radar analyzer tunder: {e}")

def executar_teste_tunder():
    """Executa o teste do radar analyzer tunder"""
    print("\nüß™ Executando teste do Radar Analyzer Tunder...")
    try:
        subprocess.run([sys.executable, 'test_radar_tunder.py'], check=True)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao executar teste: {e}")
    except Exception as e:
        print(f"‚ùå Erro inesperado no teste: {e}")

def executar_ambos_paralelo():
    """Executa ambos os radars em paralelo usando threads"""
    print("\nüîÑ Iniciando ambos os Radar Analyzers em paralelo...")
    print("‚ö†Ô∏è ATEN√á√ÉO: Ambos os sistemas ir√£o rodar simultaneamente")
    print("‚ö†Ô∏è Use Ctrl+C para interromper ambos os processos")
    
    # Criar threads para cada radar
    thread_original = threading.Thread(target=executar_radar_original, name="RadarOriginal")
    thread_tunder = threading.Thread(target=executar_radar_tunder, name="RadarTunder")
    
    try:
        # Iniciar ambas as threads
        thread_original.start()
        time.sleep(2)  # Pequeno delay entre inicializa√ß√µes
        thread_tunder.start()
        
        print("\n‚úÖ Ambos os radars foram iniciados")
        print("üìä Monitorando execu√ß√£o... (Ctrl+C para parar)")
        
        # Aguardar ambas as threads
        thread_original.join()
        thread_tunder.join()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Interrup√ß√£o solicitada pelo usu√°rio")
        print("‚è≥ Aguardando finaliza√ß√£o dos processos...")
        
        # As threads ir√£o finalizar naturalmente com o KeyboardInterrupt
        if thread_original.is_alive():
            thread_original.join(timeout=5)
        if thread_tunder.is_alive():
            thread_tunder.join(timeout=5)
            
        print("‚úÖ Ambos os radars foram finalizados")
    
    except Exception as e:
        print(f"‚ùå Erro na execu√ß√£o paralela: {e}")

def mostrar_menu():
    """Mostra o menu de op√ß√µes"""
    print("\nüìã OP√á√ïES DISPON√çVEIS:")
    print("=" * 30)
    print("1Ô∏è‚É£  Executar Radar Analyzer Original (Accumulator)")
    print("2Ô∏è‚É£  Executar Radar Analyzer Tunder")
    print("3Ô∏è‚É£  Executar ambos em paralelo")
    print("4Ô∏è‚É£  Testar Radar Analyzer Tunder")
    print("5Ô∏è‚É£  Verificar status dos sistemas")
    print("0Ô∏è‚É£  Sair")
    print("=" * 30)

def verificar_status_sistemas():
    """Verifica o status dos sistemas"""
    print("\nüìä STATUS DOS SISTEMAS")
    print("=" * 40)
    
    # Verificar se os processos est√£o rodando (simplificado)
    print("üîç Verificando arquivos de configura√ß√£o...")
    
    # Verificar .env
    if os.path.exists('.env'):
        print("‚úÖ Arquivo .env encontrado")
        try:
            with open('.env', 'r') as f:
                content = f.read()
                if 'SUPABASE_URL' in content and 'SUPABASE_KEY' in content:
                    print("‚úÖ Credenciais Supabase configuradas")
                else:
                    print("‚ö†Ô∏è Credenciais Supabase podem estar incompletas")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao ler .env: {e}")
    else:
        print("‚ùå Arquivo .env n√£o encontrado")
    
    # Verificar arquivos Python
    arquivos_radar = {
        'radar_analyzer.py': 'Radar Analyzer Original',
        'radar_analyzer_tunder.py': 'Radar Analyzer Tunder',
        'test_radar_tunder.py': 'Teste Radar Tunder'
    }
    
    print("\nüêç Arquivos Python:")
    for arquivo, descricao in arquivos_radar.items():
        if os.path.exists(arquivo):
            size = os.path.getsize(arquivo)
            print(f"‚úÖ {descricao}: {arquivo} ({size} bytes)")
        else:
            print(f"‚ùå {descricao}: {arquivo} - N√ÉO ENCONTRADO")
    
    print("\nüí° INFORMA√á√ïES IMPORTANTES:")
    print("‚Ä¢ Radar Original: Analisa 'scalping_accumulator_bot_logs'")
    print("‚Ä¢ Radar Tunder: Analisa 'tunder_bot_logs'")
    print("‚Ä¢ Ambos salvam sinais em 'radar_de_apalancamiento_signals'")
    print("‚Ä¢ Radar Tunder usa filtros mais conservadores (1% growth rate)")

def executar_automatico():
    """Executa automaticamente ambos os radares sem menu interativo"""
    print_header()
    
    # Verificar arquivos necess√°rios
    if not verificar_arquivos():
        print("\n‚ùå N√£o √© poss√≠vel continuar sem os arquivos necess√°rios")
        return False
    
    print("\nüöÄ MODO AUTOM√ÅTICO: Iniciando ambos os Radar Analyzers...")
    print("‚ö†Ô∏è ATEN√á√ÉO: Ambos os sistemas ir√£o rodar simultaneamente")
    print("‚ö†Ô∏è Use Ctrl+C para interromper ambos os processos")
    
    try:
        executar_ambos_paralelo()
        return True
    except Exception as e:
        print(f"\n‚ùå Erro na execu√ß√£o autom√°tica: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    # Verificar se foi passado argumento para execu√ß√£o autom√°tica
    if len(sys.argv) > 1 and sys.argv[1] in ['--auto', '-a', '--both']:
        return executar_automatico()
    
    print_header()
    
    # Verificar arquivos necess√°rios
    if not verificar_arquivos():
        print("\n‚ùå N√£o √© poss√≠vel continuar sem os arquivos necess√°rios")
        return
    
    while True:
        mostrar_menu()
        
        try:
            opcao = input("\nüëâ Escolha uma op√ß√£o (0-5): ").strip()
            
            if opcao == '0':
                print("\nüëã Saindo do sistema...")
                break
            
            elif opcao == '1':
                executar_radar_original()
            
            elif opcao == '2':
                executar_radar_tunder()
            
            elif opcao == '3':
                executar_ambos_paralelo()
            
            elif opcao == '4':
                executar_teste_tunder()
            
            elif opcao == '5':
                verificar_status_sistemas()
            
            else:
                print("\n‚ùå Op√ß√£o inv√°lida. Tente novamente.")
        
        except KeyboardInterrupt:
            print("\n\n‚èπÔ∏è Interrompido pelo usu√°rio")
            break
        
        except Exception as e:
            print(f"\n‚ùå Erro inesperado: {e}")
        
        # Pausa antes de mostrar o menu novamente
        if opcao not in ['0']:
            input("\n‚è∏Ô∏è Pressione Enter para continuar...")
    
    print("\n‚úÖ Sistema finalizado")
    print("=" * 70)

if __name__ == "__main__":
    main()
#!/usr/bin/env python3
"""
Teste final para verificar se ambos os radares est√£o enviando os nomes corretos dos bots
"""

import os
import subprocess
import time
import threading
from supabase import create_client, Client
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

def executar_radar_original():
    """Executa o radar original por alguns segundos"""
    try:
        print("üîÑ Iniciando Radar Original (Scalping Bot)...")
        process = subprocess.Popen(['python', 'radar_analyzer.py'], 
                                 stdout=subprocess.PIPE, 
                                 stderr=subprocess.PIPE,
                                 text=True)
        
        # Deixar rodar por 10 segundos
        time.sleep(10)
        process.terminate()
        print("‚úÖ Radar Original finalizado")
        
    except Exception as e:
        print(f"‚ùå Erro no Radar Original: {e}")

def executar_radar_tunder():
    """Executa o radar do Tunder Bot por alguns segundos"""
    try:
        print("üîÑ Iniciando Radar Tunder Bot...")
        process = subprocess.Popen(['python', 'radar_analyzer_tunder.py'], 
                                 stdout=subprocess.PIPE, 
                                 stderr=subprocess.PIPE,
                                 text=True)
        
        # Deixar rodar por 10 segundos
        time.sleep(10)
        process.terminate()
        print("‚úÖ Radar Tunder Bot finalizado")
        
    except Exception as e:
        print(f"‚ùå Erro no Radar Tunder Bot: {e}")

def verificar_resultados():
    """Verifica os resultados na tabela"""
    try:
        # Conectar ao Supabase
        supabase_url = os.getenv('SUPABASE_URL')
        supabase_key = os.getenv('SUPABASE_KEY')
        
        if not supabase_url or not supabase_key:
            print("‚ùå Credenciais do Supabase n√£o encontradas")
            return
        
        supabase: Client = create_client(supabase_url, supabase_key)
        print("\nüîç Verificando resultados na tabela...")
        
        # Buscar os √∫ltimos registros
        response = supabase.table('radar_de_apalancamiento_signals') \
            .select('bot_name, id, created_at, is_safe_to_operate') \
            .order('created_at', desc=True) \
            .limit(20) \
            .execute()
        
        if response.data:
            scalping_count = 0
            tunder_count = 0
            incorrect_count = 0
            
            print("\nüìä √öltimos registros:")
            print("=" * 70)
            
            for record in response.data:
                bot_name = record.get('bot_name', 'N/A')
                record_id = record.get('id', 'N/A')
                created_at = record.get('created_at', 'N/A')[:19] if record.get('created_at') else 'N/A'
                
                if bot_name == 'Scalping Bot':
                    status = "‚úÖ CORRETO"
                    scalping_count += 1
                elif bot_name == 'Tunder Bot':
                    status = "‚úÖ CORRETO"
                    tunder_count += 1
                else:
                    status = "‚ùå INCORRETO"
                    incorrect_count += 1
                
                print(f"{status} | ID: {record_id} | Bot: '{bot_name}' | {created_at}")
            
            print("\nüìà RESUMO DOS RESULTADOS:")
            print("=" * 50)
            print(f"‚úÖ Scalping Bot (correto): {scalping_count} registros")
            print(f"‚úÖ Tunder Bot (correto): {tunder_count} registros")
            print(f"‚ùå Nomes incorretos: {incorrect_count} registros")
            
            if incorrect_count == 0:
                print("\nüéâ SUCESSO! Todos os nomes est√£o corretos!")
            else:
                print(f"\n‚ö†Ô∏è Ainda existem {incorrect_count} registros com nomes incorretos (provavelmente antigos)")
                
        else:
            print("‚ö†Ô∏è Nenhum registro encontrado")
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar resultados: {e}")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ TESTE FINAL - VERIFICA√á√ÉO DOS NOMES DOS BOTS")
    print("=" * 60)
    
    # Executar ambos os radares em paralelo
    thread1 = threading.Thread(target=executar_radar_original)
    thread2 = threading.Thread(target=executar_radar_tunder)
    
    print("‚è≥ Executando ambos os radares por 10 segundos...")
    
    thread1.start()
    thread2.start()
    
    # Aguardar ambos terminarem
    thread1.join()
    thread2.join()
    
    print("\n‚è≥ Aguardando 2 segundos para sincroniza√ß√£o...")
    time.sleep(2)
    
    # Verificar resultados
    verificar_resultados()
    
    print("\n‚úÖ Teste finalizado!")

if __name__ == "__main__":
    main()
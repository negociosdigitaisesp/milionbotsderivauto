#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste do fluxo completo do bot com envio incondicional de status
Verifica se o bot envia atualiza√ß√µes a cada ciclo independente do resultado
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from radar_analisis_scalping_bot import (
    inicializar_supabase, executar_ciclo_analise_simplificado,
    reset_bot_state, BotState, bot_current_state
)
import time

def teste_fluxo_completo():
    """Testa o fluxo completo do bot com envio incondicional"""
    print("üß™ TESTE: Fluxo completo com envio incondicional")
    print("=" * 50)
    
    # Inicializar Supabase
    supabase = inicializar_supabase()
    if not supabase:
        print("‚ùå ERRO: N√£o foi poss√≠vel conectar ao Supabase")
        return
    
    print("‚úÖ Supabase conectado")
    
    # Resetar estado
    reset_bot_state()
    print(f"‚úÖ Estado resetado: {bot_current_state}")
    
    # Executar 3 ciclos de an√°lise
    print("\nüîÑ Executando 3 ciclos de an√°lise...")
    
    for i in range(3):
        print(f"\n--- CICLO {i+1} ---")
        
        resultado = executar_ciclo_analise_simplificado(supabase)
        
        if resultado['status'] == 'COMPLETED':
            analise = resultado['resultado']
            status = "PADR√ÉO ENCONTRADO" if analise['should_operate'] else "SEM PADR√ÉO"
            signal_sent = "‚úÖ ENVIADO" if analise.get('signal_sent', False) else "‚ùå FALHA"
            
            print(f"  Status: {status}")
            print(f"  Raz√£o: {analise['reason']}")
            print(f"  Sinal: {signal_sent}")
            print(f"  Estado atual: {bot_current_state}")
        else:
            print(f"  ‚ùå Erro no ciclo: {resultado.get('message', 'Erro desconhecido')}")
        
        # Aguardar 6 segundos entre ciclos (simular intervalo real)
        if i < 2:  # N√£o aguardar ap√≥s o √∫ltimo ciclo
            print("  ‚è≥ Aguardando 6 segundos...")
            time.sleep(6)
    
    print("\n" + "=" * 50)
    print("üéØ RESULTADO DO TESTE:")
    print("‚úÖ O bot deve ter enviado 3 atualiza√ß√µes para o Supabase")
    print("‚úÖ Cada ciclo deve ter resultado em um envio, independente do padr√£o")
    print("‚úÖ Verifique a tabela 'radar_de_apalancamiento_signals' no Supabase")
    print("\nüìä Dashboard deve mostrar atualiza√ß√µes em tempo real a cada 5-6 segundos")

if __name__ == "__main__":
    teste_fluxo_completo()
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste das corre√ß√µes do executor_momentum_medio_v1.py

Testa os cen√°rios:
1. LLWL sendo interpretado corretamente como LLWL (n√£o LLW)
2. Padr√£o L-L-L detectado e sinal mantido ativo at√© primeira opera√ß√£o
3. Primeira opera√ß√£o ap√≥s padr√£o executada e sinal desativado
"""

import sys
import os
from datetime import datetime

# Adicionar o diret√≥rio atual ao path para importar o m√≥dulo
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Importar a fun√ß√£o que queremos testar
from executor_momentum_medio_v1 import analisar_estrategia_momentum_medio, pattern_state

def reset_pattern_state():
    """Reseta o estado global do padr√£o para cada teste"""
    global pattern_state
    pattern_state['pattern_detected'] = False
    pattern_state['pattern_timestamp'] = None
    pattern_state['pattern_operations_ids'] = []
    pattern_state['waiting_first_operation'] = False
    pattern_state['last_analyzed_operation_id'] = None

def test_scenario_1_llwl_analysis():
    """Teste 1: Verificar se LLWL √© analisado corretamente como LLWL (n√£o LLW)"""
    print("\n=== TESTE 1: An√°lise correta de LLWL ===")
    reset_pattern_state()
    
    # Hist√≥rico: LLWL (mais recente primeiro, como vem do Supabase)
    historico = ['LOSS', 'WIN', 'LOSS', 'LOSS']  # LLWL em ordem DESC
    timestamp = datetime.now().isoformat()
    operation_id = "test_op_1"
    
    resultado = analisar_estrategia_momentum_medio(historico, timestamp, operation_id)
    
    print(f"Hist√≥rico testado: {historico} (ordem DESC - mais recente primeiro)")
    print(f"Resultado: {resultado['reason']}")
    print(f"Should operate: {resultado['should_operate']}")
    
    # Verificar se o padr√£o atual √© mostrado corretamente
    expected_pattern = "LWL"  # √öltimas 3 opera√ß√µes em ordem cronol√≥gica: LWL
    if 'current_pattern' in resultado:
        actual_pattern = resultado['current_pattern']
        print(f"Padr√£o detectado: {actual_pattern}")
        print(f"Padr√£o esperado: {expected_pattern}")
        assert actual_pattern == expected_pattern, f"Erro: esperado {expected_pattern}, obtido {actual_pattern}"
        print("‚úÖ TESTE 1 PASSOU: LLWL analisado corretamente como LWL")
    else:
        print("‚ùå TESTE 1 FALHOU: current_pattern n√£o encontrado no resultado")

def test_scenario_2_lll_pattern_detection():
    """Teste 2: Verificar detec√ß√£o do padr√£o L-L-L e ativa√ß√£o do sinal"""
    print("\n=== TESTE 2: Detec√ß√£o do padr√£o L-L-L ===")
    reset_pattern_state()
    
    # Hist√≥rico: LLL (mais recente primeiro)
    historico = ['LOSS', 'LOSS', 'LOSS']  # LLL em ordem DESC
    timestamp = datetime.now().isoformat()
    operation_id = "test_op_2"
    
    resultado = analisar_estrategia_momentum_medio(historico, timestamp, operation_id)
    
    print(f"Hist√≥rico testado: {historico}")
    print(f"Resultado: {resultado['reason']}")
    print(f"Should operate: {resultado['should_operate']}")
    print(f"Strategy: {resultado.get('strategy', 'N/A')}")
    
    # Verificar se o padr√£o foi detectado e sinal ativado
    assert resultado['should_operate'] == True, "Erro: sinal deveria estar ativo"
    assert resultado.get('pattern_detected') == True, "Erro: padr√£o deveria estar detectado"
    assert 'L-L-L-Pattern-Active' in resultado.get('strategy', ''), "Erro: estrat√©gia incorreta"
    
    print("‚úÖ TESTE 2 PASSOU: Padr√£o L-L-L detectado e sinal ativado")
    
    return operation_id

def test_scenario_3_signal_persistence():
    """Teste 3: Verificar se sinal permanece ativo ap√≥s detec√ß√£o do padr√£o"""
    print("\n=== TESTE 3: Persist√™ncia do sinal ap√≥s detec√ß√£o ===")
    
    # Primeiro, detectar o padr√£o L-L-L
    last_op_id = test_scenario_2_lll_pattern_detection()
    
    # Agora simular uma nova an√°lise SEM nova opera√ß√£o (mesmo operation_id)
    historico = ['LOSS', 'LOSS', 'LOSS']
    timestamp = datetime.now().isoformat()
    
    resultado = analisar_estrategia_momentum_medio(historico, timestamp, last_op_id)
    
    print(f"\nSegunda an√°lise (sem nova opera√ß√£o):")
    print(f"Resultado: {resultado['reason']}")
    print(f"Should operate: {resultado['should_operate']}")
    
    # Verificar se o sinal ainda est√° ativo
    assert resultado['should_operate'] == True, "Erro: sinal deveria permanecer ativo"
    assert 'ATIVO' in resultado['reason'] or 'ACTIVE' in resultado.get('strategy', ''), "Erro: sinal deveria estar ativo"
    
    print("‚úÖ TESTE 3 PASSOU: Sinal permanece ativo enquanto aguarda primeira opera√ß√£o")

def test_scenario_4_first_operation_after_pattern():
    """Teste 4: Verificar desativa√ß√£o do sinal ap√≥s primeira opera√ß√£o p√≥s-padr√£o"""
    print("\n=== TESTE 4: Primeira opera√ß√£o ap√≥s padr√£o L-L-L ===")
    
    # Primeiro, detectar o padr√£o L-L-L
    test_scenario_2_lll_pattern_detection()
    
    # Simular nova opera√ß√£o ap√≥s o padr√£o (WIN)
    historico = ['WIN', 'LOSS', 'LOSS', 'LOSS']  # Nova opera√ß√£o WIN + padr√£o anterior LLL
    timestamp = datetime.now().isoformat()
    new_operation_id = "test_op_4_new"  # ID diferente = nova opera√ß√£o
    
    resultado = analisar_estrategia_momentum_medio(historico, timestamp, new_operation_id)
    
    print(f"Hist√≥rico com nova opera√ß√£o: {historico}")
    print(f"Resultado: {resultado['reason']}")
    print(f"Should operate: {resultado['should_operate']}")
    print(f"Strategy: {resultado.get('strategy', 'N/A')}")
    
    # Verificar se o sinal foi desativado ap√≥s a primeira opera√ß√£o
    assert resultado['should_operate'] == False, "Erro: sinal deveria estar desativado"
    assert resultado.get('pattern_completed') == True, "Erro: padr√£o deveria estar marcado como completo"
    assert 'WIN' in resultado['reason'], "Erro: resultado da primeira opera√ß√£o deveria aparecer"
    
    print("‚úÖ TESTE 4 PASSOU: Sinal desativado ap√≥s primeira opera√ß√£o p√≥s-padr√£o")

def test_scenario_5_llwl_no_false_positive():
    """Teste 5: Verificar que LLWL n√£o gera falso positivo"""
    print("\n=== TESTE 5: LLWL n√£o deve gerar sinal ===")
    reset_pattern_state()
    
    # Hist√≥rico: LLWL (mais recente primeiro)
    historico = ['LOSS', 'WIN', 'LOSS', 'LOSS']  # LLWL em ordem DESC
    timestamp = datetime.now().isoformat()
    operation_id = "test_op_5"
    
    resultado = analisar_estrategia_momentum_medio(historico, timestamp, operation_id)
    
    print(f"Hist√≥rico testado: {historico}")
    print(f"Resultado: {resultado['reason']}")
    print(f"Should operate: {resultado['should_operate']}")
    
    # Verificar que n√£o h√° sinal ativo
    assert resultado['should_operate'] == False, "Erro: LLWL n√£o deveria gerar sinal"
    assert resultado.get('pattern_detected') == False, "Erro: padr√£o L-L-L n√£o deveria estar detectado"
    
    print("‚úÖ TESTE 5 PASSOU: LLWL corretamente n√£o gera sinal")

def run_all_tests():
    """Executa todos os testes"""
    print("üöÄ INICIANDO TESTES DO EXECUTOR_MOMENTUM_MEDIO_V1")
    print("=" * 60)
    
    try:
        test_scenario_1_llwl_analysis()
        test_scenario_2_lll_pattern_detection()
        test_scenario_3_signal_persistence()
        test_scenario_4_first_operation_after_pattern()
        test_scenario_5_llwl_no_false_positive()
        
        print("\n" + "=" * 60)
        print("üéâ TODOS OS TESTES PASSARAM COM SUCESSO!")
        print("‚úÖ As corre√ß√µes est√£o funcionando corretamente.")
        
    except AssertionError as e:
        print(f"\n‚ùå TESTE FALHOU: {e}")
        return False
    except Exception as e:
        print(f"\nüí• ERRO INESPERADO: {e}")
        return False
    
    return True

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)
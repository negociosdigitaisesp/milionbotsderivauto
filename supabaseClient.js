/**
 * Configura√ß√£o do Cliente Supabase para Realtime Updates
 * 
 * Este arquivo configura o cliente Supabase com as credenciais necess√°rias
 * e habilita as funcionalidades de realtime para o sistema de radar.
 */

import { createClient } from '@supabase/supabase-js';

// Configura√ß√µes do Supabase
// IMPORTANTE: Em produ√ß√£o, use vari√°veis de ambiente
const supabaseUrl = process.env.REACT_APP_SUPABASE_URL || 'YOUR_SUPABASE_URL';
const supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY || 'YOUR_SUPABASE_ANON_KEY';

// Verificar se as credenciais est√£o configuradas
if (!supabaseUrl || supabaseUrl === 'YOUR_SUPABASE_URL') {
    console.error('‚ùå SUPABASE_URL n√£o configurada. Configure a vari√°vel de ambiente REACT_APP_SUPABASE_URL');
}

if (!supabaseAnonKey || supabaseAnonKey === 'YOUR_SUPABASE_ANON_KEY') {
    console.error('‚ùå SUPABASE_ANON_KEY n√£o configurada. Configure a vari√°vel de ambiente REACT_APP_SUPABASE_ANON_KEY');
}

// Criar cliente Supabase com configura√ß√µes otimizadas para realtime
const supabase = createClient(supabaseUrl, supabaseAnonKey, {
    realtime: {
        // Configura√ß√µes espec√≠ficas para realtime
        params: {
            eventsPerSecond: 10, // Limitar eventos por segundo
        },
    },
    auth: {
        // Configura√ß√µes de autentica√ß√£o se necess√°rio
        persistSession: true,
        autoRefreshToken: true,
    },
    db: {
        // Configura√ß√µes do banco de dados
        schema: 'public',
    },
});

// Fun√ß√£o para testar conex√£o com Supabase
export const testSupabaseConnection = async () => {
    try {
        console.log('üîÑ Testando conex√£o com Supabase...');
        
        // Testar conex√£o b√°sica
        const { data, error } = await supabase
            .from('radar_de_apalancamiento_signals')
            .select('count')
            .limit(1);
        
        if (error) {
            console.error('‚ùå Erro na conex√£o com Supabase:', error.message);
            return false;
        }
        
        console.log('‚úÖ Conex√£o com Supabase estabelecida com sucesso');
        return true;
        
    } catch (err) {
        console.error('‚ùå Erro ao testar conex√£o:', err.message);
        return false;
    }
};

// Fun√ß√£o para verificar se realtime est√° funcionando
export const testRealtimeConnection = () => {
    return new Promise((resolve) => {
        console.log('üîÑ Testando conex√£o realtime...');
        
        const channel = supabase.channel('test-connection');
        
        const timeout = setTimeout(() => {
            console.log('‚ö†Ô∏è Timeout na conex√£o realtime');
            supabase.removeChannel(channel);
            resolve(false);
        }, 5000);
        
        channel.subscribe((status) => {
            clearTimeout(timeout);
            
            if (status === 'SUBSCRIBED') {
                console.log('‚úÖ Conex√£o realtime estabelecida com sucesso');
                supabase.removeChannel(channel);
                resolve(true);
            } else if (status === 'SUBSCRIPTION_ERROR') {
                console.error('‚ùå Erro na conex√£o realtime');
                supabase.removeChannel(channel);
                resolve(false);
            }
        });
    });
};

// Fun√ß√£o para obter estat√≠sticas da tabela radar_de_apalancamiento_signals
export const getRadarTableStats = async () => {
    try {
        const { data, error } = await supabase
            .from('radar_de_apalancamiento_signals')
            .select('bot_name, is_safe_to_operate, created_at')
            .order('created_at', { ascending: false });
        
        if (error) throw error;
        
        const stats = {
            totalRecords: data.length,
            uniqueBots: new Set(data.map(record => record.bot_name)).size,
            activeBots: data.filter(record => record.is_safe_to_operate).length,
            riskBots: data.filter(record => !record.is_safe_to_operate).length,
            lastUpdate: data.length > 0 ? data[0].created_at : null
        };
        
        console.log('üìä Estat√≠sticas da tabela radar:', stats);
        return stats;
        
    } catch (err) {
        console.error('‚ùå Erro ao obter estat√≠sticas:', err.message);
        return null;
    }
};

// Fun√ß√£o para limpar dados antigos (opcional)
export const cleanupOldRecords = async (daysToKeep = 7) => {
    try {
        const cutoffDate = new Date();
        cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);
        
        const { data, error } = await supabase
            .from('radar_de_apalancamiento_signals')
            .delete()
            .lt('created_at', cutoffDate.toISOString());
        
        if (error) throw error;
        
        console.log(`üßπ Limpeza conclu√≠da. Registros removidos: ${data?.length || 0}`);
        return data?.length || 0;
        
    } catch (err) {
        console.error('‚ùå Erro na limpeza de dados:', err.message);
        return 0;
    }
};

// Exportar cliente principal
export default supabase;

/**
 * Exemplo de uso das fun√ß√µes utilit√°rias:
 * 
 * import supabase, { 
 *     testSupabaseConnection, 
 *     testRealtimeConnection, 
 *     getRadarTableStats 
 * } from './supabaseClient';
 * 
 * // Testar conex√µes na inicializa√ß√£o da aplica√ß√£o
 * async function initializeApp() {
 *     const dbConnected = await testSupabaseConnection();
 *     const realtimeConnected = await testRealtimeConnection();
 *     
 *     if (dbConnected && realtimeConnected) {
 *         console.log('üöÄ Aplica√ß√£o inicializada com sucesso');
 *         
 *         // Obter estat√≠sticas iniciais
 *         await getRadarTableStats();
 *     } else {
 *         console.error('‚ùå Falha na inicializa√ß√£o da aplica√ß√£o');
 *     }
 * }
 * 
 * initializeApp();
 */

/**
 * Configura√ß√£o do arquivo .env para React:
 * 
 * REACT_APP_SUPABASE_URL=https://your-project.supabase.co
 * REACT_APP_SUPABASE_ANON_KEY=your-anon-key-here
 * 
 * Para Next.js, use:
 * NEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co
 * NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key-here
 */
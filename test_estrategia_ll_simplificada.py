#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste da Estrat√©gia LL Simplificada (Sem Filtros de Hor√°rio)

Este script testa a fun√ß√£o analisar_estrategia_momentum_calmo
para garantir que ela detecta corretamente o padr√£o LL sem
aplicar filtros de hor√°rio.
"""

import sys
import importlib.util
from datetime import datetime

# Importar a fun√ß√£o do arquivo radartunder3.5.py
spec = importlib.util.spec_from_file_location("radartunder3_5", "radartunder3.5.py")
radartunder3_5 = importlib.util.module_from_spec(spec)
spec.loader.exec_module(radartunder3_5)

# Importar a fun√ß√£o e constantes necess√°rias
analisar_estrategia_momentum_calmo = radartunder3_5.analisar_estrategia_momentum_calmo
BOT_NAME = radartunder3_5.BOT_NAME

def test_ll_pattern_detection():
    """Testa se a estrat√©gia detecta corretamente o padr√£o LL."""
    print("=== TESTE: Detec√ß√£o do Padr√£o LL ===")
    
    # Teste 1: Padr√£o LL deve ativar a estrat√©gia
    historico_ll = ['LOSS', 'LOSS', 'WIN', 'LOSS']
    timestamp_qualquer = datetime.now().isoformat()
    
    resultado = analisar_estrategia_momentum_calmo(historico_ll, timestamp_qualquer)
    
    assert resultado['should_operate'] == True, "Deveria ativar para padr√£o LL"
    assert resultado['strategy'] == 'Momentum-Calmo-LL', "Estrat√©gia incorreta"
    assert 'LL detectado' in resultado['reason'], "Raz√£o incorreta"
    
    print("‚úÖ Teste 1 PASSOU: Padr√£o LL detectado corretamente")
    
    # Teste 2: Padr√£o WW n√£o deve ativar
    historico_ww = ['WIN', 'WIN', 'LOSS', 'WIN']
    resultado = analisar_estrategia_momentum_calmo(historico_ww, timestamp_qualquer)
    
    assert resultado['should_operate'] == False, "N√£o deveria ativar para padr√£o WW"
    assert 'WW' in resultado['reason'], "Deveria mostrar padr√£o WW"
    
    print("‚úÖ Teste 2 PASSOU: Padr√£o WW rejeitado corretamente")
    
    # Teste 3: Padr√£o LW n√£o deve ativar
    historico_lw = ['WIN', 'LOSS', 'WIN', 'LOSS']
    resultado = analisar_estrategia_momentum_calmo(historico_lw, timestamp_qualquer)
    
    assert resultado['should_operate'] == False, "N√£o deveria ativar para padr√£o LW"
    assert 'LW' in resultado['reason'], "Deveria mostrar padr√£o LW"
    
    print("‚úÖ Teste 3 PASSOU: Padr√£o LW rejeitado corretamente")
    
    # Teste 4: Padr√£o WL n√£o deve ativar
    historico_wl = ['LOSS', 'WIN', 'LOSS', 'WIN']
    resultado = analisar_estrategia_momentum_calmo(historico_wl, timestamp_qualquer)
    
    assert resultado['should_operate'] == False, "N√£o deveria ativar para padr√£o WL"
    assert 'WL' in resultado['reason'], "Deveria mostrar padr√£o WL"
    
    print("‚úÖ Teste 4 PASSOU: Padr√£o WL rejeitado corretamente")

def test_no_time_filters():
    """Testa se a estrat√©gia funciona em qualquer hor√°rio (sem filtros)."""
    print("\n=== TESTE: Sem Filtros de Hor√°rio ===")
    
    # Teste com diferentes hor√°rios - todos devem funcionar se o padr√£o for LL
    horarios_teste = [
        "2024-01-15T03:30:00Z",  # Baixa atividade (antes)
        "2024-01-15T12:45:00Z",  # M√©dia atividade (antes)
        "2024-01-15T20:15:00Z",  # Alta atividade (antes)
        "2024-01-15T05:57:00Z",  # Fechamento da hora (antes)
        "2024-01-15T14:25:00Z",  # Meio da hora (antes)
    ]
    
    historico_ll = ['LOSS', 'LOSS', 'WIN', 'LOSS']
    
    for i, timestamp in enumerate(horarios_teste, 1):
        resultado = analisar_estrategia_momentum_calmo(historico_ll, timestamp)
        
        assert resultado['should_operate'] == True, f"Deveria ativar em qualquer hor√°rio (teste {i})"
        assert 'LL detectado' in resultado['reason'], f"Raz√£o incorreta para hor√°rio {i}"
        
        print(f"‚úÖ Teste {i} PASSOU: LL detectado em {timestamp}")

def test_minimum_history():
    """Testa o comportamento com hist√≥rico insuficiente."""
    print("\n=== TESTE: Hist√≥rico M√≠nimo ===")
    
    # Teste com apenas 1 opera√ß√£o
    historico_insuficiente = ['LOSS']
    timestamp_qualquer = datetime.now().isoformat()
    
    resultado = analisar_estrategia_momentum_calmo(historico_insuficiente, timestamp_qualquer)
    
    assert resultado['should_operate'] == False, "N√£o deveria ativar com hist√≥rico insuficiente"
    assert 'historial m√≠nimo' in resultado['reason'], "Raz√£o incorreta para hist√≥rico insuficiente"
    
    print("‚úÖ Teste PASSOU: Hist√≥rico insuficiente rejeitado corretamente")

def test_bot_name_update():
    """Testa se o nome do bot foi atualizado corretamente."""
    print("\n=== TESTE: Nome do Bot ===")
    
    assert 'll' in BOT_NAME.lower(), f"Nome do bot deveria conter 'll': {BOT_NAME}"
    
    print(f"‚úÖ Teste PASSOU: Nome do bot atualizado: {BOT_NAME}")

def main():
    """Executa todos os testes."""
    print("INICIANDO TESTES DA ESTRAT√âGIA LL SIMPLIFICADA")
    print("=" * 50)
    
    try:
        test_ll_pattern_detection()
        test_no_time_filters()
        test_minimum_history()
        test_bot_name_update()
        
        print("\n" + "=" * 50)
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ A estrat√©gia LL simplificada est√° funcionando corretamente")
        print("‚úÖ Filtros de hor√°rio foram removidos com sucesso")
        print("‚úÖ Apenas o padr√£o LL √© detectado")
        
    except AssertionError as e:
        print(f"\n‚ùå TESTE FALHOU: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• ERRO INESPERADO: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
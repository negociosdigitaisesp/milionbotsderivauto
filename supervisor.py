import subprocess
import time
import sys
import os
import subprocess
from datetime import datetime

# Configura√ß√µes
script_a_rodar = "bot_trading_system.py"
tempo_de_execucao_segundos = 3600  # 1 hora
pausa_entre_reinicios_segundos = 15

# Estat√≠sticas do supervisor
class SupervisorStats:
    def __init__(self):
        self.inicio_supervisor = datetime.now()
        self.total_ciclos = 0
        self.reinicios_programados = 0
        self.reinicios_por_falha = 0
        self.ultimo_reinicio = None
        
    def registrar_reinicio_programado(self):
        self.reinicios_programados += 1
        self.ultimo_reinicio = datetime.now()
        
    def registrar_reinicio_falha(self):
        self.reinicios_por_falha += 1
        self.ultimo_reinicio = datetime.now()
        
    def get_relatorio(self):
        tempo_ativo = datetime.now() - self.inicio_supervisor
        return {
            'tempo_ativo': str(tempo_ativo).split('.')[0],
            'total_ciclos': self.total_ciclos,
            'reinicios_programados': self.reinicios_programados,
            'reinicios_por_falha': self.reinicios_por_falha,
            'ultimo_reinicio': self.ultimo_reinicio.strftime("%H:%M:%S") if self.ultimo_reinicio else "N/A"
        }

# Inst√¢ncia global das estat√≠sticas
stats = SupervisorStats()

def log_message(message):
    """Fun√ß√£o para logging com timestamp"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {message}")

def get_python_executable():
    """Obt√©m o caminho para o execut√°vel Python dispon√≠vel"""
    # Lista de poss√≠veis caminhos para o Python
    possible_paths = []
    
    if os.name == 'nt':  # Windows
        possible_paths = [
            os.path.join("venv", "Scripts", "python.exe"),
            os.path.join(".venv", "Scripts", "python.exe"),
            "python.exe",
            "python"
        ]
    else:  # Linux/Mac
        possible_paths = [
            os.path.join("venv", "bin", "python"),
            os.path.join(".venv", "bin", "python"),
            "python3",
            "python"
        ]
    
    # Tenta encontrar um execut√°vel Python v√°lido
    for python_path in possible_paths:
        try:
            if os.path.exists(python_path):
                # Testa se o Python funciona
                result = subprocess.run([python_path, "--version"], 
                                      capture_output=True, text=True, timeout=5)
                if result.returncode == 0:
                    log_message(f"‚úÖ Python encontrado: {python_path}")
                    log_message(f"üìã Vers√£o: {result.stdout.strip()}")
                    return python_path
            else:
                # Para comandos do sistema (python, python3)
                if python_path in ["python", "python.exe", "python3"]:
                    try:
                        result = subprocess.run([python_path, "--version"], 
                                              capture_output=True, text=True, timeout=5)
                        if result.returncode == 0:
                            log_message(f"‚úÖ Python do sistema encontrado: {python_path}")
                            log_message(f"üìã Vers√£o: {result.stdout.strip()}")
                            return python_path
                    except FileNotFoundError:
                        continue
        except (subprocess.TimeoutExpired, FileNotFoundError, OSError):
            continue
    
    # Se chegou aqui, n√£o encontrou Python v√°lido
    log_message("‚ùå ERRO CR√çTICO: Nenhum execut√°vel Python v√°lido encontrado!")
    log_message("üí° Op√ß√µes para resolver:")
    log_message("   1. Criar ambiente virtual: python -m venv venv")
    log_message("   2. Ativar ambiente virtual existente")
    log_message("   3. Instalar Python no sistema")
    log_message("   4. Verificar se Python est√° no PATH")
    sys.exit(1)

def exibir_estatisticas():
    """Exibe estat√≠sticas do supervisor"""
    relatorio = stats.get_relatorio()
    log_message("üìä ESTAT√çSTICAS DO SUPERVISOR")
    log_message(f"‚è∞ Tempo ativo: {relatorio['tempo_ativo']}")
    log_message(f"üîÑ Total de ciclos: {relatorio['total_ciclos']}")
    log_message(f"‚è∞ Rein√≠cios programados: {relatorio['reinicios_programados']}")
    log_message(f"‚ö†Ô∏è Rein√≠cios por falha: {relatorio['reinicios_por_falha']}")
    log_message(f"üïê √öltimo rein√≠cio: {relatorio['ultimo_reinicio']}")
    log_message("=" * 50)

def main():
    """Fun√ß√£o principal do supervisor"""
    log_message("üöÄ SUPERVISOR ROBUSTO INICIADO")
    log_message("=" * 50)
    log_message(f"üìÑ Script a executar: {script_a_rodar}")
    log_message(f"‚è±Ô∏è  Tempo de execu√ß√£o: {tempo_de_execucao_segundos} segundos ({tempo_de_execucao_segundos//60} minutos)")
    log_message(f"‚è∏Ô∏è  Pausa entre rein√≠cios: {pausa_entre_reinicios_segundos} segundos")
    log_message("üîß Funcionalidades: Rein√≠cio por tempo + Detec√ß√£o de falhas")
    log_message("=" * 50)
    
    # Obter o execut√°vel Python
    python_executable = get_python_executable()
    
    # Verificar se o script existe
    if not os.path.exists(script_a_rodar):
        log_message(f"‚ùå ERRO CR√çTICO: Script n√£o encontrado: {script_a_rodar}")
        sys.exit(1)
    
    log_message(f"‚úÖ Script encontrado: {script_a_rodar}")
    log_message("üîÑ Iniciando loop de supervis√£o robusto...")
    log_message("üí° O supervisor detectar√° falhas automaticamente e reiniciar√° o sistema")
    
    ciclo = 1
    
    while True:
        try:
            stats.total_ciclos = ciclo
            log_message(f"üîÑ CICLO {ciclo} - Iniciando {script_a_rodar}")
            
            # Exibir estat√≠sticas a cada 5 ciclos
            if ciclo > 1 and ciclo % 5 == 0:
                exibir_estatisticas()
            
            # Iniciar o processo
            inicio_processo = datetime.now()
            processo = subprocess.Popen([python_executable, script_a_rodar])
            log_message(f"‚úÖ Processo iniciado com PID: {processo.pid} √†s {inicio_processo.strftime('%H:%M:%S')}")
            
            # Aguardar pelo tempo especificado ou at√© o processo terminar
            try:
                # Esta √© a chave: wait() com timeout detecta ambas as situa√ß√µes
                processo.wait(timeout=tempo_de_execucao_segundos)
                # Se chegou aqui, o processo dos bots parou inesperadamente
                tempo_execucao = datetime.now() - inicio_processo
                log_message("‚ö†Ô∏è O script dos bots parou inesperadamente. Reiniciando...")
                log_message(f"üîç C√≥digo de sa√≠da do processo: {processo.returncode}")
                log_message(f"‚è±Ô∏è Tempo de execu√ß√£o antes da falha: {str(tempo_execucao).split('.')[0]}")
                stats.registrar_reinicio_falha()
                
            except subprocess.TimeoutExpired:
                # Rein√≠cio programado - processo ainda estava rodando ap√≥s 1 hora
                log_message(f"‚è∞ Tempo limite atingido ({tempo_de_execucao_segundos}s) - Rein√≠cio programado")
                log_message("üîÑ Encerrando processo para rein√≠cio programado...")
                stats.registrar_reinicio_programado()
                
                # Encerrar o processo graciosamente
                processo.terminate()
                try:
                    processo.wait(timeout=10)
                    log_message("‚úÖ Processo encerrado graciosamente")
                except subprocess.TimeoutExpired:
                    log_message("‚ö†Ô∏è For√ßando encerramento do processo...")
                    processo.kill()
                    processo.wait()
                    log_message("‚úÖ Processo encerrado for√ßadamente")
            
        # Pausa entre rein√≠cios (essencial para evitar rein√≠cios fren√©ticos)
        if pausa_entre_reinicios_segundos > 0:
            log_message(f"‚è∏Ô∏è Aguardando {pausa_entre_reinicios_segundos} segundos antes do pr√≥ximo ciclo...")
            time.sleep(pausa_entre_reinicios_segundos)
        
        ciclo += 1
            
        except KeyboardInterrupt:
            log_message("üõë INTERRUP√á√ÉO MANUAL DETECTADA (Ctrl+C)")
            if 'processo' in locals() and processo.poll() is None:
                log_message("üîÑ Encerrando processo do bot...")
                processo.terminate()
                try:
                    processo.wait(timeout=10)
                    log_message("‚úÖ Processo do bot encerrado graciosamente")
                except subprocess.TimeoutExpired:
                    log_message("‚ö†Ô∏è For√ßando encerramento do processo do bot...")
                    processo.kill()
                    processo.wait()
                    log_message("‚úÖ Processo do bot encerrado for√ßadamente")
            
            log_message("üëã SUPERVISOR ENCERRADO")
            log_message("üìä ESTAT√çSTICAS FINAIS:")
            exibir_estatisticas()
            break
            
        except Exception as e:
            log_message(f"‚ùå ERRO INESPERADO NO SUPERVISOR: {str(e)}")
            log_message(f"üîç Tipo do erro: {type(e).__name__}")
            log_message("üîÑ Tentando continuar opera√ß√£o...")
            stats.registrar_reinicio_falha()
            
            # Se h√° um processo rodando, tentar encerrar
            if 'processo' in locals() and processo.poll() is None:
                try:
                    log_message("üõë Encerrando processo devido ao erro...")
                    processo.terminate()
                    processo.wait(timeout=5)
                    log_message("‚úÖ Processo encerrado ap√≥s erro")
                except:
                    try:
                        processo.kill()
                        processo.wait()
                        log_message("‚úÖ Processo for√ßadamente encerrado ap√≥s erro")
                    except:
                        log_message("‚ö†Ô∏è N√£o foi poss√≠vel encerrar o processo")
                        pass
            
            # Pausa antes de tentar novamente
            time.sleep(pausa_entre_reinicios_segundos)
            ciclo += 1

if __name__ == "__main__":
    main()
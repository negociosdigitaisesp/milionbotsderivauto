#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste do Accumulator Scalping Bot
Testa a funcionalidade completa do bot incluindo:
- Conex√£o com Deriv API
- An√°lise de ticks
- L√≥gica de entrada
- Gest√£o de risco
- Integra√ß√£o com Supabase
"""

import asyncio
import os
import sys
from datetime import datetime
from dotenv import load_dotenv
from deriv_api import DerivAPI
from supabase import create_client

# Adicionar o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Importar o bot
try:
    from trading_system.bots.accumulator_bot.bot_accumulator_scalping import bot_accumulator_scalping, AccumulatorScalpingBot
except ImportError as e:
    print(f"‚ùå Erro ao importar bot: {e}")
    sys.exit(1)

# Carregar vari√°veis de ambiente
load_dotenv()

DERIV_APP_ID = os.getenv("DERIV_APP_ID")
DERIV_API_TOKEN = os.getenv("DERIV_API_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

if not all([DERIV_APP_ID, DERIV_API_TOKEN, SUPABASE_URL, SUPABASE_KEY]):
    print("‚ùå Erro: Vari√°veis de ambiente n√£o encontradas")
    sys.exit(1)


async def test_deriv_connection():
    """Testa conex√£o com Deriv API"""
    try:
        print("\n=== TESTANDO CONEX√ÉO DERIV ===")
        api = DerivAPI(app_id=DERIV_APP_ID)
        await api.authorize(DERIV_API_TOKEN)
        
        # Testar balance
        balance_response = await api.balance()
        if 'error' not in balance_response:
            balance = balance_response['balance']['balance']
            currency = balance_response['balance']['currency']
            print(f"‚úÖ Conex√£o Deriv OK - Saldo: {balance} {currency}")
        
        await api.disconnect()
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na conex√£o Deriv: {e}")
        return False


async def test_supabase_connection():
    """Testa conex√£o com Supabase"""
    try:
        print("\n=== TESTANDO CONEX√ÉO SUPABASE ===")
        supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
        
        # Testar se a tabela existe
        try:
            result = supabase.table('scalping_accumulator_bot_logs').select('*').limit(1).execute()
            print("‚úÖ Tabela 'scalping_accumulator_bot_logs' encontrada")
        except Exception:
            print("‚ö†Ô∏è  Tabela 'scalping_accumulator_bot_logs' n√£o existe - ser√° criada automaticamente")
        
        print("‚úÖ Conex√£o Supabase OK")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na conex√£o Supabase: {e}")
        return False


async def test_bot_initialization():
    """Testa inicializa√ß√£o do bot"""
    try:
        print("\n=== TESTANDO INICIALIZA√á√ÉO DO BOT ===")
        api = DerivAPI(app_id=DERIV_APP_ID)
        await api.authorize(DERIV_API_TOKEN)
        
        # Criar inst√¢ncia do bot
        bot = AccumulatorScalpingBot(api)
        
        print(f"‚úÖ Bot inicializado com sucesso")
        print(f"   üìä Nome: {bot.nome_bot}")
        print(f"   üí∞ Stake inicial: ${bot.stake_inicial}")
        print(f"   üî¢ Fator khizzbot: {bot.khizzbot}")
        print(f"   üìà Growth Rate: {bot.growth_rate*100}%")
        print(f"   üéØ Take Profit: {bot.take_profit_inicial*100}%")
        print(f"   üè™ Ativo: {bot.ativo}")
        
        await api.disconnect()
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na inicializa√ß√£o: {e}")
        return False


async def test_tick_analysis():
    """Testa an√°lise de ticks"""
    try:
        print("\n=== TESTANDO AN√ÅLISE DE TICKS ===")
        api = DerivAPI(app_id=DERIV_APP_ID)
        await api.authorize(DERIV_API_TOKEN)
        
        bot = AccumulatorScalpingBot(api)
        
        # Testar obten√ß√£o de ticks
        print("üìä Obtendo hist√≥rico de ticks...")
        resultado = await bot.analisar_ticks()
        
        if resultado:
            print("‚úÖ Condi√ß√£o de entrada ATENDIDA - Padr√£o Red,Red,Red,Blue encontrado!")
        else:
            print("‚ÑπÔ∏è  Condi√ß√£o de entrada n√£o atendida - aguardando padr√£o correto")
        
        await api.disconnect()
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na an√°lise de ticks: {e}")
        return False


async def test_risk_management():
    """Testa gest√£o de risco"""
    try:
        print("\n=== TESTANDO GEST√ÉO DE RISCO ===")
        api = DerivAPI(app_id=DERIV_APP_ID)
        await api.authorize(DERIV_API_TOKEN)
        
        bot = AccumulatorScalpingBot(api)
        
        # Simular cen√°rio de vit√≥ria
        print("üéâ Simulando VIT√ìRIA...")
        resultado_win = {
            'is_win': True,
            'profit': 5.0,
            'profit_percentage': 10.0
        }
        bot.processar_resultado(resultado_win)
        print(f"   üí∞ Stake ap√≥s vit√≥ria: ${bot.stake_atual}")
        print(f"   üìä Total lost: ${bot.total_lost}")
        print(f"   üéØ Take profit: ${bot.take_profit_atual}")
        
        # Simular cen√°rio de derrota
        print("\n‚ùå Simulando DERROTA...")
        resultado_loss = {
            'is_win': False,
            'profit': -50.0,
            'profit_percentage': -100.0
        }
        bot.processar_resultado(resultado_loss)
        print(f"   üí∞ Stake ap√≥s derrota: ${bot.stake_atual}")
        print(f"   üìä Total lost: ${bot.total_lost}")
        print(f"   üéØ Take profit: ${bot.take_profit_atual}")
        
        print("‚úÖ Gest√£o de risco funcionando corretamente")
        
        await api.disconnect()
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na gest√£o de risco: {e}")
        return False


async def test_supabase_integration():
    """Testa integra√ß√£o com Supabase"""
    try:
        print("\n=== TESTANDO INTEGRA√á√ÉO SUPABASE ===")
        api = DerivAPI(app_id=DERIV_APP_ID)
        await api.authorize(DERIV_API_TOKEN)
        
        bot = AccumulatorScalpingBot(api)
        
        # Simular resultado para salvar
        resultado_teste = {
            'is_win': True,
            'profit': 5.0,
            'profit_percentage': 10.0
        }
        
        print("üíæ Salvando resultado de teste no Supabase...")
        await bot.salvar_resultado_supabase(resultado_teste)
        print("‚úÖ Integra√ß√£o Supabase funcionando")
        
        await api.disconnect()
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na integra√ß√£o Supabase: {e}")
        return False


async def run_short_test():
    """Executa teste curto do bot (30 segundos)"""
    try:
        print("\n=== TESTE CURTO DO BOT (30 segundos) ===")
        api = DerivAPI(app_id=DERIV_APP_ID)
        await api.authorize(DERIV_API_TOKEN)
        
        print("üöÄ Iniciando bot por 30 segundos...")
        
        # Executar bot com timeout
        try:
            await asyncio.wait_for(bot_accumulator_scalping(api), timeout=30)
        except asyncio.TimeoutError:
            print("‚è∞ Teste de 30 segundos conclu√≠do")
        
        await api.disconnect()
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste curto: {e}")
        return False


async def main():
    """Fun√ß√£o principal de teste"""
    print("üß™ TESTE COMPLETO DO ACCUMULATOR SCALPING BOT")
    print("=" * 60)
    print(f"‚è∞ Iniciado em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    testes = [
        ("Conex√£o Deriv", test_deriv_connection),
        ("Conex√£o Supabase", test_supabase_connection),
        ("Inicializa√ß√£o Bot", test_bot_initialization),
        ("An√°lise de Ticks", test_tick_analysis),
        ("Gest√£o de Risco", test_risk_management),
        ("Integra√ß√£o Supabase", test_supabase_integration),
        ("Teste Curto (30s)", run_short_test)
    ]
    
    resultados = []
    
    for nome_teste, funcao_teste in testes:
        print(f"\nüîç Executando: {nome_teste}")
        try:
            resultado = await funcao_teste()
            resultados.append((nome_teste, resultado))
        except Exception as e:
            print(f"‚ùå Erro em {nome_teste}: {e}")
            resultados.append((nome_teste, False))
    
    # Resumo dos resultados
    print("\n" + "=" * 60)
    print("üìã RESUMO DOS TESTES")
    print("=" * 60)
    
    sucessos = 0
    for nome, resultado in resultados:
        status = "‚úÖ PASSOU" if resultado else "‚ùå FALHOU"
        print(f"{nome:<25} {status}")
        if resultado:
            sucessos += 1
    
    print(f"\nüìä Resultado Final: {sucessos}/{len(resultados)} testes passaram")
    
    if sucessos == len(resultados):
        print("üéâ TODOS OS TESTES PASSARAM! Bot pronto para uso.")
    else:
        print("‚ö†Ô∏è  Alguns testes falharam. Verifique as configura√ß√µes.")
    
    print(f"‚è∞ Finalizado em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Teste interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro cr√≠tico no teste: {e}")
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste usando exatamente a mesma configura√ß√£o do bot_trading_system.py
"""

import asyncio
import os
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente do arquivo .env (mesmo que bot_trading_system.py)
load_dotenv()

async def test_connection():
    """Testa conex√£o usando a mesma configura√ß√£o do bot_trading_system.py"""
    try:
        from deriv_api import DerivAPI
        
        # Usar exatamente as mesmas vari√°veis que bot_trading_system.py
        DERIV_APP_ID = os.getenv("DERIV_APP_ID")
        DERIV_API_TOKEN = os.getenv("DERIV_API_TOKEN")
        
        print(f"=== TESTE DE CONEX√ÉO ===")
        print(f"DERIV_APP_ID: {DERIV_APP_ID}")
        print(f"DERIV_API_TOKEN: {DERIV_API_TOKEN[:10]}...{DERIV_API_TOKEN[-4:] if DERIV_API_TOKEN else 'None'}")
        
        if not all([DERIV_APP_ID, DERIV_API_TOKEN]):
            print("‚ùå Erro: Vari√°veis de ambiente n√£o encontradas")
            return False
        
        print("üîó Conectando √† API da Deriv...")
        api = DerivAPI(app_id=DERIV_APP_ID)
        response = await api.authorize(DERIV_API_TOKEN)
        
        if 'authorize' in response:
            account_info = response['authorize']
            print("‚úÖ Conex√£o bem-sucedida!")
            print(f"üë§ Usu√°rio: {account_info.get('loginid', 'N/A')}")
            print(f"üí∞ Moeda: {account_info.get('currency', 'N/A')}")
            print(f"üè¶ Saldo: {account_info.get('balance', 'N/A')}")
            
            await api.disconnect()
            return True
        else:
            print(f"‚ùå Erro na autoriza√ß√£o: {response}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na conex√£o: {e}")
        return False

if __name__ == "__main__":
    asyncio.run(test_connection())